; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\tasks.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\tasks.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\tasks.crf ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\tasks.c]
                          ARM

                          AREA ||i.eTaskGetState||, CODE, READONLY, ALIGN=2

                  eTaskGetState PROC
;;;1268   
;;;1269   	eTaskState eTaskGetState( TaskHandle_t xTask )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1270   	{
;;;1271   	eTaskState eReturn;
;;;1272   	List_t *pxStateList;
;;;1273   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
;;;1274   
;;;1275   		configASSERT( pxTCB );
;;;1276   
;;;1277   		if( pxTCB == pxCurrentTCB )
000004  e59f6070          LDR      r6,|L1.124|
000008  e1a05000          MOV      r5,r0                 ;1270
00000c  e5960000          LDR      r0,[r6,#0]  ; pxCurrentTCB
000010  e1550000          CMP      r5,r0
;;;1278   		{
;;;1279   			/* The task calling this function is querying its own state. */
;;;1280   			eReturn = eRunning;
000014  03a00000          MOVEQ    r0,#0
;;;1281   		}
;;;1282   		else
;;;1283   		{
;;;1284   			taskENTER_CRITICAL();
;;;1285   			{
;;;1286   				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
;;;1287   			}
;;;1288   			taskEXIT_CRITICAL();
;;;1289   
;;;1290   			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
;;;1291   			{
;;;1292   				/* The task being queried is referenced from one of the Blocked
;;;1293   				lists. */
;;;1294   				eReturn = eBlocked;
;;;1295   			}
;;;1296   
;;;1297   			#if ( INCLUDE_vTaskSuspend == 1 )
;;;1298   				else if( pxStateList == &xSuspendedTaskList )
;;;1299   				{
;;;1300   					/* The task being queried is referenced from the suspended
;;;1301   					list.  Is it genuinely suspended or is it block
;;;1302   					indefinitely? */
;;;1303   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
;;;1304   					{
;;;1305   						eReturn = eSuspended;
;;;1306   					}
;;;1307   					else
;;;1308   					{
;;;1309   						eReturn = eBlocked;
;;;1310   					}
;;;1311   				}
;;;1312   			#endif
;;;1313   
;;;1314   			#if ( INCLUDE_vTaskDelete == 1 )
;;;1315   				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
;;;1316   				{
;;;1317   					/* The task being queried is referenced from the deleted
;;;1318   					tasks list, or it is not referenced from any lists at
;;;1319   					all. */
;;;1320   					eReturn = eDeleted;
;;;1321   				}
;;;1322   			#endif
;;;1323   
;;;1324   			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
;;;1325   			{
;;;1326   				/* If the task is not in any other state, it must be in the
;;;1327   				Ready (including pending ready) state. */
;;;1328   				eReturn = eReady;
;;;1329   			}
;;;1330   		}
;;;1331   
;;;1332   		return eReturn;
;;;1333   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000018  08bd8070          POPEQ    {r4-r6,pc}
00001c  ebfffffe          BL       vPortEnterCritical
000020  e5954014          LDR      r4,[r5,#0x14]         ;1286
000024  ebfffffe          BL       vPortExitCritical
000028  e5960034          LDR      r0,[r6,#0x34]         ;1290  ; pxDelayedTaskList
00002c  e1540000          CMP      r4,r0                 ;1290
000030  15960038          LDRNE    r0,[r6,#0x38]         ;1290  ; pxOverflowDelayedTaskList
000034  11540000          CMPNE    r4,r0                 ;1290
000038  1a000001          BNE      |L1.68|
                  |L1.60|
00003c  e3a00002          MOV      r0,#2                 ;1294
000040  e8bd8070          POP      {r4-r6,pc}
                  |L1.68|
000044  e59f0034          LDR      r0,|L1.128|
000048  e1540000          CMP      r4,r0                 ;1298
00004c  1a000004          BNE      |L1.100|
000050  e5950028          LDR      r0,[r5,#0x28]         ;1303
000054  e3500000          CMP      r0,#0                 ;1303
000058  03a00003          MOVEQ    r0,#3                 ;1305
00005c  1afffff6          BNE      |L1.60|
000060  e8bd8070          POP      {r4-r6,pc}
                  |L1.100|
000064  e59f0018          LDR      r0,|L1.132|
000068  e1540000          CMP      r4,r0                 ;1315
00006c  13540000          CMPNE    r4,#0                 ;1315
000070  03a00004          MOVEQ    r0,#4                 ;1320
000074  13a00001          MOVNE    r0,#1                 ;1328
000078  e8bd8070          POP      {r4-r6,pc}
;;;1334   
                          ENDP

                  |L1.124|
                          DCD      ||.data||
                  |L1.128|
                          DCD      ||.bss||+0xa0
                  |L1.132|
                          DCD      ||.bss||+0x8c

                          AREA ||i.pcTaskGetName||, CODE, READONLY, ALIGN=2

                  pcTaskGetName PROC
;;;2180   
;;;2181   char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e3500000          CMP      r0,#0
;;;2182   {
;;;2183   TCB_t *pxTCB;
;;;2184   
;;;2185   	/* If null is passed in here then the name of the calling task is being
;;;2186   	queried. */
;;;2187   	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
000004  059f0008          LDREQ    r0,|L2.20|
000008  05900000          LDREQ    r0,[r0,#0]  ; pxCurrentTCB
00000c  e2800034          ADD      r0,r0,#0x34
;;;2188   	configASSERT( pxTCB );
;;;2189   	return &( pxTCB->pcTaskName[ 0 ] );
;;;2190   }
000010  e12fff1e          BX       lr
;;;2191   /*-----------------------------------------------------------*/
                          ENDP

                  |L2.20|
                          DCD      ||.data||

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;4691   
;;;4692   static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4693   {
;;;4694   TickType_t xTimeToWake;
;;;4695   const TickType_t xConstTickCount = xTickCount;
000004  e59f6078          LDR      r6,|L3.132|
000008  e1a07001          MOV      r7,r1                 ;4693
00000c  e596500c          LDR      r5,[r6,#0xc]  ; xTickCount
000010  e1a04000          MOV      r4,r0                 ;4693
;;;4696   
;;;4697   	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;4698   	{
;;;4699   		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
;;;4700   		reset to pdFALSE so it can be detected as having been set to pdTRUE
;;;4701   		when the task leaves the Blocked state. */
;;;4702   		pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;4703   	}
;;;4704   	#endif
;;;4705   
;;;4706   	/* Remove the task from the ready list before adding it to the blocked list
;;;4707   	as the same list item is used for both lists. */
;;;4708   	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000014  e5960000          LDR      r0,[r6,#0]  ; pxCurrentTCB
000018  e2800004          ADD      r0,r0,#4
00001c  ebfffffe          BL       uxListRemove
;;;4709   	{
;;;4710   		/* The current task must be in a ready list, so there is no need to
;;;4711   		check, and the port reset macro can be called directly. */
;;;4712   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
;;;4713   	}
;;;4714   	else
;;;4715   	{
;;;4716   		mtCOVERAGE_TEST_MARKER();
;;;4717   	}
;;;4718   
;;;4719   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;4720   	{
;;;4721   		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
000020  e3740001          CMN      r4,#1
000024  1a000006          BNE      |L3.68|
000028  e3570000          CMP      r7,#0
00002c  0a000004          BEQ      |L3.68|
;;;4722   		{
;;;4723   			/* Add the task to the suspended task list instead of a delayed task
;;;4724   			list to ensure it is not woken by a timing event.  It will block
;;;4725   			indefinitely. */
;;;4726   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
000030  e5960000          LDR      r0,[r6,#0]  ; pxCurrentTCB
000034  e8bd41f0          POP      {r4-r8,lr}
000038  e2801004          ADD      r1,r0,#4
00003c  e59f0044          LDR      r0,|L3.136|
000040  eafffffe          B        vListInsertEnd
                  |L3.68|
;;;4727   		}
;;;4728   		else
;;;4729   		{
;;;4730   			/* Calculate the time at which the task should be woken if the event
;;;4731   			does not occur.  This may overflow but this doesn't matter, the
;;;4732   			kernel will manage it correctly. */
;;;4733   			xTimeToWake = xConstTickCount + xTicksToWait;
;;;4734   
;;;4735   			/* The list item will be inserted in wake time order. */
;;;4736   			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
000044  e5960000          LDR      r0,[r6,#0]  ; pxCurrentTCB
000048  e0844005          ADD      r4,r4,r5              ;4733
00004c  e5804004          STR      r4,[r0,#4]
;;;4737   
;;;4738   			if( xTimeToWake < xConstTickCount )
;;;4739   			{
;;;4740   				/* Wake time has overflowed.  Place this item in the overflow
;;;4741   				list. */
;;;4742   				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4743   			}
;;;4744   			else
;;;4745   			{
;;;4746   				/* The wake time has not overflowed, so the current block list
;;;4747   				is used. */
;;;4748   				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
000050  e5960000          LDR      r0,[r6,#0]  ; pxCurrentTCB
000054  e1540005          CMP      r4,r5                 ;4738
000058  e2801004          ADD      r1,r0,#4
00005c  2a000002          BCS      |L3.108|
000060  e5960038          LDR      r0,[r6,#0x38]         ;4742  ; pxOverflowDelayedTaskList
000064  e8bd41f0          POP      {r4-r8,lr}            ;4742
000068  eafffffe          B        vListInsert
                  |L3.108|
00006c  e5960034          LDR      r0,[r6,#0x34]  ; pxDelayedTaskList
000070  ebfffffe          BL       vListInsert
;;;4749   
;;;4750   				/* If the task entering the blocked state was placed at the
;;;4751   				head of the list of blocked tasks then xNextTaskUnblockTime
;;;4752   				needs to be updated too. */
;;;4753   				if( xTimeToWake < xNextTaskUnblockTime )
000074  e5960028          LDR      r0,[r6,#0x28]  ; xNextTaskUnblockTime
000078  e1500004          CMP      r0,r4
;;;4754   				{
;;;4755   					xNextTaskUnblockTime = xTimeToWake;
00007c  85864028          STRHI    r4,[r6,#0x28]  ; xNextTaskUnblockTime
;;;4756   				}
;;;4757   				else
;;;4758   				{
;;;4759   					mtCOVERAGE_TEST_MARKER();
;;;4760   				}
;;;4761   			}
;;;4762   		}
;;;4763   	}
;;;4764   	#else /* INCLUDE_vTaskSuspend */
;;;4765   	{
;;;4766   		/* Calculate the time at which the task should be woken if the event
;;;4767   		does not occur.  This may overflow but this doesn't matter, the kernel
;;;4768   		will manage it correctly. */
;;;4769   		xTimeToWake = xConstTickCount + xTicksToWait;
;;;4770   
;;;4771   		/* The list item will be inserted in wake time order. */
;;;4772   		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
;;;4773   
;;;4774   		if( xTimeToWake < xConstTickCount )
;;;4775   		{
;;;4776   			/* Wake time has overflowed.  Place this item in the overflow list. */
;;;4777   			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4778   		}
;;;4779   		else
;;;4780   		{
;;;4781   			/* The wake time has not overflowed, so the current block list is used. */
;;;4782   			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
;;;4783   
;;;4784   			/* If the task entering the blocked state was placed at the head of the
;;;4785   			list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;4786   			too. */
;;;4787   			if( xTimeToWake < xNextTaskUnblockTime )
;;;4788   			{
;;;4789   				xNextTaskUnblockTime = xTimeToWake;
;;;4790   			}
;;;4791   			else
;;;4792   			{
;;;4793   				mtCOVERAGE_TEST_MARKER();
;;;4794   			}
;;;4795   		}
;;;4796   
;;;4797   		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
;;;4798   		( void ) xCanBlockIndefinitely;
;;;4799   	}
;;;4800   	#endif /* INCLUDE_vTaskSuspend */
;;;4801   }
000080  e8bd81f0          POP      {r4-r8,pc}
;;;4802   
                          ENDP

                  |L3.132|
                          DCD      ||.data||
                  |L3.136|
                          DCD      ||.bss||+0xa0

                          AREA ||i.prvAddNewTaskToReadyList||, CODE, READONLY, ALIGN=2

                  prvAddNewTaskToReadyList PROC
;;;962    
;;;963    static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;964    {
000004  e1a05000          MOV      r5,r0
;;;965    	/* Ensure interrupts don't access the task lists while the lists are being
;;;966    	updated. */
;;;967    	taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;968    	{
;;;969    		uxCurrentNumberOfTasks++;
00000c  e59f7100          LDR      r7,|L4.276|
000010  e5970008          LDR      r0,[r7,#8]  ; uxCurrentNumberOfTasks
000014  e2800001          ADD      r0,r0,#1
000018  e5870008          STR      r0,[r7,#8]  ; uxCurrentNumberOfTasks
;;;970    		if( pxCurrentTCB == NULL )
00001c  e5970000          LDR      r0,[r7,#0]  ; pxCurrentTCB
000020  e59f60f0          LDR      r6,|L4.280|
000024  e3500000          CMP      r0,#0
000028  0a000003          BEQ      |L4.60|
;;;971    		{
;;;972    			/* There are no other tasks, or all the other tasks are in
;;;973    			the suspended state - make this the current task. */
;;;974    			pxCurrentTCB = pxNewTCB;
;;;975    
;;;976    			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
;;;977    			{
;;;978    				/* This is the first task to be created so do the preliminary
;;;979    				initialisation required.  We will not recover if this call
;;;980    				fails, but we will report the failure. */
;;;981    				prvInitialiseTaskLists();
;;;982    			}
;;;983    			else
;;;984    			{
;;;985    				mtCOVERAGE_TEST_MARKER();
;;;986    			}
;;;987    		}
;;;988    		else
;;;989    		{
;;;990    			/* If the scheduler is not already running, make this task the
;;;991    			current task if it is the highest priority task to be created
;;;992    			so far. */
;;;993    			if( xSchedulerRunning == pdFALSE )
00002c  e5970014          LDR      r0,[r7,#0x14]  ; xSchedulerRunning
000030  e3500000          CMP      r0,#0
000034  0a00001a          BEQ      |L4.164|
000038  ea00001e          B        |L4.184|
                  |L4.60|
00003c  e5875000          STR      r5,[r7,#0]            ;974  ; pxCurrentTCB
000040  e5970008          LDR      r0,[r7,#8]            ;976  ; uxCurrentNumberOfTasks
000044  e3500001          CMP      r0,#1                 ;976
000048  03a04000          MOVEQ    r4,#0                 ;976
00004c  1a000019          BNE      |L4.184|
                  |L4.80|
000050  e0840104          ADD      r0,r4,r4,LSL #2       ;976
000054  e0860100          ADD      r0,r6,r0,LSL #2       ;976
000058  ebfffffe          BL       vListInitialise
00005c  e2844001          ADD      r4,r4,#1              ;976
000060  e3540004          CMP      r4,#4                 ;976
000064  3afffff9          BCC      |L4.80|
000068  e59f00ac          LDR      r0,|L4.284|
00006c  ebfffffe          BL       vListInitialise
000070  e59f00a8          LDR      r0,|L4.288|
000074  ebfffffe          BL       vListInitialise
000078  e59f00a4          LDR      r0,|L4.292|
00007c  ebfffffe          BL       vListInitialise
000080  e59f00a0          LDR      r0,|L4.296|
000084  ebfffffe          BL       vListInitialise
000088  e59f009c          LDR      r0,|L4.300|
00008c  ebfffffe          BL       vListInitialise
000090  e59f0084          LDR      r0,|L4.284|
000094  e5870034          STR      r0,[r7,#0x34]         ;976  ; pxDelayedTaskList
000098  e2800014          ADD      r0,r0,#0x14           ;976
00009c  e5870038          STR      r0,[r7,#0x38]         ;976  ; pxOverflowDelayedTaskList
0000a0  ea000004          B        |L4.184|
                  |L4.164|
;;;994    			{
;;;995    				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
0000a4  e5970000          LDR      r0,[r7,#0]  ; pxCurrentTCB
0000a8  e595102c          LDR      r1,[r5,#0x2c]
0000ac  e590002c          LDR      r0,[r0,#0x2c]
0000b0  e1500001          CMP      r0,r1
;;;996    				{
;;;997    					pxCurrentTCB = pxNewTCB;
0000b4  95875000          STRLS    r5,[r7,#0]  ; pxCurrentTCB
                  |L4.184|
;;;998    				}
;;;999    				else
;;;1000   				{
;;;1001   					mtCOVERAGE_TEST_MARKER();
;;;1002   				}
;;;1003   			}
;;;1004   			else
;;;1005   			{
;;;1006   				mtCOVERAGE_TEST_MARKER();
;;;1007   			}
;;;1008   		}
;;;1009   
;;;1010   		uxTaskNumber++;
0000b8  e5970024          LDR      r0,[r7,#0x24]  ; uxTaskNumber
0000bc  e2800001          ADD      r0,r0,#1
;;;1011   
;;;1012   		#if ( configUSE_TRACE_FACILITY == 1 )
;;;1013   		{
;;;1014   			/* Add a counter into the TCB for tracing only. */
;;;1015   			pxNewTCB->uxTCBNumber = uxTaskNumber;
0000c0  e5870024          STR      r0,[r7,#0x24]  ; uxTaskNumber
;;;1016   		}
;;;1017   		#endif /* configUSE_TRACE_FACILITY */
;;;1018   		traceTASK_CREATE( pxNewTCB );
;;;1019   
;;;1020   		prvAddTaskToReadyList( pxNewTCB );
0000c4  e5850044          STR      r0,[r5,#0x44]
0000c8  e595002c          LDR      r0,[r5,#0x2c]
0000cc  e5971010          LDR      r1,[r7,#0x10]  ; uxTopReadyPriority
0000d0  e1500001          CMP      r0,r1
0000d4  85870010          STRHI    r0,[r7,#0x10]  ; uxTopReadyPriority
0000d8  e0800100          ADD      r0,r0,r0,LSL #2
0000dc  e0860100          ADD      r0,r6,r0,LSL #2
0000e0  e2851004          ADD      r1,r5,#4
0000e4  ebfffffe          BL       vListInsertEnd
;;;1021   
;;;1022   		portSETUP_TCB( pxNewTCB );
;;;1023   	}
;;;1024   	taskEXIT_CRITICAL();
0000e8  ebfffffe          BL       vPortExitCritical
;;;1025   
;;;1026   	if( xSchedulerRunning != pdFALSE )
0000ec  e5970014          LDR      r0,[r7,#0x14]  ; xSchedulerRunning
0000f0  e3500000          CMP      r0,#0
;;;1027   	{
;;;1028   		/* If the created task is of a higher priority than the current task
;;;1029   		then it should run now. */
;;;1030   		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
;;;1031   		{
;;;1032   			taskYIELD_IF_USING_PREEMPTION();
;;;1033   		}
;;;1034   		else
;;;1035   		{
;;;1036   			mtCOVERAGE_TEST_MARKER();
;;;1037   		}
;;;1038   	}
;;;1039   	else
;;;1040   	{
;;;1041   		mtCOVERAGE_TEST_MARKER();
;;;1042   	}
;;;1043   }
0000f4  08bd81f0          POPEQ    {r4-r8,pc}
0000f8  e5970000          LDR      r0,[r7,#0]            ;1030  ; pxCurrentTCB
0000fc  e595102c          LDR      r1,[r5,#0x2c]         ;1030
000100  e590002c          LDR      r0,[r0,#0x2c]         ;1030
000104  e1500001          CMP      r0,r1                 ;1030
000108  28bd81f0          POPCS    {r4-r8,pc}
00010c  e8bd41f0          POP      {r4-r8,lr}            ;1032
000110  eafffffe          B        vPortYield
;;;1044   /*-----------------------------------------------------------*/
                          ENDP

                  |L4.276|
                          DCD      ||.data||
                  |L4.280|
                          DCD      ||.bss||
                  |L4.284|
                          DCD      ||.bss||+0x50
                  |L4.288|
                          DCD      ||.bss||+0x64
                  |L4.292|
                          DCD      ||.bss||+0x78
                  |L4.296|
                          DCD      ||.bss||+0x8c
                  |L4.300|
                          DCD      ||.bss||+0xa0

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=2

                  prvDeleteTCB PROC
;;;3580   
;;;3581   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  e92d4010          PUSH     {r4,lr}
;;;3582   	{
000004  e1a04000          MOV      r4,r0
;;;3583   		/* This call is required specifically for the TriCore port.  It must be
;;;3584   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3585   		want to allocate and clean RAM statically. */
;;;3586   		portCLEAN_UP_TCB( pxTCB );
;;;3587   
;;;3588   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3589   		to the task to free any memory allocated at the application level. */
;;;3590   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3591   		{
;;;3592   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3593   		}
;;;3594   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3595   
;;;3596   		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
;;;3597   		{
;;;3598   			/* The task can only have been allocated dynamically - free both
;;;3599   			the stack and TCB. */
;;;3600   			vPortFree( pxTCB->pxStack );
000008  e5900030          LDR      r0,[r0,#0x30]
00000c  ebfffffe          BL       vPortFree
;;;3601   			vPortFree( pxTCB );
000010  e1a00004          MOV      r0,r4
000014  e8bd4010          POP      {r4,lr}
000018  eafffffe          B        vPortFree
;;;3602   		}
;;;3603   		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
;;;3604   		{
;;;3605   			/* The task could have been allocated statically or dynamically, so
;;;3606   			check what was statically allocated before trying to free the
;;;3607   			memory. */
;;;3608   			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
;;;3609   			{
;;;3610   				/* Both the stack and TCB were allocated dynamically, so both
;;;3611   				must be freed. */
;;;3612   				vPortFree( pxTCB->pxStack );
;;;3613   				vPortFree( pxTCB );
;;;3614   			}
;;;3615   			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
;;;3616   			{
;;;3617   				/* Only the stack was statically allocated, so the TCB is the
;;;3618   				only memory that must be freed. */
;;;3619   				vPortFree( pxTCB );
;;;3620   			}
;;;3621   			else
;;;3622   			{
;;;3623   				/* Neither the stack nor the TCB were allocated dynamically, so
;;;3624   				nothing needs to be freed. */
;;;3625   				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
;;;3626   				mtCOVERAGE_TEST_MARKER();
;;;3627   			}
;;;3628   		}
;;;3629   		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;3630   	}
;;;3631   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;3130    */
;;;3131   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  e59f607c          LDR      r6,|L6.132|
000004  e59f507c          LDR      r5,|L6.136|
;;;3132   {
;;;3133   	/* Stop warnings. */
;;;3134   	( void ) pvParameters;
;;;3135   
;;;3136   	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
;;;3137   	SCHEDULER IS STARTED. **/
;;;3138   
;;;3139   	for( ;; )
;;;3140   	{
;;;3141   		/* See if any tasks have deleted themselves - if so then the idle task
;;;3142   		is responsible for freeing the deleted task's TCB and stack. */
;;;3143   		prvCheckTasksWaitingTermination();
;;;3144   
;;;3145   		#if ( configUSE_PREEMPTION == 0 )
;;;3146   		{
;;;3147   			/* If we are not using preemption we keep forcing a task switch to
;;;3148   			see if any other task has become available.  If we are using
;;;3149   			preemption we don't need to do this as any task becoming available
;;;3150   			will automatically get the processor anyway. */
;;;3151   			taskYIELD();
;;;3152   		}
;;;3153   		#endif /* configUSE_PREEMPTION */
;;;3154   
;;;3155   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;3156   		{
;;;3157   			/* When using preemption tasks of equal priority will be
;;;3158   			timesliced.  If a task that is sharing the idle priority is ready
;;;3159   			to run then the idle task should yield before the end of the
;;;3160   			timeslice.
;;;3161   
;;;3162   			A critical region is not required here as we are just reading from
;;;3163   			the list, and an occasional incorrect value will not matter.  If
;;;3164   			the ready list at the idle priority contains more than one task
;;;3165   			then a task other than the idle task is ready to execute. */
;;;3166   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000008  e246708c          SUB      r7,r6,#0x8c
00000c  ea000015          B        |L6.104|
                  |L6.16|
000010  ebfffffe          BL       vTaskSuspendAll
000014  e5960000          LDR      r0,[r6,#0]  ; xTasksWaitingTermination
000018  e3500000          CMP      r0,#0
00001c  03a04001          MOVEQ    r4,#1
000020  13a04000          MOVNE    r4,#0
000024  ebfffffe          BL       xTaskResumeAll
000028  e3540000          CMP      r4,#0
00002c  1a00000d          BNE      |L6.104|
000030  ebfffffe          BL       vPortEnterCritical
000034  e596000c          LDR      r0,[r6,#0xc]  ; xTasksWaitingTermination
000038  e590400c          LDR      r4,[r0,#0xc]
00003c  e2840004          ADD      r0,r4,#4
000040  ebfffffe          BL       uxListRemove
000044  e5950008          LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000048  e2400001          SUB      r0,r0,#1
00004c  e5850008          STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000050  e5950004          LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000054  e2400001          SUB      r0,r0,#1
000058  e5850004          STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
00005c  ebfffffe          BL       vPortExitCritical
000060  e1a00004          MOV      r0,r4
000064  ebfffffe          BL       prvDeleteTCB
                  |L6.104|
000068  e5950004          LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
00006c  e3500000          CMP      r0,#0
000070  1affffe6          BNE      |L6.16|
000074  e5970000          LDR      r0,[r7,#0]  ; pxReadyTasksLists
000078  e3500001          CMP      r0,#1
;;;3167   			{
;;;3168   				taskYIELD();
00007c  8bfffffe          BLHI     vPortYield
000080  eafffff8          B        |L6.104|
;;;3169   			}
;;;3170   			else
;;;3171   			{
;;;3172   				mtCOVERAGE_TEST_MARKER();
;;;3173   			}
;;;3174   		}
;;;3175   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;3176   
;;;3177   		#if ( configUSE_IDLE_HOOK == 1 )
;;;3178   		{
;;;3179   			extern void vApplicationIdleHook( void );
;;;3180   
;;;3181   			/* Call the user defined function from within the idle task.  This
;;;3182   			allows the application designer to add background functionality
;;;3183   			without the overhead of a separate task.
;;;3184   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;3185   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;3186   			vApplicationIdleHook();
;;;3187   		}
;;;3188   		#endif /* configUSE_IDLE_HOOK */
;;;3189   
;;;3190   		/* This conditional compilation should use inequality to 0, not equality
;;;3191   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;3192   		user defined low power mode	implementations require
;;;3193   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;3194   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;3195   		{
;;;3196   		TickType_t xExpectedIdleTime;
;;;3197   
;;;3198   			/* It is not desirable to suspend then resume the scheduler on
;;;3199   			each iteration of the idle task.  Therefore, a preliminary
;;;3200   			test of the expected idle time is performed without the
;;;3201   			scheduler suspended.  The result here is not necessarily
;;;3202   			valid. */
;;;3203   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3204   
;;;3205   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3206   			{
;;;3207   				vTaskSuspendAll();
;;;3208   				{
;;;3209   					/* Now the scheduler is suspended, the expected idle
;;;3210   					time can be sampled again, and this time its value can
;;;3211   					be used. */
;;;3212   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;3213   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;3214   
;;;3215   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;3216   					{
;;;3217   						traceLOW_POWER_IDLE_BEGIN();
;;;3218   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;3219   						traceLOW_POWER_IDLE_END();
;;;3220   					}
;;;3221   					else
;;;3222   					{
;;;3223   						mtCOVERAGE_TEST_MARKER();
;;;3224   					}
;;;3225   				}
;;;3226   				( void ) xTaskResumeAll();
;;;3227   			}
;;;3228   			else
;;;3229   			{
;;;3230   				mtCOVERAGE_TEST_MARKER();
;;;3231   			}
;;;3232   		}
;;;3233   		#endif /* configUSE_TICKLESS_IDLE */
;;;3234   	}
;;;3235   }
;;;3236   /*-----------------------------------------------------------*/
                          ENDP

                  |L6.132|
                          DCD      ||.bss||+0x8c
                  |L6.136|
                          DCD      ||.data||

                          AREA ||i.prvInitialiseNewTask||, CODE, READONLY, ALIGN=2

                  prvInitialiseNewTask PROC
;;;766    
;;;767    static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;768    									const char * const pcName,
;;;769    									const uint32_t ulStackDepth,
;;;770    									void * const pvParameters,
;;;771    									UBaseType_t uxPriority,
;;;772    									TaskHandle_t * const pxCreatedTask,
;;;773    									TCB_t *pxNewTCB,
;;;774    									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;775    {
;;;776    StackType_t *pxTopOfStack;
;;;777    UBaseType_t x;
;;;778    
;;;779    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;780    		/* Should the task be created in privileged mode? */
;;;781    		BaseType_t xRunPrivileged;
;;;782    		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;783    		{
;;;784    			xRunPrivileged = pdTRUE;
;;;785    		}
;;;786    		else
;;;787    		{
;;;788    			xRunPrivileged = pdFALSE;
;;;789    		}
;;;790    		uxPriority &= ~portPRIVILEGE_BIT;
;;;791    	#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;792    
;;;793    	/* Avoid dependency on memset() if it is not required. */
;;;794    	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
;;;795    	{
;;;796    		/* Fill the stack with a known value to assist debugging. */
;;;797    		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
000004  e59d4028          LDR      r4,[sp,#0x28]
000008  e1a06001          MOV      r6,r1                 ;775
00000c  e1a08002          MOV      r8,r2                 ;775
000010  e1a0a000          MOV      r10,r0                ;775
000014  e1a01102          LSL      r1,r2,#2
000018  e59d5020          LDR      r5,[sp,#0x20]
00001c  e59d7024          LDR      r7,[sp,#0x24]
000020  e5940030          LDR      r0,[r4,#0x30]
000024  e1a09003          MOV      r9,r3                 ;775
000028  e3a020a5          MOV      r2,#0xa5
00002c  ebfffffe          BL       __aeabi_memset
;;;798    	}
;;;799    	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
;;;800    
;;;801    	/* Calculate the top of stack address.  This depends on whether the stack
;;;802    	grows from high memory to low (as per the 80x86) or vice versa.
;;;803    	portSTACK_GROWTH is used to make the result positive or negative as required
;;;804    	by the port. */
;;;805    	#if( portSTACK_GROWTH < 0 )
;;;806    	{
;;;807    		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
000030  e5940030          LDR      r0,[r4,#0x30]
000034  e0800108          ADD      r0,r0,r8,LSL #2
000038  e2400004          SUB      r0,r0,#4
;;;808    		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
00003c  e3c08007          BIC      r8,r0,#7
;;;809    
;;;810    		/* Check the alignment of the calculated top of stack is correct. */
;;;811    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;812    	}
;;;813    	#else /* portSTACK_GROWTH */
;;;814    	{
;;;815    		pxTopOfStack = pxNewTCB->pxStack;
;;;816    
;;;817    		/* Check the alignment of the stack buffer is correct. */
;;;818    		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;819    
;;;820    		/* The other extreme of the stack space is required if stack checking is
;;;821    		performed. */
;;;822    		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
;;;823    	}
;;;824    	#endif /* portSTACK_GROWTH */
;;;825    
;;;826    	/* Store the task name in the TCB. */
;;;827    	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000040  e3a00000          MOV      r0,#0
                  |L7.68|
;;;828    	{
;;;829    		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
000044  e7d61000          LDRB     r1,[r6,r0]
000048  e0842000          ADD      r2,r4,r0
00004c  e5c21034          STRB     r1,[r2,#0x34]
;;;830    
;;;831    		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;832    		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;833    		string is not accessible (extremely unlikely). */
;;;834    		if( pcName[ x ] == 0x00 )
000050  e7d61000          LDRB     r1,[r6,r0]
000054  e3510000          CMP      r1,#0
000058  12800001          ADDNE    r0,r0,#1
00005c  13500010          CMPNE    r0,#0x10              ;827
000060  3afffff7          BCC      |L7.68|
;;;835    		{
;;;836    			break;
;;;837    		}
;;;838    		else
;;;839    		{
;;;840    			mtCOVERAGE_TEST_MARKER();
;;;841    		}
;;;842    	}
;;;843    
;;;844    	/* Ensure the name string is terminated in the case that the string length
;;;845    	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;846    	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
;;;847    
;;;848    	/* This is used as an array index so must ensure it's not too large.  First
;;;849    	remove the privilege bit if one is present. */
;;;850    	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000064  e3550004          CMP      r5,#4
000068  e3a06000          MOV      r6,#0                 ;846
;;;851    	{
;;;852    		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
00006c  23a05003          MOVCS    r5,#3
000070  e5c46043          STRB     r6,[r4,#0x43]         ;846
;;;853    	}
;;;854    	else
;;;855    	{
;;;856    		mtCOVERAGE_TEST_MARKER();
;;;857    	}
;;;858    
;;;859    	pxNewTCB->uxPriority = uxPriority;
;;;860    	#if ( configUSE_MUTEXES == 1 )
;;;861    	{
;;;862    		pxNewTCB->uxBasePriority = uxPriority;
000074  e584502c          STR      r5,[r4,#0x2c]
;;;863    		pxNewTCB->uxMutexesHeld = 0;
000078  e584504c          STR      r5,[r4,#0x4c]
;;;864    	}
;;;865    	#endif /* configUSE_MUTEXES */
;;;866    
;;;867    	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
00007c  e2840004          ADD      r0,r4,#4
000080  e5846050          STR      r6,[r4,#0x50]         ;863
000084  ebfffffe          BL       vListInitialiseItem
;;;868    	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
000088  e2840018          ADD      r0,r4,#0x18
00008c  ebfffffe          BL       vListInitialiseItem
;;;869    
;;;870    	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
;;;871    	back to	the containing TCB from a generic item in a list. */
;;;872    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
;;;873    
;;;874    	/* Event lists are always in priority order. */
;;;875    	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000090  e2650004          RSB      r0,r5,#4
000094  e5844010          STR      r4,[r4,#0x10]         ;872
;;;876    	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
000098  e5840018          STR      r0,[r4,#0x18]
00009c  e5844024          STR      r4,[r4,#0x24]
;;;877    
;;;878    	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;879    	{
;;;880    		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;881    	}
;;;882    	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;883    
;;;884    	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;885    	{
;;;886    		pxNewTCB->pxTaskTag = NULL;
;;;887    	}
;;;888    	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;889    
;;;890    	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;891    	{
;;;892    		pxNewTCB->ulRunTimeCounter = 0UL;
;;;893    	}
;;;894    	#endif /* configGENERATE_RUN_TIME_STATS */
;;;895    
;;;896    	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;897    	{
;;;898    		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
;;;899    	}
;;;900    	#else
;;;901    	{
;;;902    		/* Avoid compiler warning about unreferenced parameter. */
;;;903    		( void ) xRegions;
;;;904    	}
;;;905    	#endif
;;;906    
;;;907    	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;908    	{
;;;909    		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;910    		{
;;;911    			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;912    		}
;;;913    	}
;;;914    	#endif
;;;915    
;;;916    	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;917    	{
;;;918    		pxNewTCB->ulNotifiedValue = 0;
0000a0  e5846054          STR      r6,[r4,#0x54]
;;;919    		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
0000a4  e5c46058          STRB     r6,[r4,#0x58]
;;;920    	}
;;;921    	#endif
;;;922    
;;;923    	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;924    	{
;;;925    		/* Initialise this task's Newlib reent structure. */
;;;926    		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
;;;927    	}
;;;928    	#endif
;;;929    
;;;930    	#if( INCLUDE_xTaskAbortDelay == 1 )
;;;931    	{
;;;932    		pxNewTCB->ucDelayAborted = pdFALSE;
;;;933    	}
;;;934    	#endif
;;;935    
;;;936    	/* Initialize the TCB stack to look as if the task was already running,
;;;937    	but had been interrupted by the scheduler.  The return address is set
;;;938    	to the start of the task function. Once the stack has been initialised
;;;939    	the	top of stack variable is updated. */
;;;940    	#if( portUSING_MPU_WRAPPERS == 1 )
;;;941    	{
;;;942    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;943    	}
;;;944    	#else /* portUSING_MPU_WRAPPERS */
;;;945    	{
;;;946    		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
0000a8  e1a02009          MOV      r2,r9
0000ac  e1a0100a          MOV      r1,r10
0000b0  e1a00008          MOV      r0,r8
0000b4  ebfffffe          BL       pxPortInitialiseStack
;;;947    	}
;;;948    	#endif /* portUSING_MPU_WRAPPERS */
;;;949    
;;;950    	if( ( void * ) pxCreatedTask != NULL )
0000b8  e3570000          CMP      r7,#0
0000bc  e5840000          STR      r0,[r4,#0]
;;;951    	{
;;;952    		/* Pass the handle out in an anonymous way.  The handle can be used to
;;;953    		change the created task's priority, delete the created task, etc.*/
;;;954    		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
0000c0  15874000          STRNE    r4,[r7,#0]
;;;955    	}
;;;956    	else
;;;957    	{
;;;958    		mtCOVERAGE_TEST_MARKER();
;;;959    	}
;;;960    }
0000c4  e8bd87f0          POP      {r4-r10,pc}
;;;961    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvListTasksWithinSingleList||, CODE, READONLY, ALIGN=2

                  prvListTasksWithinSingleList PROC
;;;3499   
;;;3500   	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3501   	{
000004  e1a08000          MOV      r8,r0
;;;3502   	volatile TCB_t *pxNextTCB, *pxFirstTCB;
;;;3503   	UBaseType_t uxTask = 0;
;;;3504   
;;;3505   		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
000008  e5910000          LDR      r0,[r1,#0]
00000c  e1a09002          MOV      r9,r2                 ;3501
000010  e3500000          CMP      r0,#0
000014  e1a04001          MOV      r4,r1                 ;3501
000018  e3a05000          MOV      r5,#0                 ;3503
00001c  0a000019          BEQ      |L8.136|
;;;3506   		{
;;;3507   			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
000020  e5940004          LDR      r0,[r4,#4]
000024  e2846008          ADD      r6,r4,#8
000028  e5900004          LDR      r0,[r0,#4]
00002c  e1500006          CMP      r0,r6
000030  e5840004          STR      r0,[r4,#4]
000034  05901004          LDREQ    r1,[r0,#4]
000038  05841004          STREQ    r1,[r4,#4]
00003c  e5940004          LDR      r0,[r4,#4]
000040  e590700c          LDR      r7,[r0,#0xc]
                  |L8.68|
;;;3508   
;;;3509   			/* Populate an TaskStatus_t structure within the
;;;3510   			pxTaskStatusArray array for each task that is referenced from
;;;3511   			pxList.  See the definition of TaskStatus_t in task.h for the
;;;3512   			meaning of each TaskStatus_t structure member. */
;;;3513   			do
;;;3514   			{
;;;3515   				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
000044  e5940004          LDR      r0,[r4,#4]
;;;3516   				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
000048  e1a03009          MOV      r3,r9
00004c  e590c004          LDR      r12,[r0,#4]           ;3515
000050  e3a02001          MOV      r2,#1
000054  e15c0006          CMP      r12,r6                ;3515
000058  e584c004          STR      r12,[r4,#4]           ;3515
00005c  059c1004          LDREQ    r1,[r12,#4]           ;3515
000060  05841004          STREQ    r1,[r4,#4]            ;3515
000064  e5940004          LDR      r0,[r4,#4]            ;3515
000068  e590a00c          LDR      r10,[r0,#0xc]         ;3515
00006c  e0850185          ADD      r0,r5,r5,LSL #3
000070  e0881100          ADD      r1,r8,r0,LSL #2
000074  e1a0000a          MOV      r0,r10
000078  ebfffffe          BL       vTaskGetInfo
;;;3517   				uxTask++;
;;;3518   			} while( pxNextTCB != pxFirstTCB );
00007c  e15a0007          CMP      r10,r7
000080  e2855001          ADD      r5,r5,#1
000084  1affffee          BNE      |L8.68|
                  |L8.136|
;;;3519   		}
;;;3520   		else
;;;3521   		{
;;;3522   			mtCOVERAGE_TEST_MARKER();
;;;3523   		}
;;;3524   
;;;3525   		return uxTask;
000088  e1a00005          MOV      r0,r5
;;;3526   	}
00008c  e8bd87f0          POP      {r4-r10,pc}
;;;3527   
                          ENDP


                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3634   
;;;3635   static void prvResetNextTaskUnblockTime( void )
000000  e59f0024          LDR      r0,|L9.44|
;;;3636   {
;;;3637   TCB_t *pxTCB;
;;;3638   
;;;3639   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000004  e5901034          LDR      r1,[r0,#0x34]  ; pxDelayedTaskList
000008  e5911000          LDR      r1,[r1,#0]
00000c  e3510000          CMP      r1,#0
;;;3640   	{
;;;3641   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3642   		the maximum possible value so it is	extremely unlikely that the
;;;3643   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3644   		there is an item in the delayed list. */
;;;3645   		xNextTaskUnblockTime = portMAX_DELAY;
;;;3646   	}
;;;3647   	else
;;;3648   	{
;;;3649   		/* The new current delayed list is not empty, get the value of
;;;3650   		the item at the head of the delayed list.  This is the time at
;;;3651   		which the task at the head of the delayed list should be removed
;;;3652   		from the Blocked state. */
;;;3653   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
000010  15901034          LDRNE    r1,[r0,#0x34]  ; pxDelayedTaskList
000014  03e01000          MVNEQ    r1,#0                 ;3645
000018  1591100c          LDRNE    r1,[r1,#0xc]
00001c  1591100c          LDRNE    r1,[r1,#0xc]
;;;3654   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
000020  15911004          LDRNE    r1,[r1,#4]
000024  e5801028          STR      r1,[r0,#0x28]         ;3645  ; xNextTaskUnblockTime
;;;3655   	}
;;;3656   }
000028  e12fff1e          BX       lr
;;;3657   /*-----------------------------------------------------------*/
                          ENDP

                  |L9.44|
                          DCD      ||.data||

                          AREA ||i.prvTaskIsTaskSuspended||, CODE, READONLY, ALIGN=2

                  prvTaskIsTaskSuspended PROC
;;;1655   
;;;1656   	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
000000  e59f302c          LDR      r3,|L10.52|
;;;1657   	{
;;;1658   	BaseType_t xReturn = pdFALSE;
;;;1659   	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
;;;1660   
;;;1661   		/* Accesses xPendingReadyList so must be called from a critical
;;;1662   		section. */
;;;1663   
;;;1664   		/* It does not make sense to check if the calling task is suspended. */
;;;1665   		configASSERT( xTask );
;;;1666   
;;;1667   		/* Is the task being resumed actually in the suspended list? */
;;;1668   		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
000004  e5902014          LDR      r2,[r0,#0x14]
000008  e3a01000          MOV      r1,#0                 ;1658
00000c  e1520003          CMP      r2,r3
000010  1a000005          BNE      |L10.44|
;;;1669   		{
;;;1670   			/* Has the task already been resumed from within an ISR? */
;;;1671   			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
000014  e5900028          LDR      r0,[r0,#0x28]
000018  e2432028          SUB      r2,r3,#0x28
00001c  e1500002          CMP      r0,r2
000020  0a000001          BEQ      |L10.44|
;;;1672   			{
;;;1673   				/* Is it in the suspended list because it is in the	Suspended
;;;1674   				state, or because is is blocked with no timeout? */
;;;1675   				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
000024  e3500000          CMP      r0,#0
;;;1676   				{
;;;1677   					xReturn = pdTRUE;
000028  03a01001          MOVEQ    r1,#1
                  |L10.44|
;;;1678   				}
;;;1679   				else
;;;1680   				{
;;;1681   					mtCOVERAGE_TEST_MARKER();
;;;1682   				}
;;;1683   			}
;;;1684   			else
;;;1685   			{
;;;1686   				mtCOVERAGE_TEST_MARKER();
;;;1687   			}
;;;1688   		}
;;;1689   		else
;;;1690   		{
;;;1691   			mtCOVERAGE_TEST_MARKER();
;;;1692   		}
;;;1693   
;;;1694   		return xReturn;
00002c  e1a00001          MOV      r0,r1
;;;1695   	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
000030  e12fff1e          BX       lr
;;;1696   
                          ENDP

                  |L10.52|
                          DCD      ||.bss||+0xa0

                          AREA ||i.pvTaskIncrementMutexHeldCount||, CODE, READONLY, ALIGN=2

                  pvTaskIncrementMutexHeldCount PROC
;;;4177   
;;;4178   	void *pvTaskIncrementMutexHeldCount( void )
000000  e59f1020          LDR      r1,|L11.40|
;;;4179   	{
;;;4180   		/* If xSemaphoreCreateMutex() is called before any tasks have been created
;;;4181   		then pxCurrentTCB will be NULL. */
;;;4182   		if( pxCurrentTCB != NULL )
000004  e5910000          LDR      r0,[r1,#0]  ; pxCurrentTCB
000008  e3500000          CMP      r0,#0
00000c  0a000003          BEQ      |L11.32|
;;;4183   		{
;;;4184   			( pxCurrentTCB->uxMutexesHeld )++;
000010  e5910000          LDR      r0,[r1,#0]  ; pxCurrentTCB
000014  e5902050          LDR      r2,[r0,#0x50]
000018  e2822001          ADD      r2,r2,#1
00001c  e5802050          STR      r2,[r0,#0x50]
                  |L11.32|
;;;4185   		}
;;;4186   
;;;4187   		return pxCurrentTCB;
000020  e5910000          LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;4188   	}
000024  e12fff1e          BX       lr
;;;4189   
                          ENDP

                  |L11.40|
                          DCD      ||.data||

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;4194   
;;;4195   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;4196   	{
000004  e1a04001          MOV      r4,r1
000008  e1a06000          MOV      r6,r0
;;;4197   	uint32_t ulReturn;
;;;4198   
;;;4199   		taskENTER_CRITICAL();
00000c  ebfffffe          BL       vPortEnterCritical
;;;4200   		{
;;;4201   			/* Only block if the notification count is not already non-zero. */
;;;4202   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
000010  e59f5078          LDR      r5,|L12.144|
000014  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
000018  e5900054          LDR      r0,[r0,#0x54]
00001c  e3500000          CMP      r0,#0
000020  1a000008          BNE      |L12.72|
;;;4203   			{
;;;4204   				/* Mark this task as waiting for a notification. */
;;;4205   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
000024  e5952000          LDR      r2,[r5,#0]  ; pxCurrentTCB
000028  e3a00001          MOV      r0,#1
00002c  e5c20058          STRB     r0,[r2,#0x58]
;;;4206   
;;;4207   				if( xTicksToWait > ( TickType_t ) 0 )
000030  e3540000          CMP      r4,#0
000034  0a000003          BEQ      |L12.72|
;;;4208   				{
;;;4209   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000038  e3a01001          MOV      r1,#1
00003c  e1a00004          MOV      r0,r4
000040  ebfffffe          BL       prvAddCurrentTaskToDelayedList
;;;4210   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;4211   
;;;4212   					/* All ports are written to allow a yield in a critical
;;;4213   					section (some will yield immediately, others wait until the
;;;4214   					critical section exits) - but it is not something that
;;;4215   					application code should ever do. */
;;;4216   					portYIELD_WITHIN_API();
000044  ebfffffe          BL       vPortYield
                  |L12.72|
;;;4217   				}
;;;4218   				else
;;;4219   				{
;;;4220   					mtCOVERAGE_TEST_MARKER();
;;;4221   				}
;;;4222   			}
;;;4223   			else
;;;4224   			{
;;;4225   				mtCOVERAGE_TEST_MARKER();
;;;4226   			}
;;;4227   		}
;;;4228   		taskEXIT_CRITICAL();
000048  ebfffffe          BL       vPortExitCritical
;;;4229   
;;;4230   		taskENTER_CRITICAL();
00004c  ebfffffe          BL       vPortEnterCritical
;;;4231   		{
;;;4232   			traceTASK_NOTIFY_TAKE();
;;;4233   			ulReturn = pxCurrentTCB->ulNotifiedValue;
000050  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
000054  e5904054          LDR      r4,[r0,#0x54]
000058  e3a00000          MOV      r0,#0
;;;4234   
;;;4235   			if( ulReturn != 0UL )
00005c  e3540000          CMP      r4,#0
000060  0a000005          BEQ      |L12.124|
;;;4236   			{
;;;4237   				if( xClearCountOnExit != pdFALSE )
000064  e3560000          CMP      r6,#0
;;;4238   				{
;;;4239   					pxCurrentTCB->ulNotifiedValue = 0UL;
;;;4240   				}
;;;4241   				else
;;;4242   				{
;;;4243   					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
000068  05952000          LDREQ    r2,[r5,#0]  ; pxCurrentTCB
00006c  02441001          SUBEQ    r1,r4,#1
000070  05821054          STREQ    r1,[r2,#0x54]
000074  15951000          LDRNE    r1,[r5,#0]            ;4239  ; pxCurrentTCB
000078  15810054          STRNE    r0,[r1,#0x54]         ;4239
                  |L12.124|
;;;4244   				}
;;;4245   			}
;;;4246   			else
;;;4247   			{
;;;4248   				mtCOVERAGE_TEST_MARKER();
;;;4249   			}
;;;4250   
;;;4251   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
00007c  e5951000          LDR      r1,[r5,#0]  ; pxCurrentTCB
000080  e5c10058          STRB     r0,[r1,#0x58]
;;;4252   		}
;;;4253   		taskEXIT_CRITICAL();
000084  ebfffffe          BL       vPortExitCritical
;;;4254   
;;;4255   		return ulReturn;
000088  e1a00004          MOV      r0,r4
;;;4256   	}
00008c  e8bd8070          POP      {r4-r6,pc}
;;;4257   
                          ENDP

                  |L12.144|
                          DCD      ||.data||

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;2172   
;;;2173   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  e59f0004          LDR      r0,|L13.12|
;;;2174   {
;;;2175   	/* A critical section is not required because the variables are of type
;;;2176   	BaseType_t. */
;;;2177   	return uxCurrentNumberOfTasks;
000004  e5900008          LDR      r0,[r0,#8]  ; uxCurrentNumberOfTasks
;;;2178   }
000008  e12fff1e          BX       lr
;;;2179   /*-----------------------------------------------------------*/
                          ENDP

                  |L13.12|
                          DCD      ||.data||

                          AREA ||i.uxTaskGetSystemState||, CODE, READONLY, ALIGN=2

                  uxTaskGetSystemState PROC
;;;2320   
;;;2321   	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2322   	{
000004  e1a07002          MOV      r7,r2
000008  e1a02001          MOV      r2,r1
00000c  e1a06000          MOV      r6,r0
;;;2323   	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
000010  e3a04000          MOV      r4,#0
000014  e3a05004          MOV      r5,#4
;;;2324   
;;;2325   		vTaskSuspendAll();
000018  ebfffffe          BL       vTaskSuspendAll
;;;2326   		{
;;;2327   			/* Is there a space in the array for each task in the system? */
;;;2328   			if( uxArraySize >= uxCurrentNumberOfTasks )
00001c  e59f80ac          LDR      r8,|L14.208|
000020  e5980008          LDR      r0,[r8,#8]  ; uxCurrentNumberOfTasks
000024  e1520000          CMP      r2,r0
;;;2329   			{
;;;2330   				/* Fill in an TaskStatus_t structure with information on each
;;;2331   				task in the Ready state. */
;;;2332   				do
;;;2333   				{
;;;2334   					uxQueue--;
;;;2335   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
000028  259f90a4          LDRCS    r9,|L14.212|
00002c  3a000024          BCC      |L14.196|
                  |L14.48|
000030  e2455001          SUB      r5,r5,#1              ;2332
000034  e0850105          ADD      r0,r5,r5,LSL #2
000038  e0891100          ADD      r1,r9,r0,LSL #2
00003c  e0840184          ADD      r0,r4,r4,LSL #3
000040  e0860100          ADD      r0,r6,r0,LSL #2
000044  e3a02001          MOV      r2,#1
000048  ebfffffe          BL       prvListTasksWithinSingleList
;;;2336   
;;;2337   				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00004c  e3550000          CMP      r5,#0
000050  e0844000          ADD      r4,r4,r0              ;2335
000054  1afffff5          BNE      |L14.48|
;;;2338   
;;;2339   				/* Fill in an TaskStatus_t structure with information on each
;;;2340   				task in the Blocked state. */
;;;2341   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
000058  e0840184          ADD      r0,r4,r4,LSL #3
00005c  e5981034          LDR      r1,[r8,#0x34]  ; pxDelayedTaskList
000060  e0860100          ADD      r0,r6,r0,LSL #2
000064  e3a02002          MOV      r2,#2
000068  ebfffffe          BL       prvListTasksWithinSingleList
00006c  e0844000          ADD      r4,r4,r0
;;;2342   				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
000070  e0840184          ADD      r0,r4,r4,LSL #3
000074  e5981038          LDR      r1,[r8,#0x38]  ; pxOverflowDelayedTaskList
000078  e0860100          ADD      r0,r6,r0,LSL #2
00007c  e3a02002          MOV      r2,#2
000080  ebfffffe          BL       prvListTasksWithinSingleList
000084  e0844000          ADD      r4,r4,r0
;;;2343   
;;;2344   				#if( INCLUDE_vTaskDelete == 1 )
;;;2345   				{
;;;2346   					/* Fill in an TaskStatus_t structure with information on
;;;2347   					each task that has been deleted but not yet cleaned up. */
;;;2348   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
000088  e0840184          ADD      r0,r4,r4,LSL #3
00008c  e59f1044          LDR      r1,|L14.216|
000090  e0860100          ADD      r0,r6,r0,LSL #2
000094  e3a02004          MOV      r2,#4
000098  ebfffffe          BL       prvListTasksWithinSingleList
00009c  e0844000          ADD      r4,r4,r0
;;;2349   				}
;;;2350   				#endif
;;;2351   
;;;2352   				#if ( INCLUDE_vTaskSuspend == 1 )
;;;2353   				{
;;;2354   					/* Fill in an TaskStatus_t structure with information on
;;;2355   					each task in the Suspended state. */
;;;2356   					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
0000a0  e0840184          ADD      r0,r4,r4,LSL #3
0000a4  e59f1030          LDR      r1,|L14.220|
0000a8  e0860100          ADD      r0,r6,r0,LSL #2
0000ac  e3a02003          MOV      r2,#3
0000b0  ebfffffe          BL       prvListTasksWithinSingleList
;;;2357   				}
;;;2358   				#endif
;;;2359   
;;;2360   				#if ( configGENERATE_RUN_TIME_STATS == 1)
;;;2361   				{
;;;2362   					if( pulTotalRunTime != NULL )
;;;2363   					{
;;;2364   						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2365   							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
;;;2366   						#else
;;;2367   							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2368   						#endif
;;;2369   					}
;;;2370   				}
;;;2371   				#else
;;;2372   				{
;;;2373   					if( pulTotalRunTime != NULL )
0000b4  e3570000          CMP      r7,#0
0000b8  e0844000          ADD      r4,r4,r0              ;2356
;;;2374   					{
;;;2375   						*pulTotalRunTime = 0;
0000bc  13a00000          MOVNE    r0,#0
0000c0  15870000          STRNE    r0,[r7,#0]
                  |L14.196|
;;;2376   					}
;;;2377   				}
;;;2378   				#endif
;;;2379   			}
;;;2380   			else
;;;2381   			{
;;;2382   				mtCOVERAGE_TEST_MARKER();
;;;2383   			}
;;;2384   		}
;;;2385   		( void ) xTaskResumeAll();
0000c4  ebfffffe          BL       xTaskResumeAll
;;;2386   
;;;2387   		return uxTask;
0000c8  e1a00004          MOV      r0,r4
;;;2388   	}
0000cc  e8bd87f0          POP      {r4-r10,pc}
;;;2389   
                          ENDP

                  |L14.208|
                          DCD      ||.data||
                  |L14.212|
                          DCD      ||.bss||
                  |L14.216|
                          DCD      ||.bss||+0x8c
                  |L14.220|
                          DCD      ||.bss||+0xa0

                          AREA ||i.uxTaskGetTaskNumber||, CODE, READONLY, ALIGN=2

                  uxTaskGetTaskNumber PROC
;;;3083   
;;;3084   	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
000000  e3500000          CMP      r0,#0
;;;3085   	{
;;;3086   	UBaseType_t uxReturn;
;;;3087   	TCB_t *pxTCB;
;;;3088   
;;;3089   		if( xTask != NULL )
;;;3090   		{
;;;3091   			pxTCB = ( TCB_t * ) xTask;
;;;3092   			uxReturn = pxTCB->uxTaskNumber;
000004  15900048          LDRNE    r0,[r0,#0x48]
;;;3093   		}
;;;3094   		else
;;;3095   		{
;;;3096   			uxReturn = 0U;
;;;3097   		}
;;;3098   
;;;3099   		return uxReturn;
;;;3100   	}
000008  e12fff1e          BX       lr
;;;3101   
                          ENDP


                          AREA ||i.uxTaskPriorityGet||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGet PROC
;;;1339   
;;;1340   	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
000000  e92d4010          PUSH     {r4,lr}
;;;1341   	{
000004  e1a04000          MOV      r4,r0
;;;1342   	TCB_t *pxTCB;
;;;1343   	UBaseType_t uxReturn;
;;;1344   
;;;1345   		taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1346   		{
;;;1347   			/* If null is passed in here then it is the priority of the that
;;;1348   			called uxTaskPriorityGet() that is being queried. */
;;;1349   			pxTCB = prvGetTCBFromHandle( xTask );
00000c  e3540000          CMP      r4,#0
000010  059f0010          LDREQ    r0,|L16.40|
000014  05904000          LDREQ    r4,[r0,#0]  ; pxCurrentTCB
;;;1350   			uxReturn = pxTCB->uxPriority;
000018  e594402c          LDR      r4,[r4,#0x2c]
;;;1351   		}
;;;1352   		taskEXIT_CRITICAL();
00001c  ebfffffe          BL       vPortExitCritical
;;;1353   
;;;1354   		return uxReturn;
000020  e1a00004          MOV      r0,r4
;;;1355   	}
000024  e8bd8010          POP      {r4,pc}
;;;1356   
                          ENDP

                  |L16.40|
                          DCD      ||.data||

                          AREA ||i.uxTaskPriorityGetFromISR||, CODE, READONLY, ALIGN=2

                  uxTaskPriorityGetFromISR PROC
;;;1361   
;;;1362   	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
000000  e3500000          CMP      r0,#0
;;;1363   	{
;;;1364   	TCB_t *pxTCB;
;;;1365   	UBaseType_t uxReturn, uxSavedInterruptState;
;;;1366   
;;;1367   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1368   		maximum	system call (or maximum API call) interrupt priority.
;;;1369   		Interrupts that are	above the maximum system call priority are keep
;;;1370   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1371   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1372   		is defined in FreeRTOSConfig.h then
;;;1373   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1374   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1375   		been assigned a priority above the configured maximum system call
;;;1376   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1377   		from interrupts	that have been assigned a priority at or (logically)
;;;1378   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1379   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1380   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1381   		provided on the following link:
;;;1382   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1383   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1384   
;;;1385   		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1386   		{
;;;1387   			/* If null is passed in here then it is the priority of the calling
;;;1388   			task that is being queried. */
;;;1389   			pxTCB = prvGetTCBFromHandle( xTask );
000004  059f0008          LDREQ    r0,|L17.20|
000008  05900000          LDREQ    r0,[r0,#0]  ; pxCurrentTCB
;;;1390   			uxReturn = pxTCB->uxPriority;
00000c  e590002c          LDR      r0,[r0,#0x2c]
;;;1391   		}
;;;1392   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
;;;1393   
;;;1394   		return uxReturn;
;;;1395   	}
000010  e12fff1e          BX       lr
;;;1396   
                          ENDP

                  |L17.20|
                          DCD      ||.data||

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;4161   
;;;4162   TickType_t uxTaskResetEventItemValue( void )
000000  e59f101c          LDR      r1,|L18.36|
;;;4163   {
;;;4164   TickType_t uxReturn;
;;;4165   
;;;4166   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000004  e5910000          LDR      r0,[r1,#0]  ; pxCurrentTCB
;;;4167   
;;;4168   	/* Reset the event list item to its normal value - so it can be used with
;;;4169   	queues and semaphores. */
;;;4170   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000008  e5912000          LDR      r2,[r1,#0]  ; pxCurrentTCB
00000c  e5900018          LDR      r0,[r0,#0x18]         ;4166
000010  e592202c          LDR      r2,[r2,#0x2c]
000014  e5911000          LDR      r1,[r1,#0]  ; pxCurrentTCB
000018  e2622004          RSB      r2,r2,#4
00001c  e5812018          STR      r2,[r1,#0x18]
;;;4171   
;;;4172   	return uxReturn;
;;;4173   }
000020  e12fff1e          BX       lr
;;;4174   /*-----------------------------------------------------------*/
                          ENDP

                  |L18.36|
                          DCD      ||.data||

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;1223   
;;;1224   	void vTaskDelay( const TickType_t xTicksToDelay )
000000  e92d4010          PUSH     {r4,lr}
;;;1225   	{
000004  e1b02000          MOVS     r2,r0
000008  0a000006          BEQ      |L19.40|
;;;1226   	BaseType_t xAlreadyYielded = pdFALSE;
;;;1227   
;;;1228   		/* A delay time of zero just forces a reschedule. */
;;;1229   		if( xTicksToDelay > ( TickType_t ) 0U )
;;;1230   		{
;;;1231   			configASSERT( uxSchedulerSuspended == 0 );
;;;1232   			vTaskSuspendAll();
00000c  ebfffffe          BL       vTaskSuspendAll
;;;1233   			{
;;;1234   				traceTASK_DELAY();
;;;1235   
;;;1236   				/* A task that is removed from the event list while the
;;;1237   				scheduler is suspended will not get placed in the ready
;;;1238   				list or removed from the blocked list until the scheduler
;;;1239   				is resumed.
;;;1240   
;;;1241   				This task cannot be in an event list as it is the currently
;;;1242   				executing task. */
;;;1243   				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
000010  e3a01000          MOV      r1,#0
000014  e1a00002          MOV      r0,r2
000018  ebfffffe          BL       prvAddCurrentTaskToDelayedList
;;;1244   			}
;;;1245   			xAlreadyYielded = xTaskResumeAll();
00001c  ebfffffe          BL       xTaskResumeAll
;;;1246   		}
;;;1247   		else
;;;1248   		{
;;;1249   			mtCOVERAGE_TEST_MARKER();
;;;1250   		}
;;;1251   
;;;1252   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1253   		have put ourselves to sleep. */
;;;1254   		if( xAlreadyYielded == pdFALSE )
000020  e3500000          CMP      r0,#0
;;;1255   		{
;;;1256   			portYIELD_WITHIN_API();
;;;1257   		}
;;;1258   		else
;;;1259   		{
;;;1260   			mtCOVERAGE_TEST_MARKER();
;;;1261   		}
;;;1262   	}
000024  18bd8010          POPNE    {r4,pc}
                  |L19.40|
000028  e8bd4010          POP      {r4,lr}               ;1256
00002c  eafffffe          B        vPortYield
;;;1263   
                          ENDP


                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;1139   
;;;1140   	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1141   	{
000004  e1a05001          MOV      r5,r1
000008  e1a04000          MOV      r4,r0
;;;1142   	TickType_t xTimeToWake;
;;;1143   	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
00000c  e3a03000          MOV      r3,#0
;;;1144   
;;;1145   		configASSERT( pxPreviousWakeTime );
;;;1146   		configASSERT( ( xTimeIncrement > 0U ) );
;;;1147   		configASSERT( uxSchedulerSuspended == 0 );
;;;1148   
;;;1149   		vTaskSuspendAll();
000010  ebfffffe          BL       vTaskSuspendAll
;;;1150   		{
;;;1151   			/* Minor optimisation.  The tick count cannot change in this
;;;1152   			block. */
;;;1153   			const TickType_t xConstTickCount = xTickCount;
000014  e59f0058          LDR      r0,|L20.116|
000018  e590200c          LDR      r2,[r0,#0xc]  ; xTickCount
;;;1154   
;;;1155   			/* Generate the tick time at which the task wants to wake. */
;;;1156   			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
00001c  e594c000          LDR      r12,[r4,#0]
;;;1157   
;;;1158   			if( xConstTickCount < *pxPreviousWakeTime )
000020  e15c0002          CMP      r12,r2
000024  e08c1005          ADD      r1,r12,r5             ;1156
000028  9a000002          BLS      |L20.56|
;;;1159   			{
;;;1160   				/* The tick count has overflowed since this function was
;;;1161   				lasted called.  In this case the only time we should ever
;;;1162   				actually delay is if the wake time has also	overflowed,
;;;1163   				and the wake time is greater than the tick time.  When this
;;;1164   				is the case it is as if neither time had overflowed. */
;;;1165   				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
00002c  e15c0001          CMP      r12,r1
000030  9a000005          BLS      |L20.76|
000034  ea000001          B        |L20.64|
                  |L20.56|
;;;1166   				{
;;;1167   					xShouldDelay = pdTRUE;
;;;1168   				}
;;;1169   				else
;;;1170   				{
;;;1171   					mtCOVERAGE_TEST_MARKER();
;;;1172   				}
;;;1173   			}
;;;1174   			else
;;;1175   			{
;;;1176   				/* The tick time has not overflowed.  In this case we will
;;;1177   				delay if either the wake time has overflowed, and/or the
;;;1178   				tick time is less than the wake time. */
;;;1179   				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
000038  e15c0001          CMP      r12,r1
00003c  8a000001          BHI      |L20.72|
                  |L20.64|
000040  e1510002          CMP      r1,r2
000044  9a000000          BLS      |L20.76|
                  |L20.72|
;;;1180   				{
;;;1181   					xShouldDelay = pdTRUE;
000048  e3a03001          MOV      r3,#1
                  |L20.76|
;;;1182   				}
;;;1183   				else
;;;1184   				{
;;;1185   					mtCOVERAGE_TEST_MARKER();
;;;1186   				}
;;;1187   			}
;;;1188   
;;;1189   			/* Update the wake time ready for the next call. */
;;;1190   			*pxPreviousWakeTime = xTimeToWake;
;;;1191   
;;;1192   			if( xShouldDelay != pdFALSE )
00004c  e3530000          CMP      r3,#0
;;;1193   			{
;;;1194   				traceTASK_DELAY_UNTIL( xTimeToWake );
;;;1195   
;;;1196   				/* prvAddCurrentTaskToDelayedList() needs the block time, not
;;;1197   				the time to wake, so subtract the current tick count. */
;;;1198   				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
000050  10410002          SUBNE    r0,r1,r2
000054  e5841000          STR      r1,[r4,#0]            ;1192
000058  13a01000          MOVNE    r1,#0
00005c  1bfffffe          BLNE     prvAddCurrentTaskToDelayedList
;;;1199   			}
;;;1200   			else
;;;1201   			{
;;;1202   				mtCOVERAGE_TEST_MARKER();
;;;1203   			}
;;;1204   		}
;;;1205   		xAlreadyYielded = xTaskResumeAll();
000060  ebfffffe          BL       xTaskResumeAll
;;;1206   
;;;1207   		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;1208   		have put ourselves to sleep. */
;;;1209   		if( xAlreadyYielded == pdFALSE )
000064  e3500000          CMP      r0,#0
;;;1210   		{
;;;1211   			portYIELD_WITHIN_API();
;;;1212   		}
;;;1213   		else
;;;1214   		{
;;;1215   			mtCOVERAGE_TEST_MARKER();
;;;1216   		}
;;;1217   	}
000068  18bd8070          POPNE    {r4-r6,pc}
00006c  e8bd4070          POP      {r4-r6,lr}            ;1211
000070  eafffffe          B        vPortYield
;;;1218   
                          ENDP

                  |L20.116|
                          DCD      ||.data||

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;1047   
;;;1048   	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1049   	{
000004  e1a04000          MOV      r4,r0
;;;1050   	TCB_t *pxTCB;
;;;1051   
;;;1052   		taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1053   		{
;;;1054   			/* If null is passed in here then it is the calling task that is
;;;1055   			being deleted. */
;;;1056   			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
00000c  e59f508c          LDR      r5,|L21.160|
000010  e3540000          CMP      r4,#0
000014  05954000          LDREQ    r4,[r5,#0]  ; pxCurrentTCB
;;;1057   
;;;1058   			/* Remove task from the ready list. */
;;;1059   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000018  e2840004          ADD      r0,r4,#4
00001c  ebfffffe          BL       uxListRemove
;;;1060   			{
;;;1061   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
;;;1062   			}
;;;1063   			else
;;;1064   			{
;;;1065   				mtCOVERAGE_TEST_MARKER();
;;;1066   			}
;;;1067   
;;;1068   			/* Is the task waiting on an event also? */
;;;1069   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000020  e5940028          LDR      r0,[r4,#0x28]
000024  e3500000          CMP      r0,#0
;;;1070   			{
;;;1071   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000028  12840018          ADDNE    r0,r4,#0x18
00002c  1bfffffe          BLNE     uxListRemove
;;;1072   			}
;;;1073   			else
;;;1074   			{
;;;1075   				mtCOVERAGE_TEST_MARKER();
;;;1076   			}
;;;1077   
;;;1078   			/* Increment the uxTaskNumber also so kernel aware debuggers can
;;;1079   			detect that the task lists need re-generating.  This is done before
;;;1080   			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
;;;1081   			not return. */
;;;1082   			uxTaskNumber++;
000030  e5950024          LDR      r0,[r5,#0x24]  ; uxTaskNumber
000034  e2800001          ADD      r0,r0,#1
;;;1083   
;;;1084   			if( pxTCB == pxCurrentTCB )
000038  e5850024          STR      r0,[r5,#0x24]  ; uxTaskNumber
00003c  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
000040  e1540000          CMP      r4,r0
000044  1a000006          BNE      |L21.100|
;;;1085   			{
;;;1086   				/* A task is deleting itself.  This cannot complete within the
;;;1087   				task itself, as a context switch to another task is required.
;;;1088   				Place the task in the termination list.  The idle task will
;;;1089   				check the termination list and free up any memory allocated by
;;;1090   				the scheduler for the TCB and stack of the deleted task. */
;;;1091   				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
000048  e59f0054          LDR      r0,|L21.164|
00004c  e2841004          ADD      r1,r4,#4
000050  ebfffffe          BL       vListInsertEnd
;;;1092   
;;;1093   				/* Increment the ucTasksDeleted variable so the idle task knows
;;;1094   				there is a task that has been deleted and that it should therefore
;;;1095   				check the xTasksWaitingTermination list. */
;;;1096   				++uxDeletedTasksWaitingCleanUp;
000054  e5950004          LDR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000058  e2800001          ADD      r0,r0,#1
00005c  e5850004          STR      r0,[r5,#4]  ; uxDeletedTasksWaitingCleanUp
000060  ea000005          B        |L21.124|
                  |L21.100|
;;;1097   
;;;1098   				/* The pre-delete hook is primarily for the Windows simulator,
;;;1099   				in which Windows specific clean up operations are performed,
;;;1100   				after which it is not possible to yield away from this task -
;;;1101   				hence xYieldPending is used to latch that a context switch is
;;;1102   				required. */
;;;1103   				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;1104   			}
;;;1105   			else
;;;1106   			{
;;;1107   				--uxCurrentNumberOfTasks;
000064  e5950008          LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
000068  e2400001          SUB      r0,r0,#1
00006c  e5850008          STR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;1108   				prvDeleteTCB( pxTCB );
000070  e1a00004          MOV      r0,r4
000074  ebfffffe          BL       prvDeleteTCB
;;;1109   
;;;1110   				/* Reset the next expected unblock time in case it referred to
;;;1111   				the task that has just been deleted. */
;;;1112   				prvResetNextTaskUnblockTime();
000078  ebfffffe          BL       prvResetNextTaskUnblockTime
                  |L21.124|
;;;1113   			}
;;;1114   
;;;1115   			traceTASK_DELETE( pxTCB );
;;;1116   		}
;;;1117   		taskEXIT_CRITICAL();
00007c  ebfffffe          BL       vPortExitCritical
;;;1118   
;;;1119   		/* Force a reschedule if it is the currently running task that has just
;;;1120   		been deleted. */
;;;1121   		if( xSchedulerRunning != pdFALSE )
000080  e5950014          LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000084  e3500000          CMP      r0,#0
;;;1122   		{
;;;1123   			if( pxTCB == pxCurrentTCB )
;;;1124   			{
;;;1125   				configASSERT( uxSchedulerSuspended == 0 );
;;;1126   				portYIELD_WITHIN_API();
;;;1127   			}
;;;1128   			else
;;;1129   			{
;;;1130   				mtCOVERAGE_TEST_MARKER();
;;;1131   			}
;;;1132   		}
;;;1133   	}
000088  08bd8070          POPEQ    {r4-r6,pc}
00008c  e5950000          LDR      r0,[r5,#0]            ;1123  ; pxCurrentTCB
000090  e1540000          CMP      r4,r0                 ;1123
000094  18bd8070          POPNE    {r4-r6,pc}
000098  e8bd4070          POP      {r4-r6,lr}            ;1126
00009c  eafffffe          B        vPortYield
;;;1134   
                          ENDP

                  |L21.160|
                          DCD      ||.data||
                  |L21.164|
                          DCD      ||.bss||+0x8c

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1932   
;;;1933   void vTaskEndScheduler( void )
000000  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;1934   {
;;;1935   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1936   	routine so the original ISRs can be restored if necessary.  The port
;;;1937   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1938   	portDISABLE_INTERRUPTS();
000004  e3800080          ORR      r0,r0,#0x80
000008  e121f000          MSR      CPSR_c,r0
;;;1939   	xSchedulerRunning = pdFALSE;
00000c  e59f1008          LDR      r1,|L22.28|
000010  e3a00000          MOV      r0,#0
000014  e5810014          STR      r0,[r1,#0x14]  ; xSchedulerRunning
;;;1940   	vPortEndScheduler();
000018  eafffffe          B        vPortEndScheduler
;;;1941   }
;;;1942   /*----------------------------------------------------------*/
                          ENDP

                  |L22.28|
                          DCD      ||.data||

                          AREA ||i.vTaskGetInfo||, CODE, READONLY, ALIGN=2

                  vTaskGetInfo PROC
;;;3410   
;;;3411   	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;3412   	{
000004  e1b07000          MOVS     r7,r0
;;;3413   	TCB_t *pxTCB;
;;;3414   
;;;3415   		/* xTask is NULL then get the state of the calling task. */
;;;3416   		pxTCB = prvGetTCBFromHandle( xTask );
000008  059f00bc          LDREQ    r0,|L23.204|
00000c  e1a06003          MOV      r6,r3                 ;3412
000010  05905000          LDREQ    r5,[r0,#0]  ; pxCurrentTCB
000014  e1a09002          MOV      r9,r2                 ;3412
000018  e1a04001          MOV      r4,r1                 ;3412
00001c  11a05000          MOVNE    r5,r0
;;;3417   
;;;3418   		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
;;;3419   		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
000020  e2850034          ADD      r0,r5,#0x34
000024  e5845000          STR      r5,[r4,#0]            ;3418
;;;3420   		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
000028  e5840004          STR      r0,[r4,#4]
00002c  e595002c          LDR      r0,[r5,#0x2c]
;;;3421   		pxTaskStatus->pxStackBase = pxTCB->pxStack;
000030  e5840010          STR      r0,[r4,#0x10]
000034  e5950030          LDR      r0,[r5,#0x30]
;;;3422   		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
000038  e584001c          STR      r0,[r4,#0x1c]
00003c  e5950044          LDR      r0,[r5,#0x44]
000040  e5840008          STR      r0,[r4,#8]
;;;3423   
;;;3424   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3425   		{
;;;3426   			/* If the task is in the suspended list then there is a chance it is
;;;3427   			actually just blocked indefinitely - so really it should be reported as
;;;3428   			being in the Blocked state. */
;;;3429   			if( pxTaskStatus->eCurrentState == eSuspended )
000044  e5d4000c          LDRB     r0,[r4,#0xc]
000048  e3500003          CMP      r0,#3
00004c  0a000007          BEQ      |L23.112|
                  |L23.80|
;;;3430   			{
;;;3431   				vTaskSuspendAll();
;;;3432   				{
;;;3433   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;3434   					{
;;;3435   						pxTaskStatus->eCurrentState = eBlocked;
;;;3436   					}
;;;3437   				}
;;;3438   				xTaskResumeAll();
;;;3439   			}
;;;3440   		}
;;;3441   		#endif /* INCLUDE_vTaskSuspend */
;;;3442   
;;;3443   		#if ( configUSE_MUTEXES == 1 )
;;;3444   		{
;;;3445   			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
000050  e595004c          LDR      r0,[r5,#0x4c]
;;;3446   		}
;;;3447   		#else
;;;3448   		{
;;;3449   			pxTaskStatus->uxBasePriority = 0;
;;;3450   		}
;;;3451   		#endif
;;;3452   
;;;3453   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;3454   		{
;;;3455   			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
;;;3456   		}
;;;3457   		#else
;;;3458   		{
;;;3459   			pxTaskStatus->ulRunTimeCounter = 0;
000054  e3a08000          MOV      r8,#0
;;;3460   		}
;;;3461   		#endif
;;;3462   
;;;3463   		/* Obtaining the task state is a little fiddly, so is only done if the value
;;;3464   		of eState passed into this function is eInvalid - otherwise the state is
;;;3465   		just set to whatever is passed in. */
;;;3466   		if( eState != eInvalid )
000058  e5840014          STR      r0,[r4,#0x14]
00005c  e3560005          CMP      r6,#5
000060  e5848018          STR      r8,[r4,#0x18]
;;;3467   		{
;;;3468   			pxTaskStatus->eCurrentState = eState;
000064  15c4600c          STRBNE   r6,[r4,#0xc]
000068  1a00000a          BNE      |L23.152|
00006c  ea000006          B        |L23.140|
                  |L23.112|
000070  ebfffffe          BL       vTaskSuspendAll
000074  e5950028          LDR      r0,[r5,#0x28]         ;3433
000078  e3500000          CMP      r0,#0                 ;3433
00007c  13a00002          MOVNE    r0,#2                 ;3435
000080  15c4000c          STRBNE   r0,[r4,#0xc]          ;3435
000084  ebfffffe          BL       xTaskResumeAll
000088  eafffff0          B        |L23.80|
                  |L23.140|
;;;3469   		}
;;;3470   		else
;;;3471   		{
;;;3472   			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
00008c  e1a00007          MOV      r0,r7
000090  ebfffffe          BL       eTaskGetState
000094  e5c4000c          STRB     r0,[r4,#0xc]
                  |L23.152|
;;;3473   		}
;;;3474   
;;;3475   		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
;;;3476   		parameter is provided to allow it to be skipped. */
;;;3477   		if( xGetFreeStackSpace != pdFALSE )
000098  e3590000          CMP      r9,#0
;;;3478   		{
;;;3479   			#if ( portSTACK_GROWTH > 0 )
;;;3480   			{
;;;3481   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
;;;3482   			}
;;;3483   			#else
;;;3484   			{
;;;3485   				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
00009c  15950030          LDRNE    r0,[r5,#0x30]
0000a0  13a01000          MOVNE    r1,#0
;;;3486   			}
;;;3487   			#endif
;;;3488   		}
;;;3489   		else
;;;3490   		{
;;;3491   			pxTaskStatus->usStackHighWaterMark = 0;
0000a4  01c482b0          STRHEQ   r8,[r4,#0x20]
;;;3492   		}
;;;3493   	}
0000a8  08bd87f0          POPEQ    {r4-r10,pc}
                  |L23.172|
0000ac  e5d02000          LDRB     r2,[r0,#0]
0000b0  e35200a5          CMP      r2,#0xa5
0000b4  02800001          ADDEQ    r0,r0,#1
0000b8  11a00121          LSRNE    r0,r1,#2
0000bc  02811001          ADDEQ    r1,r1,#1
0000c0  11c402b0          STRHNE   r0,[r4,#0x20]         ;3485
0000c4  0afffff8          BEQ      |L23.172|
0000c8  e8bd87f0          POP      {r4-r10,pc}
;;;3494   
                          ENDP

                  |L23.204|
                          DCD      ||.data||

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;3075   
;;;3076   void vTaskMissedYield( void )
000000  e59f1008          LDR      r1,|L24.16|
;;;3077   {
;;;3078   	xYieldPending = pdTRUE;
000004  e3a00001          MOV      r0,#1
000008  e581001c          STR      r0,[r1,#0x1c]  ; xYieldPending
;;;3079   }
00000c  e12fff1e          BX       lr
;;;3080   /*-----------------------------------------------------------*/
                          ENDP

                  |L24.16|
                          DCD      ||.data||

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4572   
;;;4573   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;4574   	{
000004  e1a06001          MOV      r6,r1
;;;4575   	TCB_t * pxTCB;
;;;4576   	uint8_t ucOriginalNotifyState;
;;;4577   	UBaseType_t uxSavedInterruptStatus;
;;;4578   
;;;4579   		configASSERT( xTaskToNotify );
;;;4580   
;;;4581   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4582   		maximum	system call (or maximum API call) interrupt priority.
;;;4583   		Interrupts that are	above the maximum system call priority are keep
;;;4584   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4585   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4586   		is defined in FreeRTOSConfig.h then
;;;4587   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4588   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4589   		been assigned a priority above the configured maximum system call
;;;4590   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4591   		from interrupts	that have been assigned a priority at or (logically)
;;;4592   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4593   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4594   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4595   		provided on the following link:
;;;4596   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4597   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4598   
;;;4599   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4600   
;;;4601   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4602   		{
;;;4603   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000008  e5d01058          LDRB     r1,[r0,#0x58]
00000c  e1a04000          MOV      r4,r0                 ;4574
;;;4604   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000010  e3a00002          MOV      r0,#2
000014  e5c40058          STRB     r0,[r4,#0x58]
;;;4605   
;;;4606   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4607   			semaphore. */
;;;4608   			( pxTCB->ulNotifiedValue )++;
000018  e5940054          LDR      r0,[r4,#0x54]
00001c  e2800001          ADD      r0,r0,#1
000020  e5840054          STR      r0,[r4,#0x54]
;;;4609   
;;;4610   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4611   
;;;4612   			/* If the task is in the blocked state specifically to wait for a
;;;4613   			notification then unblock it now. */
;;;4614   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000024  e3510001          CMP      r1,#1
;;;4615   			{
;;;4616   				/* The task should not have been on an event list. */
;;;4617   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4618   
;;;4619   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
;;;4620   				{
;;;4621   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4622   					prvAddTaskToReadyList( pxTCB );
;;;4623   				}
;;;4624   				else
;;;4625   				{
;;;4626   					/* The delayed and ready lists cannot be accessed, so hold
;;;4627   					this task pending until the scheduler is resumed. */
;;;4628   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
;;;4629   				}
;;;4630   
;;;4631   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
;;;4632   				{
;;;4633   					/* The notified task has a priority above the currently
;;;4634   					executing task so a yield is required. */
;;;4635   					if( pxHigherPriorityTaskWoken != NULL )
;;;4636   					{
;;;4637   						*pxHigherPriorityTaskWoken = pdTRUE;
;;;4638   					}
;;;4639   					else
;;;4640   					{
;;;4641   						/* Mark that a yield is pending in case the user is not
;;;4642   						using the "xHigherPriorityTaskWoken" parameter in an ISR
;;;4643   						safe FreeRTOS function. */
;;;4644   						xYieldPending = pdTRUE;
;;;4645   					}
;;;4646   				}
;;;4647   				else
;;;4648   				{
;;;4649   					mtCOVERAGE_TEST_MARKER();
;;;4650   				}
;;;4651   			}
;;;4652   		}
;;;4653   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4654   	}
000028  18bd8070          POPNE    {r4-r6,pc}
00002c  e59f5068          LDR      r5,|L25.156|
000030  e5950030          LDR      r0,[r5,#0x30]         ;4619  ; uxSchedulerSuspended
000034  e3500000          CMP      r0,#0                 ;4619
000038  159f0060          LDRNE    r0,|L25.160|
00003c  12841018          ADDNE    r1,r4,#0x18           ;4628
000040  0a00000a          BEQ      |L25.112|
                  |L25.68|
000044  ebfffffe          BL       vListInsertEnd
000048  e594002c          LDR      r0,[r4,#0x2c]         ;4631
00004c  e5951000          LDR      r1,[r5,#0]            ;4631  ; pxCurrentTCB
000050  e591102c          LDR      r1,[r1,#0x2c]         ;4631
000054  e1500001          CMP      r0,r1                 ;4631
000058  98bd8070          POPLS    {r4-r6,pc}
00005c  e3560000          CMP      r6,#0                 ;4635
000060  e3a00001          MOV      r0,#1                 ;4576
000064  15860000          STRNE    r0,[r6,#0]            ;4637
000068  0585001c          STREQ    r0,[r5,#0x1c]         ;4644  ; xYieldPending
00006c  e8bd8070          POP      {r4-r6,pc}
                  |L25.112|
000070  e2840004          ADD      r0,r4,#4              ;4621
000074  ebfffffe          BL       uxListRemove
000078  e594002c          LDR      r0,[r4,#0x2c]         ;4622
00007c  e5951010          LDR      r1,[r5,#0x10]         ;4622  ; uxTopReadyPriority
000080  e1500001          CMP      r0,r1                 ;4622
000084  85850010          STRHI    r0,[r5,#0x10]         ;4622  ; uxTopReadyPriority
000088  e59f1014          LDR      r1,|L25.164|
00008c  e0800100          ADD      r0,r0,r0,LSL #2       ;4622
000090  e0810100          ADD      r0,r1,r0,LSL #2       ;4622
000094  e2841004          ADD      r1,r4,#4              ;4622
000098  eaffffe9          B        |L25.68|
;;;4655   
                          ENDP

                  |L25.156|
                          DCD      ||.data||
                  |L25.160|
                          DCD      ||.bss||+0x78
                  |L25.164|
                          DCD      ||.bss||

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2819   
;;;2820   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  e1a02000          MOV      r2,r0
;;;2821   {
;;;2822   	configASSERT( pxEventList );
;;;2823   
;;;2824   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2825   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2826   
;;;2827   	/* Place the event list item of the TCB in the appropriate event list.
;;;2828   	This is placed in the list in priority order so the highest priority task
;;;2829   	is the first to be woken by the event.  The queue that contains the event
;;;2830   	list is locked, preventing simultaneous access from interrupts. */
;;;2831   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000004  e59f0024          LDR      r0,|L26.48|
000008  e92d4010          PUSH     {r4,lr}               ;2821
00000c  e5900000          LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  e1a04001          MOV      r4,r1                 ;2821
000014  e2801018          ADD      r1,r0,#0x18
000018  e1a00002          MOV      r0,r2
00001c  ebfffffe          BL       vListInsert
;;;2832   
;;;2833   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000020  e1a00004          MOV      r0,r4
000024  e8bd4010          POP      {r4,lr}
000028  e3a01001          MOV      r1,#1
00002c  eafffffe          B        prvAddCurrentTaskToDelayedList
;;;2834   }
;;;2835   /*-----------------------------------------------------------*/
                          ENDP

                  |L26.48|
                          DCD      ||.data||

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2836   
;;;2837   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  e3813102          ORR      r3,r1,#0x80000000
;;;2838   {
;;;2839   	configASSERT( pxEventList );
;;;2840   
;;;2841   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2842   	the event groups implementation. */
;;;2843   	configASSERT( uxSchedulerSuspended != 0 );
;;;2844   
;;;2845   	/* Store the item value in the event list item.  It is safe to access the
;;;2846   	event list item here as interrupts won't access the event list item of a
;;;2847   	task that is not in the Blocked state. */
;;;2848   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000004  e59f1028          LDR      r1,|L27.52|
000008  e92d4010          PUSH     {r4,lr}               ;2838
00000c  e591c000          LDR      r12,[r1,#0]  ; pxCurrentTCB
000010  e1a04002          MOV      r4,r2                 ;2838
;;;2849   
;;;2850   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2851   	list.  It is safe to access the event list here because it is part of an
;;;2852   	event group implementation - and interrupts don't access event groups
;;;2853   	directly (instead they access them indirectly by pending function calls to
;;;2854   	the task level). */
;;;2855   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000014  e58c3018          STR      r3,[r12,#0x18]
000018  e5911000          LDR      r1,[r1,#0]  ; pxCurrentTCB
00001c  e2811018          ADD      r1,r1,#0x18
000020  ebfffffe          BL       vListInsertEnd
;;;2856   
;;;2857   	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000024  e1a00004          MOV      r0,r4
000028  e8bd4010          POP      {r4,lr}
00002c  e3a01001          MOV      r1,#1
000030  eafffffe          B        prvAddCurrentTaskToDelayedList
;;;2858   }
;;;2859   /*-----------------------------------------------------------*/
                          ENDP

                  |L27.52|
                          DCD      ||.data||

                          AREA ||i.vTaskPriorityInherit||, CODE, READONLY, ALIGN=2

                  vTaskPriorityInherit PROC
;;;3705   
;;;3706   	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;3707   	{
;;;3708   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
000004  e1b04000          MOVS     r4,r0
;;;3709   
;;;3710   		/* If the mutex was given back by an interrupt while the queue was
;;;3711   		locked then the mutex holder might now be NULL. */
;;;3712   		if( pxMutexHolder != NULL )
;;;3713   		{
;;;3714   			/* If the holder of the mutex has a priority below the priority of
;;;3715   			the task attempting to obtain the mutex then it will temporarily
;;;3716   			inherit the priority of the task attempting to obtain the mutex. */
;;;3717   			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
;;;3718   			{
;;;3719   				/* Adjust the mutex holder state to account for its new
;;;3720   				priority.  Only reset the event list item value if the value is
;;;3721   				not	being used for anything else. */
;;;3722   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
;;;3723   				{
;;;3724   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;3725   				}
;;;3726   				else
;;;3727   				{
;;;3728   					mtCOVERAGE_TEST_MARKER();
;;;3729   				}
;;;3730   
;;;3731   				/* If the task being modified is in the ready state it will need
;;;3732   				to be moved into a new list. */
;;;3733   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
;;;3734   				{
;;;3735   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
;;;3736   					{
;;;3737   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
;;;3738   					}
;;;3739   					else
;;;3740   					{
;;;3741   						mtCOVERAGE_TEST_MARKER();
;;;3742   					}
;;;3743   
;;;3744   					/* Inherit the priority before being moved into the new list. */
;;;3745   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
;;;3746   					prvAddTaskToReadyList( pxTCB );
;;;3747   				}
;;;3748   				else
;;;3749   				{
;;;3750   					/* Just inherit the priority. */
;;;3751   					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
;;;3752   				}
;;;3753   
;;;3754   				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
;;;3755   			}
;;;3756   			else
;;;3757   			{
;;;3758   				mtCOVERAGE_TEST_MARKER();
;;;3759   			}
;;;3760   		}
;;;3761   		else
;;;3762   		{
;;;3763   			mtCOVERAGE_TEST_MARKER();
;;;3764   		}
;;;3765   	}
000008  08bd8070          POPEQ    {r4-r6,pc}
00000c  e594002c          LDR      r0,[r4,#0x2c]         ;3717
000010  e59f5084          LDR      r5,|L28.156|
000014  e5951000          LDR      r1,[r5,#0]            ;3717  ; pxCurrentTCB
000018  e591102c          LDR      r1,[r1,#0x2c]         ;3717
00001c  e1510000          CMP      r1,r0                 ;3717
000020  98bd8070          POPLS    {r4-r6,pc}
000024  e5940018          LDR      r0,[r4,#0x18]         ;3722
000028  e3100102          TST      r0,#0x80000000        ;3722
00002c  1a000003          BNE      |L28.64|
000030  e5950000          LDR      r0,[r5,#0]            ;3724  ; pxCurrentTCB
000034  e590002c          LDR      r0,[r0,#0x2c]         ;3724
000038  e2600004          RSB      r0,r0,#4              ;3724
00003c  e5840018          STR      r0,[r4,#0x18]         ;3724
                  |L28.64|
000040  e594002c          LDR      r0,[r4,#0x2c]         ;3733
000044  e59f6054          LDR      r6,|L28.160|
000048  e5941014          LDR      r1,[r4,#0x14]         ;3733
00004c  e0800100          ADD      r0,r0,r0,LSL #2       ;3733
000050  e0860100          ADD      r0,r6,r0,LSL #2       ;3733
000054  e1510000          CMP      r1,r0                 ;3733
000058  15950000          LDRNE    r0,[r5,#0]            ;3751  ; pxCurrentTCB
00005c  1590002c          LDRNE    r0,[r0,#0x2c]         ;3751
000060  1584002c          STRNE    r0,[r4,#0x2c]         ;3751
000064  18bd8070          POPNE    {r4-r6,pc}
000068  e2840004          ADD      r0,r4,#4              ;3735
00006c  ebfffffe          BL       uxListRemove
000070  e5950000          LDR      r0,[r5,#0]            ;3745  ; pxCurrentTCB
000074  e590002c          LDR      r0,[r0,#0x2c]         ;3745
000078  e584002c          STR      r0,[r4,#0x2c]         ;3746
00007c  e5951010          LDR      r1,[r5,#0x10]         ;3746  ; uxTopReadyPriority
000080  e1500001          CMP      r0,r1                 ;3746
000084  85850010          STRHI    r0,[r5,#0x10]         ;3746  ; uxTopReadyPriority
000088  e0800100          ADD      r0,r0,r0,LSL #2       ;3746
00008c  e0860100          ADD      r0,r6,r0,LSL #2       ;3746
000090  e2841004          ADD      r1,r4,#4              ;3746
000094  e8bd4070          POP      {r4-r6,lr}            ;3746
000098  eafffffe          B        vListInsertEnd
;;;3766   
                          ENDP

                  |L28.156|
                          DCD      ||.data||
                  |L28.160|
                          DCD      ||.bss||

                          AREA ||i.vTaskPrioritySet||, CODE, READONLY, ALIGN=2

                  vTaskPrioritySet PROC
;;;1401   
;;;1402   	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1403   	{
;;;1404   	TCB_t *pxTCB;
;;;1405   	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
;;;1406   	BaseType_t xYieldRequired = pdFALSE;
;;;1407   
;;;1408   		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
;;;1409   
;;;1410   		/* Ensure the new priority is valid. */
;;;1411   		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000004  e3510004          CMP      r1,#4
000008  e1a05001          MOV      r5,r1                 ;1403
00000c  e1a04000          MOV      r4,r0                 ;1403
000010  e3a06000          MOV      r6,#0                 ;1406
;;;1412   		{
;;;1413   			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000014  23a05003          MOVCS    r5,#3
;;;1414   		}
;;;1415   		else
;;;1416   		{
;;;1417   			mtCOVERAGE_TEST_MARKER();
;;;1418   		}
;;;1419   
;;;1420   		taskENTER_CRITICAL();
000018  ebfffffe          BL       vPortEnterCritical
;;;1421   		{
;;;1422   			/* If null is passed in here then it is the priority of the calling
;;;1423   			task that is being changed. */
;;;1424   			pxTCB = prvGetTCBFromHandle( xTask );
00001c  e59f70b4          LDR      r7,|L29.216|
000020  e3540000          CMP      r4,#0
000024  05974000          LDREQ    r4,[r7,#0]  ; pxCurrentTCB
;;;1425   
;;;1426   			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
;;;1427   
;;;1428   			#if ( configUSE_MUTEXES == 1 )
;;;1429   			{
;;;1430   				uxCurrentBasePriority = pxTCB->uxBasePriority;
000028  e594004c          LDR      r0,[r4,#0x4c]
;;;1431   			}
;;;1432   			#else
;;;1433   			{
;;;1434   				uxCurrentBasePriority = pxTCB->uxPriority;
;;;1435   			}
;;;1436   			#endif
;;;1437   
;;;1438   			if( uxCurrentBasePriority != uxNewPriority )
00002c  e1500005          CMP      r0,r5
000030  0a000026          BEQ      |L29.208|
;;;1439   			{
;;;1440   				/* The priority change may have readied a task of higher
;;;1441   				priority than the calling task. */
;;;1442   				if( uxNewPriority > uxCurrentBasePriority )
;;;1443   				{
;;;1444   					if( pxTCB != pxCurrentTCB )
;;;1445   					{
;;;1446   						/* The priority of a task other than the currently
;;;1447   						running task is being raised.  Is the priority being
;;;1448   						raised above that of the running task? */
;;;1449   						if( uxNewPriority >= pxCurrentTCB->uxPriority )
;;;1450   						{
;;;1451   							xYieldRequired = pdTRUE;
;;;1452   						}
;;;1453   						else
;;;1454   						{
;;;1455   							mtCOVERAGE_TEST_MARKER();
;;;1456   						}
;;;1457   					}
;;;1458   					else
;;;1459   					{
;;;1460   						/* The priority of the running task is being raised,
;;;1461   						but the running task must already be the highest
;;;1462   						priority task able to run so no yield is required. */
;;;1463   					}
;;;1464   				}
;;;1465   				else if( pxTCB == pxCurrentTCB )
000034  e5971000          LDR      r1,[r7,#0]  ; pxCurrentTCB
000038  e1550000          CMP      r5,r0                 ;1442
00003c  9a000006          BLS      |L29.92|
000040  e1540001          CMP      r4,r1                 ;1444
000044  0a000007          BEQ      |L29.104|
000048  e5971000          LDR      r1,[r7,#0]            ;1449  ; pxCurrentTCB
00004c  e591102c          LDR      r1,[r1,#0x2c]         ;1449
000050  e1510005          CMP      r1,r5                 ;1449
000054  9a000002          BLS      |L29.100|
000058  ea000002          B        |L29.104|
                  |L29.92|
00005c  e1540001          CMP      r4,r1
000060  1a000000          BNE      |L29.104|
                  |L29.100|
;;;1466   				{
;;;1467   					/* Setting the priority of the running task down means
;;;1468   					there may now be another task of higher priority that
;;;1469   					is ready to execute. */
;;;1470   					xYieldRequired = pdTRUE;
000064  e3a06001          MOV      r6,#1
                  |L29.104|
;;;1471   				}
;;;1472   				else
;;;1473   				{
;;;1474   					/* Setting the priority of any other task down does not
;;;1475   					require a yield as the running task must be above the
;;;1476   					new priority of the task being modified. */
;;;1477   				}
;;;1478   
;;;1479   				/* Remember the ready list the task might be referenced from
;;;1480   				before its uxPriority member is changed so the
;;;1481   				taskRESET_READY_PRIORITY() macro can function correctly. */
;;;1482   				uxPriorityUsedOnEntry = pxTCB->uxPriority;
000068  e594102c          LDR      r1,[r4,#0x2c]
;;;1483   
;;;1484   				#if ( configUSE_MUTEXES == 1 )
;;;1485   				{
;;;1486   					/* Only change the priority being used if the task is not
;;;1487   					currently using an inherited priority. */
;;;1488   					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
00006c  e1500001          CMP      r0,r1
;;;1489   					{
;;;1490   						pxTCB->uxPriority = uxNewPriority;
000070  0584502c          STREQ    r5,[r4,#0x2c]
;;;1491   					}
;;;1492   					else
;;;1493   					{
;;;1494   						mtCOVERAGE_TEST_MARKER();
;;;1495   					}
;;;1496   
;;;1497   					/* The base priority gets set whatever. */
;;;1498   					pxTCB->uxBasePriority = uxNewPriority;
;;;1499   				}
;;;1500   				#else
;;;1501   				{
;;;1502   					pxTCB->uxPriority = uxNewPriority;
;;;1503   				}
;;;1504   				#endif
;;;1505   
;;;1506   				/* Only reset the event list item value if the value is not
;;;1507   				being used for anything else. */
;;;1508   				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
000074  e584504c          STR      r5,[r4,#0x4c]
000078  e5940018          LDR      r0,[r4,#0x18]
;;;1509   				{
;;;1510   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;1511   				}
;;;1512   				else
;;;1513   				{
;;;1514   					mtCOVERAGE_TEST_MARKER();
;;;1515   				}
;;;1516   
;;;1517   				/* If the task is in the blocked or suspended list we need do
;;;1518   				nothing more than change it's priority variable. However, if
;;;1519   				the task is in a ready list it needs to be removed and placed
;;;1520   				in the list appropriate to its new priority. */
;;;1521   				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
00007c  e0811101          ADD      r1,r1,r1,LSL #2
000080  e3100102          TST      r0,#0x80000000        ;1508
000084  02650004          RSBEQ    r0,r5,#4              ;1510
000088  e59f504c          LDR      r5,|L29.220|
00008c  05840018          STREQ    r0,[r4,#0x18]         ;1510
000090  e5940014          LDR      r0,[r4,#0x14]
000094  e0851101          ADD      r1,r5,r1,LSL #2
000098  e1500001          CMP      r0,r1
00009c  1a000009          BNE      |L29.200|
;;;1522   				{
;;;1523   					/* The task is currently in its ready list - remove before adding
;;;1524   					it to it's new ready list.  As we are in a critical section we
;;;1525   					can do this even if the scheduler is suspended. */
;;;1526   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
0000a0  e2840004          ADD      r0,r4,#4
0000a4  ebfffffe          BL       uxListRemove
;;;1527   					{
;;;1528   						/* It is known that the task is in its ready list so
;;;1529   						there is no need to check again and the port level
;;;1530   						reset macro can be called directly. */
;;;1531   						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
;;;1532   					}
;;;1533   					else
;;;1534   					{
;;;1535   						mtCOVERAGE_TEST_MARKER();
;;;1536   					}
;;;1537   					prvAddTaskToReadyList( pxTCB );
0000a8  e594002c          LDR      r0,[r4,#0x2c]
0000ac  e5971010          LDR      r1,[r7,#0x10]  ; uxTopReadyPriority
0000b0  e1500001          CMP      r0,r1
0000b4  85870010          STRHI    r0,[r7,#0x10]  ; uxTopReadyPriority
0000b8  e0800100          ADD      r0,r0,r0,LSL #2
0000bc  e0850100          ADD      r0,r5,r0,LSL #2
0000c0  e2841004          ADD      r1,r4,#4
0000c4  ebfffffe          BL       vListInsertEnd
                  |L29.200|
;;;1538   				}
;;;1539   				else
;;;1540   				{
;;;1541   					mtCOVERAGE_TEST_MARKER();
;;;1542   				}
;;;1543   
;;;1544   				if( xYieldRequired != pdFALSE )
0000c8  e3560000          CMP      r6,#0
;;;1545   				{
;;;1546   					taskYIELD_IF_USING_PREEMPTION();
0000cc  1bfffffe          BLNE     vPortYield
                  |L29.208|
;;;1547   				}
;;;1548   				else
;;;1549   				{
;;;1550   					mtCOVERAGE_TEST_MARKER();
;;;1551   				}
;;;1552   
;;;1553   				/* Remove compiler warning about unused variables when the port
;;;1554   				optimised task selection is not being used. */
;;;1555   				( void ) uxPriorityUsedOnEntry;
;;;1556   			}
;;;1557   		}
;;;1558   		taskEXIT_CRITICAL();
0000d0  e8bd41f0          POP      {r4-r8,lr}
0000d4  eafffffe          B        vPortExitCritical
;;;1559   	}
;;;1560   
                          ENDP

                  |L29.216|
                          DCD      ||.data||
                  |L29.220|
                          DCD      ||.bss||

                          AREA ||i.vTaskResume||, CODE, READONLY, ALIGN=2

                  vTaskResume PROC
;;;1701   
;;;1702   	void vTaskResume( TaskHandle_t xTaskToResume )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1703   	{
000004  e1b04000          MOVS     r4,r0
;;;1704   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
;;;1705   
;;;1706   		/* It does not make sense to resume the calling task. */
;;;1707   		configASSERT( xTaskToResume );
;;;1708   
;;;1709   		/* The parameter cannot be NULL as it is impossible to resume the
;;;1710   		currently executing task. */
;;;1711   		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
000008  159f5064          LDRNE    r5,|L30.116|
00000c  15950000          LDRNE    r0,[r5,#0]  ; pxCurrentTCB
000010  11540000          CMPNE    r4,r0
;;;1712   		{
;;;1713   			taskENTER_CRITICAL();
;;;1714   			{
;;;1715   				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
;;;1716   				{
;;;1717   					traceTASK_RESUME( pxTCB );
;;;1718   
;;;1719   					/* As we are in a critical section we can access the ready
;;;1720   					lists even if the scheduler is suspended. */
;;;1721   					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
;;;1722   					prvAddTaskToReadyList( pxTCB );
;;;1723   
;;;1724   					/* We may have just resumed a higher priority task. */
;;;1725   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1726   					{
;;;1727   						/* This yield may not cause the task just resumed to run,
;;;1728   						but will leave the lists in the correct state for the
;;;1729   						next yield. */
;;;1730   						taskYIELD_IF_USING_PREEMPTION();
;;;1731   					}
;;;1732   					else
;;;1733   					{
;;;1734   						mtCOVERAGE_TEST_MARKER();
;;;1735   					}
;;;1736   				}
;;;1737   				else
;;;1738   				{
;;;1739   					mtCOVERAGE_TEST_MARKER();
;;;1740   				}
;;;1741   			}
;;;1742   			taskEXIT_CRITICAL();
;;;1743   		}
;;;1744   		else
;;;1745   		{
;;;1746   			mtCOVERAGE_TEST_MARKER();
;;;1747   		}
;;;1748   	}
000014  08bd8070          POPEQ    {r4-r6,pc}
000018  ebfffffe          BL       vPortEnterCritical
00001c  e1a00004          MOV      r0,r4                 ;1715
000020  ebfffffe          BL       prvTaskIsTaskSuspended
000024  e3500000          CMP      r0,#0                 ;1715
000028  0a00000f          BEQ      |L30.108|
00002c  e2840004          ADD      r0,r4,#4              ;1721
000030  ebfffffe          BL       uxListRemove
000034  e594002c          LDR      r0,[r4,#0x2c]         ;1722
000038  e5951010          LDR      r1,[r5,#0x10]         ;1722  ; uxTopReadyPriority
00003c  e1500001          CMP      r0,r1                 ;1722
000040  85850010          STRHI    r0,[r5,#0x10]         ;1722  ; uxTopReadyPriority
000044  e59f102c          LDR      r1,|L30.120|
000048  e0800100          ADD      r0,r0,r0,LSL #2       ;1722
00004c  e0810100          ADD      r0,r1,r0,LSL #2       ;1722
000050  e2841004          ADD      r1,r4,#4              ;1722
000054  ebfffffe          BL       vListInsertEnd
000058  e594002c          LDR      r0,[r4,#0x2c]         ;1725
00005c  e5951000          LDR      r1,[r5,#0]            ;1725  ; pxCurrentTCB
000060  e591102c          LDR      r1,[r1,#0x2c]         ;1725
000064  e1500001          CMP      r0,r1                 ;1725
000068  2bfffffe          BLCS     vPortYield
                  |L30.108|
00006c  e8bd4070          POP      {r4-r6,lr}            ;1742
000070  eafffffe          B        vPortExitCritical
;;;1749   
                          ENDP

                  |L30.116|
                          DCD      ||.data||
                  |L30.120|
                          DCD      ||.bss||

                          AREA ||i.vTaskSetTaskNumber||, CODE, READONLY, ALIGN=2

                  vTaskSetTaskNumber PROC
;;;3106   
;;;3107   	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
000000  e3500000          CMP      r0,#0
;;;3108   	{
;;;3109   	TCB_t *pxTCB;
;;;3110   
;;;3111   		if( xTask != NULL )
;;;3112   		{
;;;3113   			pxTCB = ( TCB_t * ) xTask;
;;;3114   			pxTCB->uxTaskNumber = uxHandle;
000004  15801048          STRNE    r1,[r0,#0x48]
;;;3115   		}
;;;3116   	}
000008  e12fff1e          BX       lr
;;;3117   
                          ENDP


                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;3006   
;;;3007   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  e59f1010          LDR      r1,|L32.24|
;;;3008   {
;;;3009   	configASSERT( pxTimeOut );
;;;3010   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000004  e5912020          LDR      r2,[r1,#0x20]  ; xNumOfOverflows
;;;3011   	pxTimeOut->xTimeOnEntering = xTickCount;
000008  e5802000          STR      r2,[r0,#0]
00000c  e591100c          LDR      r1,[r1,#0xc]  ; xTickCount
000010  e5801004          STR      r1,[r0,#4]
;;;3012   }
000014  e12fff1e          BX       lr
;;;3013   /*-----------------------------------------------------------*/
                          ENDP

                  |L32.24|
                          DCD      ||.data||

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1825   
;;;1826   void vTaskStartScheduler( void )
000000  e92d401c          PUSH     {r2-r4,lr}
;;;1827   {
;;;1828   BaseType_t xReturn;
;;;1829   
;;;1830   	/* Add the idle task at the lowest priority. */
;;;1831   	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;1832   	{
;;;1833   		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
;;;1834   		StackType_t *pxIdleTaskStackBuffer = NULL;
;;;1835   		uint32_t ulIdleTaskStackSize;
;;;1836   
;;;1837   		/* The Idle task is created using user provided RAM - obtain the
;;;1838   		address of the RAM then create the idle task. */
;;;1839   		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
;;;1840   		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
;;;1841   												"IDLE",
;;;1842   												ulIdleTaskStackSize,
;;;1843   												( void * ) NULL,
;;;1844   												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1845   												pxIdleTaskStackBuffer,
;;;1846   												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1847   
;;;1848   		if( xIdleTaskHandle != NULL )
;;;1849   		{
;;;1850   			xReturn = pdPASS;
;;;1851   		}
;;;1852   		else
;;;1853   		{
;;;1854   			xReturn = pdFAIL;
;;;1855   		}
;;;1856   	}
;;;1857   	#else
;;;1858   	{
;;;1859   		/* The Idle task is being created using dynamically allocated RAM. */
;;;1860   		xReturn = xTaskCreate(	prvIdleTask,
000004  e59f0050          LDR      r0,|L33.92|
000008  e3a04000          MOV      r4,#0
00000c  e58d0004          STR      r0,[sp,#4]
000010  e59f0050          LDR      r0,|L33.104|
000014  e1a03004          MOV      r3,r4
000018  e3a02b01          MOV      r2,#0x400
00001c  e28f103c          ADR      r1,|L33.96|
000020  e58d4000          STR      r4,[sp,#0]
000024  ebfffffe          BL       xTaskCreate
;;;1861   								"IDLE", configMINIMAL_STACK_SIZE,
;;;1862   								( void * ) NULL,
;;;1863   								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
;;;1864   								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1865   	}
;;;1866   	#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;1867   
;;;1868   	#if ( configUSE_TIMERS == 1 )
;;;1869   	{
;;;1870   		if( xReturn == pdPASS )
;;;1871   		{
;;;1872   			xReturn = xTimerCreateTimerTask();
;;;1873   		}
;;;1874   		else
;;;1875   		{
;;;1876   			mtCOVERAGE_TEST_MARKER();
;;;1877   		}
;;;1878   	}
;;;1879   	#endif /* configUSE_TIMERS */
;;;1880   
;;;1881   	if( xReturn == pdPASS )
000028  e3500001          CMP      r0,#1
00002c  1a000009          BNE      |L33.88|
;;;1882   	{
;;;1883   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1884   		before or during the call to xPortStartScheduler().  The stacks of
;;;1885   		the created tasks contain a status word with interrupts switched on
;;;1886   		so interrupts will automatically get re-enabled when the first task
;;;1887   		starts to run. */
;;;1888   		portDISABLE_INTERRUPTS();
000030  e10f0000          MRS      r0,APSR ; formerly CPSR
000034  e3800080          ORR      r0,r0,#0x80
000038  e121f000          MSR      CPSR_c,r0
;;;1889   
;;;1890   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1891   		{
;;;1892   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1893   			structure specific to the task that will run first. */
;;;1894   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1895   		}
;;;1896   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1897   
;;;1898   		xNextTaskUnblockTime = portMAX_DELAY;
00003c  e59f0028          LDR      r0,|L33.108|
000040  e3e01000          MVN      r1,#0
000044  e5801028          STR      r1,[r0,#0x28]  ; xNextTaskUnblockTime
;;;1899   		xSchedulerRunning = pdTRUE;
000048  e3a01001          MOV      r1,#1
00004c  e5801014          STR      r1,[r0,#0x14]  ; xSchedulerRunning
;;;1900   		xTickCount = ( TickType_t ) 0U;
000050  e580400c          STR      r4,[r0,#0xc]  ; xTickCount
;;;1901   
;;;1902   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1903   		macro must be defined to configure the timer/counter used to generate
;;;1904   		the run time counter time base. */
;;;1905   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1906   
;;;1907   		/* Setting up the timer tick is hardware specific and thus in the
;;;1908   		portable interface. */
;;;1909   		if( xPortStartScheduler() != pdFALSE )
000054  ebfffffe          BL       xPortStartScheduler
                  |L33.88|
;;;1910   		{
;;;1911   			/* Should not reach here as if the scheduler is running the
;;;1912   			function will not return. */
;;;1913   		}
;;;1914   		else
;;;1915   		{
;;;1916   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1917   		}
;;;1918   	}
;;;1919   	else
;;;1920   	{
;;;1921   		/* This line will only be reached if the kernel could not be started,
;;;1922   		because there was not enough FreeRTOS heap to create the idle task
;;;1923   		or the timer task. */
;;;1924   		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
;;;1925   	}
;;;1926   
;;;1927   	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
;;;1928   	meaning xIdleTaskHandle is not used anywhere else. */
;;;1929   	( void ) xIdleTaskHandle;
;;;1930   }
000058  e8bd801c          POP      {r2-r4,pc}
;;;1931   /*-----------------------------------------------------------*/
                          ENDP

                  |L33.92|
                          DCD      ||.data||+0x2c
                  |L33.96|
000060  49444c45          DCB      "IDLE",0
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L33.104|
                          DCD      prvIdleTask
                  |L33.108|
                          DCD      ||.data||

                          AREA ||i.vTaskSuspend||, CODE, READONLY, ALIGN=2

                  vTaskSuspend PROC
;;;1565   
;;;1566   	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1567   	{
000004  e1a04000          MOV      r4,r0
;;;1568   	TCB_t *pxTCB;
;;;1569   
;;;1570   		taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1571   		{
;;;1572   			/* If null is passed in here then it is the running task that is
;;;1573   			being suspended. */
;;;1574   			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
00000c  e59f5088          LDR      r5,|L34.156|
000010  e3540000          CMP      r4,#0
000014  05954000          LDREQ    r4,[r5,#0]  ; pxCurrentTCB
;;;1575   
;;;1576   			traceTASK_SUSPEND( pxTCB );
;;;1577   
;;;1578   			/* Remove task from the ready/delayed list and place in the
;;;1579   			suspended list. */
;;;1580   			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
000018  e2840004          ADD      r0,r4,#4
00001c  ebfffffe          BL       uxListRemove
;;;1581   			{
;;;1582   				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
;;;1583   			}
;;;1584   			else
;;;1585   			{
;;;1586   				mtCOVERAGE_TEST_MARKER();
;;;1587   			}
;;;1588   
;;;1589   			/* Is the task waiting on an event also? */
;;;1590   			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000020  e5940028          LDR      r0,[r4,#0x28]
000024  e3500000          CMP      r0,#0
;;;1591   			{
;;;1592   				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000028  12840018          ADDNE    r0,r4,#0x18
00002c  1bfffffe          BLNE     uxListRemove
;;;1593   			}
;;;1594   			else
;;;1595   			{
;;;1596   				mtCOVERAGE_TEST_MARKER();
;;;1597   			}
;;;1598   
;;;1599   			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
000030  e59f0068          LDR      r0,|L34.160|
000034  e2841004          ADD      r1,r4,#4
000038  ebfffffe          BL       vListInsertEnd
;;;1600   		}
;;;1601   		taskEXIT_CRITICAL();
00003c  ebfffffe          BL       vPortExitCritical
;;;1602   
;;;1603   		if( xSchedulerRunning != pdFALSE )
000040  e5950014          LDR      r0,[r5,#0x14]  ; xSchedulerRunning
000044  e3500000          CMP      r0,#0
000048  0a000002          BEQ      |L34.88|
;;;1604   		{
;;;1605   			/* Reset the next expected unblock time in case it referred to the
;;;1606   			task that is now in the Suspended state. */
;;;1607   			taskENTER_CRITICAL();
00004c  ebfffffe          BL       vPortEnterCritical
;;;1608   			{
;;;1609   				prvResetNextTaskUnblockTime();
000050  ebfffffe          BL       prvResetNextTaskUnblockTime
;;;1610   			}
;;;1611   			taskEXIT_CRITICAL();
000054  ebfffffe          BL       vPortExitCritical
                  |L34.88|
;;;1612   		}
;;;1613   		else
;;;1614   		{
;;;1615   			mtCOVERAGE_TEST_MARKER();
;;;1616   		}
;;;1617   
;;;1618   		if( pxTCB == pxCurrentTCB )
000058  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
00005c  e1540000          CMP      r4,r0
;;;1619   		{
;;;1620   			if( xSchedulerRunning != pdFALSE )
;;;1621   			{
;;;1622   				/* The current task has just been suspended. */
;;;1623   				configASSERT( uxSchedulerSuspended == 0 );
;;;1624   				portYIELD_WITHIN_API();
;;;1625   			}
;;;1626   			else
;;;1627   			{
;;;1628   				/* The scheduler is not running, but the task that was pointed
;;;1629   				to by pxCurrentTCB has just been suspended and pxCurrentTCB
;;;1630   				must be adjusted to point to a different task. */
;;;1631   				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
;;;1632   				{
;;;1633   					/* No other tasks are ready, so set pxCurrentTCB back to
;;;1634   					NULL so when the next task is created pxCurrentTCB will
;;;1635   					be set to point to it no matter what its relative priority
;;;1636   					is. */
;;;1637   					pxCurrentTCB = NULL;
;;;1638   				}
;;;1639   				else
;;;1640   				{
;;;1641   					vTaskSwitchContext();
;;;1642   				}
;;;1643   			}
;;;1644   		}
;;;1645   		else
;;;1646   		{
;;;1647   			mtCOVERAGE_TEST_MARKER();
;;;1648   		}
;;;1649   	}
000060  18bd8070          POPNE    {r4-r6,pc}
000064  e5950014          LDR      r0,[r5,#0x14]         ;1620  ; xSchedulerRunning
000068  e3500000          CMP      r0,#0                 ;1620
00006c  0a000001          BEQ      |L34.120|
000070  e8bd4070          POP      {r4-r6,lr}            ;1624
000074  eafffffe          B        vPortYield
                  |L34.120|
000078  e59f0020          LDR      r0,|L34.160|
00007c  e5951008          LDR      r1,[r5,#8]            ;1631  ; uxCurrentNumberOfTasks
000080  e5900000          LDR      r0,[r0,#0]            ;1631  ; xSuspendedTaskList
000084  e1500001          CMP      r0,r1                 ;1631
000088  03a00000          MOVEQ    r0,#0                 ;1637
00008c  05850000          STREQ    r0,[r5,#0]            ;1637  ; pxCurrentTCB
000090  08bd8070          POPEQ    {r4-r6,pc}
000094  e8bd4070          POP      {r4-r6,lr}            ;1641
000098  eafffffe          B        vTaskSwitchContext
;;;1650   
                          ENDP

                  |L34.156|
                          DCD      ||.data||
                  |L34.160|
                          DCD      ||.bss||+0xa0

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1943   
;;;1944   void vTaskSuspendAll( void )
000000  e59f000c          LDR      r0,|L35.20|
;;;1945   {
;;;1946   	/* A critical section is not required as the variable is of type
;;;1947   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1948   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1949   	http://goo.gl/wu4acr */
;;;1950   	++uxSchedulerSuspended;
000004  e5901030          LDR      r1,[r0,#0x30]  ; uxSchedulerSuspended
000008  e2811001          ADD      r1,r1,#1
00000c  e5801030          STR      r1,[r0,#0x30]  ; uxSchedulerSuspended
;;;1951   }
000010  e12fff1e          BX       lr
;;;1952   /*----------------------------------------------------------*/
                          ENDP

                  |L35.20|
                          DCD      ||.data||

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2760   
;;;2761   void vTaskSwitchContext( void )
000000  e59f3064          LDR      r3,|L36.108|
;;;2762   {
;;;2763   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000004  e5930030          LDR      r0,[r3,#0x30]  ; uxSchedulerSuspended
000008  e3500000          CMP      r0,#0
;;;2764   	{
;;;2765   		/* The scheduler is currently suspended - do not allow a context
;;;2766   		switch. */
;;;2767   		xYieldPending = pdTRUE;
00000c  13a00001          MOVNE    r0,#1
;;;2768   	}
;;;2769   	else
;;;2770   	{
;;;2771   		xYieldPending = pdFALSE;
000010  03a00000          MOVEQ    r0,#0
000014  e583001c          STR      r0,[r3,#0x1c]  ; xYieldPending
;;;2772   		traceTASK_SWITCHED_OUT();
;;;2773   
;;;2774   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2775   		{
;;;2776   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2777   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2778   				#else
;;;2779   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2780   				#endif
;;;2781   
;;;2782   				/* Add the amount of time the task has been running to the
;;;2783   				accumulated time so far.  The time the task started running was
;;;2784   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2785   				protection here so count values are only valid until the timer
;;;2786   				overflows.  The guard against negative values is to protect
;;;2787   				against suspect run time stat counter implementations - which
;;;2788   				are provided by the application, not the kernel. */
;;;2789   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2790   				{
;;;2791   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2792   				}
;;;2793   				else
;;;2794   				{
;;;2795   					mtCOVERAGE_TEST_MARKER();
;;;2796   				}
;;;2797   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2798   		}
;;;2799   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2800   
;;;2801   		/* Check for stack overflow, if configured. */
;;;2802   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2803   
;;;2804   		/* Select a new task to run using either the generic C or port
;;;2805   		optimised asm code. */
;;;2806   		taskSELECT_HIGHEST_PRIORITY_TASK();
000018  05930010          LDREQ    r0,[r3,#0x10]  ; uxTopReadyPriority
00001c  059f104c          LDREQ    r1,|L36.112|
;;;2807   		traceTASK_SWITCHED_IN();
;;;2808   
;;;2809   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2810   		{
;;;2811   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2812   			structure specific to this task. */
;;;2813   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2814   		}
;;;2815   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2816   	}
;;;2817   }
000020  112fff1e          BXNE     lr
                  |L36.36|
000024  e0802100          ADD      r2,r0,r0,LSL #2       ;2806
000028  e7912102          LDR      r2,[r1,r2,LSL #2]     ;2806
00002c  e3520000          CMP      r2,#0                 ;2806
000030  02400001          SUBEQ    r0,r0,#1              ;2806
000034  0afffffa          BEQ      |L36.36|
000038  e0802100          ADD      r2,r0,r0,LSL #2       ;2806
00003c  e0811102          ADD      r1,r1,r2,LSL #2       ;2806
000040  e5912004          LDR      r2,[r1,#4]            ;2806
000044  e281c008          ADD      r12,r1,#8             ;2806
000048  e5922004          LDR      r2,[r2,#4]            ;2806
00004c  e152000c          CMP      r2,r12                ;2806
000050  e5812004          STR      r2,[r1,#4]            ;2806
000054  05922004          LDREQ    r2,[r2,#4]            ;2806
000058  05812004          STREQ    r2,[r1,#4]            ;2806
00005c  e592100c          LDR      r1,[r2,#0xc]          ;2806
000060  e5831000          STR      r1,[r3,#0]            ;2806  ; pxCurrentTCB
000064  e5830010          STR      r0,[r3,#0x10]         ;2806  ; uxTopReadyPriority
000068  e12fff1e          BX       lr
;;;2818   /*-----------------------------------------------------------*/
                          ENDP

                  |L36.108|
                          DCD      ||.data||
                  |L36.112|
                          DCD      ||.bss||

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;3014   
;;;3015   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;3016   {
000004  e1a05001          MOV      r5,r1
000008  e1a04000          MOV      r4,r0
;;;3017   BaseType_t xReturn;
;;;3018   
;;;3019   	configASSERT( pxTimeOut );
;;;3020   	configASSERT( pxTicksToWait );
;;;3021   
;;;3022   	taskENTER_CRITICAL();
00000c  ebfffffe          BL       vPortEnterCritical
;;;3023   	{
;;;3024   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;3025   		const TickType_t xConstTickCount = xTickCount;
000010  e59f1060          LDR      r1,|L37.120|
000014  e591200c          LDR      r2,[r1,#0xc]  ; xTickCount
;;;3026   
;;;3027   		#if( INCLUDE_xTaskAbortDelay == 1 )
;;;3028   			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
;;;3029   			{
;;;3030   				/* The delay was aborted, which is not the same as a time out,
;;;3031   				but has the same result. */
;;;3032   				pxCurrentTCB->ucDelayAborted = pdFALSE;
;;;3033   				xReturn = pdTRUE;
;;;3034   			}
;;;3035   			else
;;;3036   		#endif
;;;3037   
;;;3038   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;3039   			if( *pxTicksToWait == portMAX_DELAY )
000018  e5950000          LDR      r0,[r5,#0]
00001c  e3700001          CMN      r0,#1
000020  0a00000e          BEQ      |L37.96|
;;;3040   			{
;;;3041   				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
;;;3042   				specified is the maximum block time then the task should block
;;;3043   				indefinitely, and therefore never time out. */
;;;3044   				xReturn = pdFALSE;
;;;3045   			}
;;;3046   			else
;;;3047   		#endif
;;;3048   
;;;3049   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
000024  e5943000          LDR      r3,[r4,#0]
000028  e5911020          LDR      r1,[r1,#0x20]  ; xNumOfOverflows
00002c  e1530001          CMP      r3,r1
000030  0a000002          BEQ      |L37.64|
000034  e5941004          LDR      r1,[r4,#4]
000038  e1510002          CMP      r1,r2
00003c  9a000009          BLS      |L37.104|
                  |L37.64|
;;;3050   		{
;;;3051   			/* The tick count is greater than the time at which
;;;3052   			vTaskSetTimeout() was called, but has also overflowed since
;;;3053   			vTaskSetTimeOut() was called.  It must have wrapped all the way
;;;3054   			around and gone past again. This passed since vTaskSetTimeout()
;;;3055   			was called. */
;;;3056   			xReturn = pdTRUE;
;;;3057   		}
;;;3058   		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
000040  e5941004          LDR      r1,[r4,#4]
000044  e0422001          SUB      r2,r2,r1
000048  e1500002          CMP      r0,r2
00004c  9a000005          BLS      |L37.104|
;;;3059   		{
;;;3060   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;3061   			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
000050  e0400002          SUB      r0,r0,r2
000054  e5850000          STR      r0,[r5,#0]
;;;3062   			vTaskSetTimeOutState( pxTimeOut );
000058  e1a00004          MOV      r0,r4
00005c  ebfffffe          BL       vTaskSetTimeOutState
                  |L37.96|
000060  e3a04000          MOV      r4,#0                 ;3044
000064  ea000000          B        |L37.108|
                  |L37.104|
;;;3063   			xReturn = pdFALSE;
;;;3064   		}
;;;3065   		else
;;;3066   		{
;;;3067   			xReturn = pdTRUE;
000068  e3a04001          MOV      r4,#1
                  |L37.108|
;;;3068   		}
;;;3069   	}
;;;3070   	taskEXIT_CRITICAL();
00006c  ebfffffe          BL       vPortExitCritical
;;;3071   
;;;3072   	return xReturn;
000070  e1a00004          MOV      r0,r4
;;;3073   }
000074  e8bd8070          POP      {r4-r6,pc}
;;;3074   /*-----------------------------------------------------------*/
                          ENDP

                  |L37.120|
                          DCD      ||.data||

                          AREA ||i.xTaskCreate||, CODE, READONLY, ALIGN=2

                  xTaskCreate PROC
;;;675    
;;;676    	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;677    							const char * const pcName,
;;;678    							const uint16_t usStackDepth,
;;;679    							void * const pvParameters,
;;;680    							UBaseType_t uxPriority,
;;;681    							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
;;;682    	{
000004  e1a0b000          MOV      r11,r0
;;;683    	TCB_t *pxNewTCB;
;;;684    	BaseType_t xReturn;
;;;685    
;;;686    		/* If the stack grows down then allocate the stack then the TCB so the stack
;;;687    		does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;688    		the TCB then the stack. */
;;;689    		#if( portSTACK_GROWTH > 0 )
;;;690    		{
;;;691    			/* Allocate space for the TCB.  Where the memory comes from depends on
;;;692    			the implementation of the port malloc function and whether or not static
;;;693    			allocation is being used. */
;;;694    			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;695    
;;;696    			if( pxNewTCB != NULL )
;;;697    			{
;;;698    				/* Allocate space for the stack used by the task being created.
;;;699    				The base of the stack memory stored in the TCB so the task can
;;;700    				be deleted later if required. */
;;;701    				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;702    
;;;703    				if( pxNewTCB->pxStack == NULL )
;;;704    				{
;;;705    					/* Could not allocate the stack.  Delete the allocated TCB. */
;;;706    					vPortFree( pxNewTCB );
;;;707    					pxNewTCB = NULL;
;;;708    				}
;;;709    			}
;;;710    		}
;;;711    		#else /* portSTACK_GROWTH */
;;;712    		{
;;;713    		StackType_t *pxStack;
;;;714    
;;;715    			/* Allocate space for the stack used by the task being created. */
;;;716    			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000008  e59d703c          LDR      r7,[sp,#0x3c]
00000c  e59d8038          LDR      r8,[sp,#0x38]
000010  e1a09003          MOV      r9,r3                 ;682
000014  e1a06002          MOV      r6,r2                 ;682
000018  e1a0a001          MOV      r10,r1                ;682
00001c  e1a00102          LSL      r0,r2,#2
000020  ebfffffe          BL       pvPortMalloc
000024  e1b05000          MOVS     r5,r0
;;;717    
;;;718    			if( pxStack != NULL )
000028  0a000015          BEQ      |L38.132|
;;;719    			{
;;;720    				/* Allocate space for the TCB. */
;;;721    				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
00002c  e3a0005c          MOV      r0,#0x5c
000030  ebfffffe          BL       pvPortMalloc
000034  e1b04000          MOVS     r4,r0
;;;722    
;;;723    				if( pxNewTCB != NULL )
000038  0a00000f          BEQ      |L38.124|
;;;724    				{
;;;725    					/* Store the stack location in the TCB. */
;;;726    					pxNewTCB->pxStack = pxStack;
;;;727    				}
;;;728    				else
;;;729    				{
;;;730    					/* The stack cannot be used as the TCB was not created.  Free
;;;731    					it again. */
;;;732    					vPortFree( pxStack );
;;;733    				}
;;;734    			}
;;;735    			else
;;;736    			{
;;;737    				pxNewTCB = NULL;
;;;738    			}
;;;739    		}
;;;740    		#endif /* portSTACK_GROWTH */
;;;741    
;;;742    		if( pxNewTCB != NULL )
;;;743    		{
;;;744    			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
;;;745    			{
;;;746    				/* Tasks can be created statically or dynamically, so note this
;;;747    				task was created dynamically in case it is later deleted. */
;;;748    				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
;;;749    			}
;;;750    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;751    
;;;752    			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
00003c  e5845030          STR      r5,[r4,#0x30]
000040  e3a00000          MOV      r0,#0
000044  e58d000c          STR      r0,[sp,#0xc]
000048  e1a03009          MOV      r3,r9
00004c  e1a02006          MOV      r2,r6
000050  e1a0100a          MOV      r1,r10
000054  e1a0000b          MOV      r0,r11
000058  e58d4008          STR      r4,[sp,#8]
00005c  e58d7004          STR      r7,[sp,#4]
000060  e58d8000          STR      r8,[sp,#0]
000064  ebfffffe          BL       prvInitialiseNewTask
;;;753    			prvAddNewTaskToReadyList( pxNewTCB );
000068  e1a00004          MOV      r0,r4
00006c  ebfffffe          BL       prvAddNewTaskToReadyList
;;;754    			xReturn = pdPASS;
000070  e3a00001          MOV      r0,#1
                  |L38.116|
000074  e28dd010          ADD      sp,sp,#0x10           ;726
;;;755    		}
;;;756    		else
;;;757    		{
;;;758    			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
;;;759    		}
;;;760    
;;;761    		return xReturn;
;;;762    	}
000078  e8bd9ff0          POP      {r4-r12,pc}
                  |L38.124|
00007c  e1a00005          MOV      r0,r5                 ;732
000080  ebfffffe          BL       vPortFree
                  |L38.132|
000084  e3e00000          MVN      r0,#0                 ;758
000088  eafffff9          B        |L38.116|
;;;763    
                          ENDP


                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4342   
;;;4343   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4344   	{
000004  e1a07003          MOV      r7,r3
000008  e1a08002          MOV      r8,r2
00000c  e1a05001          MOV      r5,r1
000010  e1a04000          MOV      r4,r0
;;;4345   	TCB_t * pxTCB;
;;;4346   	BaseType_t xReturn = pdPASS;
000014  e3a06001          MOV      r6,#1
;;;4347   	uint8_t ucOriginalNotifyState;
;;;4348   
;;;4349   		configASSERT( xTaskToNotify );
;;;4350   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4351   
;;;4352   		taskENTER_CRITICAL();
000018  ebfffffe          BL       vPortEnterCritical
;;;4353   		{
;;;4354   			if( pulPreviousNotificationValue != NULL )
00001c  e3570000          CMP      r7,#0
;;;4355   			{
;;;4356   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000020  15940054          LDRNE    r0,[r4,#0x54]
000024  15870000          STRNE    r0,[r7,#0]
;;;4357   			}
;;;4358   
;;;4359   			ucOriginalNotifyState = pxTCB->ucNotifyState;
000028  e5d40058          LDRB     r0,[r4,#0x58]
;;;4360   
;;;4361   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
00002c  e3a01002          MOV      r1,#2
000030  e5c41058          STRB     r1,[r4,#0x58]
;;;4362   
;;;4363   			switch( eAction )
000034  e3580005          CMP      r8,#5
000038  308ff108          ADDCC    pc,pc,r8,LSL #2
00003c  ea00000f          B        |L39.128|
000040  ea00000e          B        |L39.128|
000044  ea000002          B        |L39.84|
000048  ea000004          B        |L39.96|
00004c  ea00000a          B        |L39.124|
000050  ea000006          B        |L39.112|
                  |L39.84|
;;;4364   			{
;;;4365   				case eSetBits	:
;;;4366   					pxTCB->ulNotifiedValue |= ulValue;
000054  e5941054          LDR      r1,[r4,#0x54]
000058  e1811005          ORR      r1,r1,r5
;;;4367   					break;
00005c  ea000001          B        |L39.104|
                  |L39.96|
;;;4368   
;;;4369   				case eIncrement	:
;;;4370   					( pxTCB->ulNotifiedValue )++;
000060  e5941054          LDR      r1,[r4,#0x54]
000064  e2811001          ADD      r1,r1,#1
                  |L39.104|
000068  e5841054          STR      r1,[r4,#0x54]         ;4366
00006c  ea000003          B        |L39.128|
                  |L39.112|
;;;4371   					break;
;;;4372   
;;;4373   				case eSetValueWithOverwrite	:
;;;4374   					pxTCB->ulNotifiedValue = ulValue;
;;;4375   					break;
;;;4376   
;;;4377   				case eSetValueWithoutOverwrite :
;;;4378   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000070  e3500002          CMP      r0,#2
;;;4379   					{
;;;4380   						pxTCB->ulNotifiedValue = ulValue;
;;;4381   					}
;;;4382   					else
;;;4383   					{
;;;4384   						/* The value could not be written to the task. */
;;;4385   						xReturn = pdFAIL;
000074  03a06000          MOVEQ    r6,#0
000078  0a000002          BEQ      |L39.136|
                  |L39.124|
00007c  e5845054          STR      r5,[r4,#0x54]         ;4380
                  |L39.128|
;;;4386   					}
;;;4387   					break;
;;;4388   
;;;4389   				case eNoAction:
;;;4390   					/* The task is being notified without its notify value being
;;;4391   					updated. */
;;;4392   					break;
;;;4393   			}
;;;4394   
;;;4395   			traceTASK_NOTIFY();
;;;4396   
;;;4397   			/* If the task is in the blocked state specifically to wait for a
;;;4398   			notification then unblock it now. */
;;;4399   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000080  e3500001          CMP      r0,#1
000084  0a000002          BEQ      |L39.148|
                  |L39.136|
;;;4400   			{
;;;4401   				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4402   				prvAddTaskToReadyList( pxTCB );
;;;4403   
;;;4404   				/* The task should not have been on an event list. */
;;;4405   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4406   
;;;4407   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4408   				{
;;;4409   					/* If a task is blocked waiting for a notification then
;;;4410   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4411   					out time.  If the task is unblocked for a reason other than
;;;4412   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4413   					because it will automatically get reset to a new value when
;;;4414   					the tick count equals xNextTaskUnblockTime.  However if
;;;4415   					tickless idling is used it might be more important to enter
;;;4416   					sleep mode at the earliest possible time - so reset
;;;4417   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4418   					earliest possible time. */
;;;4419   					prvResetNextTaskUnblockTime();
;;;4420   				}
;;;4421   				#endif
;;;4422   
;;;4423   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
;;;4424   				{
;;;4425   					/* The notified task has a priority above the currently
;;;4426   					executing task so a yield is required. */
;;;4427   					taskYIELD_IF_USING_PREEMPTION();
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   			else
;;;4435   			{
;;;4436   				mtCOVERAGE_TEST_MARKER();
;;;4437   			}
;;;4438   		}
;;;4439   		taskEXIT_CRITICAL();
000088  ebfffffe          BL       vPortExitCritical
;;;4440   
;;;4441   		return xReturn;
00008c  e1a00006          MOV      r0,r6
;;;4442   	}
000090  e8bd81f0          POP      {r4-r8,pc}
                  |L39.148|
000094  e2840004          ADD      r0,r4,#4              ;4401
000098  ebfffffe          BL       uxListRemove
00009c  e59f5038          LDR      r5,|L39.220|
0000a0  e594002c          LDR      r0,[r4,#0x2c]         ;4402
0000a4  e5951010          LDR      r1,[r5,#0x10]         ;4402  ; uxTopReadyPriority
0000a8  e1500001          CMP      r0,r1                 ;4402
0000ac  85850010          STRHI    r0,[r5,#0x10]         ;4402  ; uxTopReadyPriority
0000b0  e59f1028          LDR      r1,|L39.224|
0000b4  e0800100          ADD      r0,r0,r0,LSL #2       ;4402
0000b8  e0810100          ADD      r0,r1,r0,LSL #2       ;4402
0000bc  e2841004          ADD      r1,r4,#4              ;4402
0000c0  ebfffffe          BL       vListInsertEnd
0000c4  e594002c          LDR      r0,[r4,#0x2c]         ;4423
0000c8  e5951000          LDR      r1,[r5,#0]            ;4423  ; pxCurrentTCB
0000cc  e591102c          LDR      r1,[r1,#0x2c]         ;4423
0000d0  e1500001          CMP      r0,r1                 ;4423
0000d4  8bfffffe          BLHI     vPortYield
0000d8  eaffffea          B        |L39.136|
;;;4443   
                          ENDP

                  |L39.220|
                          DCD      ||.data||
                  |L39.224|
                          DCD      ||.bss||

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4448   
;;;4449   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4450   	{
;;;4451   	TCB_t * pxTCB;
;;;4452   	uint8_t ucOriginalNotifyState;
;;;4453   	BaseType_t xReturn = pdPASS;
;;;4454   	UBaseType_t uxSavedInterruptStatus;
;;;4455   
;;;4456   		configASSERT( xTaskToNotify );
;;;4457   
;;;4458   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4459   		maximum	system call (or maximum API call) interrupt priority.
;;;4460   		Interrupts that are	above the maximum system call priority are keep
;;;4461   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4462   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4463   		is defined in FreeRTOSConfig.h then
;;;4464   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4465   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4466   		been assigned a priority above the configured maximum system call
;;;4467   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4468   		from interrupts	that have been assigned a priority at or (logically)
;;;4469   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4470   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4471   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4472   		provided on the following link:
;;;4473   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4474   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4475   
;;;4476   		pxTCB = ( TCB_t * ) xTaskToNotify;
;;;4477   
;;;4478   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;4479   		{
;;;4480   			if( pulPreviousNotificationValue != NULL )
000004  e3530000          CMP      r3,#0
000008  e1a04000          MOV      r4,r0                 ;4450
00000c  e59d6018          LDR      r6,[sp,#0x18]
;;;4481   			{
;;;4482   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000010  15940054          LDRNE    r0,[r4,#0x54]
000014  e3a05001          MOV      r5,#1                 ;4453
000018  15830000          STRNE    r0,[r3,#0]
;;;4483   			}
;;;4484   
;;;4485   			ucOriginalNotifyState = pxTCB->ucNotifyState;
00001c  e5d40058          LDRB     r0,[r4,#0x58]
;;;4486   			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
000020  e3a03002          MOV      r3,#2
000024  e5c43058          STRB     r3,[r4,#0x58]
;;;4487   
;;;4488   			switch( eAction )
000028  e3520005          CMP      r2,#5
00002c  308ff102          ADDCC    pc,pc,r2,LSL #2
000030  ea00000e          B        |L40.112|
000034  ea00000d          B        |L40.112|
000038  ea000002          B        |L40.72|
00003c  ea000004          B        |L40.84|
000040  ea000009          B        |L40.108|
000044  ea000005          B        |L40.96|
                  |L40.72|
;;;4489   			{
;;;4490   				case eSetBits	:
;;;4491   					pxTCB->ulNotifiedValue |= ulValue;
000048  e5942054          LDR      r2,[r4,#0x54]
00004c  e1811002          ORR      r1,r1,r2
;;;4492   					break;
000050  ea000005          B        |L40.108|
                  |L40.84|
;;;4493   
;;;4494   				case eIncrement	:
;;;4495   					( pxTCB->ulNotifiedValue )++;
000054  e5941054          LDR      r1,[r4,#0x54]
000058  e2811001          ADD      r1,r1,#1
;;;4496   					break;
00005c  ea000002          B        |L40.108|
                  |L40.96|
;;;4497   
;;;4498   				case eSetValueWithOverwrite	:
;;;4499   					pxTCB->ulNotifiedValue = ulValue;
;;;4500   					break;
;;;4501   
;;;4502   				case eSetValueWithoutOverwrite :
;;;4503   					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
000060  e3500002          CMP      r0,#2
;;;4504   					{
;;;4505   						pxTCB->ulNotifiedValue = ulValue;
;;;4506   					}
;;;4507   					else
;;;4508   					{
;;;4509   						/* The value could not be written to the task. */
;;;4510   						xReturn = pdFAIL;
000064  03a05000          MOVEQ    r5,#0
000068  0a000012          BEQ      |L40.184|
                  |L40.108|
00006c  e5841054          STR      r1,[r4,#0x54]         ;4505
                  |L40.112|
;;;4511   					}
;;;4512   					break;
;;;4513   
;;;4514   				case eNoAction :
;;;4515   					/* The task is being notified without its notify value being
;;;4516   					updated. */
;;;4517   					break;
;;;4518   			}
;;;4519   
;;;4520   			traceTASK_NOTIFY_FROM_ISR();
;;;4521   
;;;4522   			/* If the task is in the blocked state specifically to wait for a
;;;4523   			notification then unblock it now. */
;;;4524   			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
000070  e3500001          CMP      r0,#1
000074  1a00000f          BNE      |L40.184|
;;;4525   			{
;;;4526   				/* The task should not have been on an event list. */
;;;4527   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4528   
;;;4529   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000078  e59f706c          LDR      r7,|L40.236|
00007c  e5970030          LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
000080  e3500000          CMP      r0,#0
;;;4530   				{
;;;4531   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;4532   					prvAddTaskToReadyList( pxTCB );
;;;4533   				}
;;;4534   				else
;;;4535   				{
;;;4536   					/* The delayed and ready lists cannot be accessed, so hold
;;;4537   					this task pending until the scheduler is resumed. */
;;;4538   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000084  159f0064          LDRNE    r0,|L40.240|
000088  12841018          ADDNE    r1,r4,#0x18
00008c  0a00000b          BEQ      |L40.192|
                  |L40.144|
000090  ebfffffe          BL       vListInsertEnd
;;;4539   				}
;;;4540   
;;;4541   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000094  e594002c          LDR      r0,[r4,#0x2c]
000098  e5971000          LDR      r1,[r7,#0]  ; pxCurrentTCB
00009c  e591102c          LDR      r1,[r1,#0x2c]
0000a0  e1500001          CMP      r0,r1
0000a4  9a000003          BLS      |L40.184|
;;;4542   				{
;;;4543   					/* The notified task has a priority above the currently
;;;4544   					executing task so a yield is required. */
;;;4545   					if( pxHigherPriorityTaskWoken != NULL )
0000a8  e3560000          CMP      r6,#0
0000ac  e3a00001          MOV      r0,#1                 ;4453
;;;4546   					{
;;;4547   						*pxHigherPriorityTaskWoken = pdTRUE;
0000b0  15860000          STRNE    r0,[r6,#0]
;;;4548   					}
;;;4549   					else
;;;4550   					{
;;;4551   						/* Mark that a yield is pending in case the user is not
;;;4552   						using the "xHigherPriorityTaskWoken" parameter to an ISR
;;;4553   						safe FreeRTOS function. */
;;;4554   						xYieldPending = pdTRUE;
0000b4  0587001c          STREQ    r0,[r7,#0x1c]  ; xYieldPending
                  |L40.184|
;;;4555   					}
;;;4556   				}
;;;4557   				else
;;;4558   				{
;;;4559   					mtCOVERAGE_TEST_MARKER();
;;;4560   				}
;;;4561   			}
;;;4562   		}
;;;4563   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;4564   
;;;4565   		return xReturn;
0000b8  e1a00005          MOV      r0,r5
;;;4566   	}
0000bc  e8bd81f0          POP      {r4-r8,pc}
                  |L40.192|
0000c0  e2840004          ADD      r0,r4,#4              ;4531
0000c4  ebfffffe          BL       uxListRemove
0000c8  e594002c          LDR      r0,[r4,#0x2c]         ;4532
0000cc  e5971010          LDR      r1,[r7,#0x10]         ;4532  ; uxTopReadyPriority
0000d0  e1500001          CMP      r0,r1                 ;4532
0000d4  85870010          STRHI    r0,[r7,#0x10]         ;4532  ; uxTopReadyPriority
0000d8  e59f1014          LDR      r1,|L40.244|
0000dc  e0800100          ADD      r0,r0,r0,LSL #2       ;4532
0000e0  e0810100          ADD      r0,r1,r0,LSL #2       ;4532
0000e4  e2841004          ADD      r1,r4,#4              ;4532
0000e8  eaffffe8          B        |L40.144|
;;;4567   
                          ENDP

                  |L40.236|
                          DCD      ||.data||
                  |L40.240|
                          DCD      ||.bss||+0x78
                  |L40.244|
                          DCD      ||.bss||

                          AREA ||i.xTaskGetCurrentTaskHandle||, CODE, READONLY, ALIGN=2

                  xTaskGetCurrentTaskHandle PROC
;;;3660   
;;;3661   	TaskHandle_t xTaskGetCurrentTaskHandle( void )
000000  e59f0004          LDR      r0,|L41.12|
;;;3662   	{
;;;3663   	TaskHandle_t xReturn;
;;;3664   
;;;3665   		/* A critical section is not required as this is not called from
;;;3666   		an interrupt and the current TCB will always be the same for any
;;;3667   		individual execution thread. */
;;;3668   		xReturn = pxCurrentTCB;
000004  e5900000          LDR      r0,[r0,#0]  ; pxCurrentTCB
;;;3669   
;;;3670   		return xReturn;
;;;3671   	}
000008  e12fff1e          BX       lr
;;;3672   
                          ENDP

                  |L41.12|
                          DCD      ||.data||

                          AREA ||i.xTaskGetSchedulerState||, CODE, READONLY, ALIGN=2

                  xTaskGetSchedulerState PROC
;;;3677   
;;;3678   	BaseType_t xTaskGetSchedulerState( void )
000000  e59f0020          LDR      r0,|L42.40|
;;;3679   	{
;;;3680   	BaseType_t xReturn;
;;;3681   
;;;3682   		if( xSchedulerRunning == pdFALSE )
000004  e5901014          LDR      r1,[r0,#0x14]  ; xSchedulerRunning
000008  e3510000          CMP      r1,#0
;;;3683   		{
;;;3684   			xReturn = taskSCHEDULER_NOT_STARTED;
00000c  03a00001          MOVEQ    r0,#1
;;;3685   		}
;;;3686   		else
;;;3687   		{
;;;3688   			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
;;;3689   			{
;;;3690   				xReturn = taskSCHEDULER_RUNNING;
;;;3691   			}
;;;3692   			else
;;;3693   			{
;;;3694   				xReturn = taskSCHEDULER_SUSPENDED;
;;;3695   			}
;;;3696   		}
;;;3697   
;;;3698   		return xReturn;
;;;3699   	}
000010  012fff1e          BXEQ     lr
000014  e5900030          LDR      r0,[r0,#0x30]         ;3688  ; uxSchedulerSuspended
000018  e3500000          CMP      r0,#0                 ;3688
00001c  03a00002          MOVEQ    r0,#2                 ;3690
000020  13a00000          MOVNE    r0,#0                 ;3694
000024  e12fff1e          BX       lr
;;;3700   
                          ENDP

                  |L42.40|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;2126   
;;;2127   TickType_t xTaskGetTickCount( void )
000000  e92d4010          PUSH     {r4,lr}
;;;2128   {
;;;2129   TickType_t xTicks;
;;;2130   
;;;2131   	/* Critical section required if running on a 16 bit processor. */
;;;2132   	portTICK_TYPE_ENTER_CRITICAL();
000004  ebfffffe          BL       vPortEnterCritical
;;;2133   	{
;;;2134   		xTicks = xTickCount;
000008  e59f000c          LDR      r0,|L43.28|
00000c  e590400c          LDR      r4,[r0,#0xc]  ; xTickCount
;;;2135   	}
;;;2136   	portTICK_TYPE_EXIT_CRITICAL();
000010  ebfffffe          BL       vPortExitCritical
;;;2137   
;;;2138   	return xTicks;
000014  e1a00004          MOV      r0,r4
;;;2139   }
000018  e8bd8010          POP      {r4,pc}
;;;2140   /*-----------------------------------------------------------*/
                          ENDP

                  |L43.28|
                          DCD      ||.data||

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;2141   
;;;2142   TickType_t xTaskGetTickCountFromISR( void )
000000  e59f0004          LDR      r0,|L44.12|
;;;2143   {
;;;2144   TickType_t xReturn;
;;;2145   UBaseType_t uxSavedInterruptStatus;
;;;2146   
;;;2147   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;2148   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;2149   	above the maximum system call priority are kept permanently enabled, even
;;;2150   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;2151   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;2152   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;2153   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;2154   	assigned a priority above the configured maximum system call priority.
;;;2155   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;2156   	that have been assigned a priority at or (logically) below the maximum
;;;2157   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;2158   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;2159   	More information (albeit Cortex-M specific) is provided on the following
;;;2160   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;2161   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;2162   
;;;2163   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;2164   	{
;;;2165   		xReturn = xTickCount;
000004  e590000c          LDR      r0,[r0,#0xc]  ; xTickCount
;;;2166   	}
;;;2167   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;2168   
;;;2169   	return xReturn;
;;;2170   }
000008  e12fff1e          BX       lr
;;;2171   /*-----------------------------------------------------------*/
                          ENDP

                  |L44.12|
                          DCD      ||.data||

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;2498   
;;;2499   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2500   {
;;;2501   TCB_t * pxTCB;
;;;2502   TickType_t xItemValue;
;;;2503   BaseType_t xSwitchRequired = pdFALSE;
;;;2504   
;;;2505   	/* Called by the portable layer each time a tick interrupt occurs.
;;;2506   	Increments the tick then checks to see if the new tick value will cause any
;;;2507   	tasks to be unblocked. */
;;;2508   	traceTASK_INCREMENT_TICK( xTickCount );
;;;2509   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000004  e59f7108          LDR      r7,|L45.276|
000008  e3a06000          MOV      r6,#0                 ;2503
00000c  e5970030          LDR      r0,[r7,#0x30]  ; uxSchedulerSuspended
000010  e3500000          CMP      r0,#0
;;;2510   	{
;;;2511   		/* Minor optimisation.  The tick count cannot change in this
;;;2512   		block. */
;;;2513   		const TickType_t xConstTickCount = xTickCount + 1;
;;;2514   
;;;2515   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;2516   		delayed lists if it wraps to 0. */
;;;2517   		xTickCount = xConstTickCount;
;;;2518   
;;;2519   		if( xConstTickCount == ( TickType_t ) 0U )
;;;2520   		{
;;;2521   			taskSWITCH_DELAYED_LISTS();
;;;2522   		}
;;;2523   		else
;;;2524   		{
;;;2525   			mtCOVERAGE_TEST_MARKER();
;;;2526   		}
;;;2527   
;;;2528   		/* See if this tick has made a timeout expire.  Tasks are stored in
;;;2529   		the	queue in the order of their wake time - meaning once one task
;;;2530   		has been found whose block time has not expired there is no need to
;;;2531   		look any further down the list. */
;;;2532   		if( xConstTickCount >= xNextTaskUnblockTime )
;;;2533   		{
;;;2534   			for( ;; )
;;;2535   			{
;;;2536   				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
;;;2537   				{
;;;2538   					/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;2539   					to the maximum possible value so it is extremely
;;;2540   					unlikely that the
;;;2541   					if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;2542   					next time through. */
;;;2543   					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;2544   					break;
;;;2545   				}
;;;2546   				else
;;;2547   				{
;;;2548   					/* The delayed list is not empty, get the value of the
;;;2549   					item at the head of the delayed list.  This is the time
;;;2550   					at which the task at the head of the delayed list must
;;;2551   					be removed from the Blocked state. */
;;;2552   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
;;;2553   					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
;;;2554   
;;;2555   					if( xConstTickCount < xItemValue )
;;;2556   					{
;;;2557   						/* It is not time to unblock this item yet, but the
;;;2558   						item value is the time at which the task at the head
;;;2559   						of the blocked list must be removed from the Blocked
;;;2560   						state -	so record the item value in
;;;2561   						xNextTaskUnblockTime. */
;;;2562   						xNextTaskUnblockTime = xItemValue;
;;;2563   						break;
;;;2564   					}
;;;2565   					else
;;;2566   					{
;;;2567   						mtCOVERAGE_TEST_MARKER();
;;;2568   					}
;;;2569   
;;;2570   					/* It is time to remove the item from the Blocked state. */
;;;2571   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2572   
;;;2573   					/* Is the task waiting on an event also?  If so remove
;;;2574   					it from the event list. */
;;;2575   					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
;;;2576   					{
;;;2577   						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2578   					}
;;;2579   					else
;;;2580   					{
;;;2581   						mtCOVERAGE_TEST_MARKER();
;;;2582   					}
;;;2583   
;;;2584   					/* Place the unblocked task into the appropriate ready
;;;2585   					list. */
;;;2586   					prvAddTaskToReadyList( pxTCB );
;;;2587   
;;;2588   					/* A task being unblocked cannot cause an immediate
;;;2589   					context switch if preemption is turned off. */
;;;2590   					#if (  configUSE_PREEMPTION == 1 )
;;;2591   					{
;;;2592   						/* Preemption is on, but a context switch should
;;;2593   						only be performed if the unblocked task has a
;;;2594   						priority that is equal to or higher than the
;;;2595   						currently executing task. */
;;;2596   						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2597   						{
;;;2598   							xSwitchRequired = pdTRUE;
;;;2599   						}
;;;2600   						else
;;;2601   						{
;;;2602   							mtCOVERAGE_TEST_MARKER();
;;;2603   						}
;;;2604   					}
;;;2605   					#endif /* configUSE_PREEMPTION */
;;;2606   				}
;;;2607   			}
;;;2608   		}
;;;2609   
;;;2610   		/* Tasks of equal priority to the currently running task will share
;;;2611   		processing time (time slice) if preemption is on, and the application
;;;2612   		writer has not explicitly turned time slicing off. */
;;;2613   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2614   		{
;;;2615   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
;;;2616   			{
;;;2617   				xSwitchRequired = pdTRUE;
;;;2618   			}
;;;2619   			else
;;;2620   			{
;;;2621   				mtCOVERAGE_TEST_MARKER();
;;;2622   			}
;;;2623   		}
;;;2624   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2625   
;;;2626   		#if ( configUSE_TICK_HOOK == 1 )
;;;2627   		{
;;;2628   			/* Guard against the tick hook being called when the pended tick
;;;2629   			count is being unwound (when the scheduler is being unlocked). */
;;;2630   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2631   			{
;;;2632   				vApplicationTickHook();
;;;2633   			}
;;;2634   			else
;;;2635   			{
;;;2636   				mtCOVERAGE_TEST_MARKER();
;;;2637   			}
;;;2638   		}
;;;2639   		#endif /* configUSE_TICK_HOOK */
;;;2640   	}
;;;2641   	else
;;;2642   	{
;;;2643   		++uxPendedTicks;
000014  15970018          LDRNE    r0,[r7,#0x18]  ; uxPendedTicks
000018  12800001          ADDNE    r0,r0,#1
00001c  15870018          STRNE    r0,[r7,#0x18]  ; uxPendedTicks
000020  0a000004          BEQ      |L45.56|
                  |L45.36|
;;;2644   
;;;2645   		/* The tick hook gets called at regular intervals, even if the
;;;2646   		scheduler is locked. */
;;;2647   		#if ( configUSE_TICK_HOOK == 1 )
;;;2648   		{
;;;2649   			vApplicationTickHook();
;;;2650   		}
;;;2651   		#endif
;;;2652   	}
;;;2653   
;;;2654   	#if ( configUSE_PREEMPTION == 1 )
;;;2655   	{
;;;2656   		if( xYieldPending != pdFALSE )
000024  e597001c          LDR      r0,[r7,#0x1c]  ; xYieldPending
000028  e3500000          CMP      r0,#0
;;;2657   		{
;;;2658   			xSwitchRequired = pdTRUE;
00002c  13a06001          MOVNE    r6,#1
;;;2659   		}
;;;2660   		else
;;;2661   		{
;;;2662   			mtCOVERAGE_TEST_MARKER();
;;;2663   		}
;;;2664   	}
;;;2665   	#endif /* configUSE_PREEMPTION */
;;;2666   
;;;2667   	return xSwitchRequired;
000030  e1a00006          MOV      r0,r6
;;;2668   }
000034  e8bd81f0          POP      {r4-r8,pc}
                  |L45.56|
000038  e597000c          LDR      r0,[r7,#0xc]          ;2513  ; xTickCount
00003c  e2905001          ADDS     r5,r0,#1              ;2513
000040  e587500c          STR      r5,[r7,#0xc]          ;2517  ; xTickCount
000044  1a000007          BNE      |L45.104|
000048  e5970034          LDR      r0,[r7,#0x34]         ;2521  ; pxDelayedTaskList
00004c  e5971038          LDR      r1,[r7,#0x38]         ;2521  ; pxOverflowDelayedTaskList
000050  e5871034          STR      r1,[r7,#0x34]         ;2521  ; pxDelayedTaskList
000054  e5870038          STR      r0,[r7,#0x38]         ;2521  ; pxOverflowDelayedTaskList
000058  e5970020          LDR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
00005c  e2800001          ADD      r0,r0,#1              ;2521
000060  e5870020          STR      r0,[r7,#0x20]         ;2521  ; xNumOfOverflows
000064  ebfffffe          BL       prvResetNextTaskUnblockTime
                  |L45.104|
000068  e5970028          LDR      r0,[r7,#0x28]         ;2532  ; xNextTaskUnblockTime
00006c  e59f80a4          LDR      r8,|L45.280|
000070  e1550000          CMP      r5,r0                 ;2532
000074  3a00000b          BCC      |L45.168|
                  |L45.120|
000078  e5970034          LDR      r0,[r7,#0x34]         ;2536  ; pxDelayedTaskList
00007c  e5900000          LDR      r0,[r0,#0]            ;2536
000080  e3500000          CMP      r0,#0                 ;2536
000084  03e00000          MVNEQ    r0,#0                 ;2543
000088  0a000005          BEQ      |L45.164|
00008c  e5970034          LDR      r0,[r7,#0x34]         ;2552  ; pxDelayedTaskList
000090  e590000c          LDR      r0,[r0,#0xc]          ;2552
000094  e590400c          LDR      r4,[r0,#0xc]          ;2553
000098  e5940004          LDR      r0,[r4,#4]            ;2553
00009c  e1550000          CMP      r5,r0                 ;2555
0000a0  2a000007          BCS      |L45.196|
                  |L45.164|
0000a4  e5870028          STR      r0,[r7,#0x28]         ;2562  ; xNextTaskUnblockTime
                  |L45.168|
0000a8  e5970000          LDR      r0,[r7,#0]            ;2615  ; pxCurrentTCB
0000ac  e590002c          LDR      r0,[r0,#0x2c]         ;2615
0000b0  e0800100          ADD      r0,r0,r0,LSL #2       ;2615
0000b4  e7980100          LDR      r0,[r8,r0,LSL #2]     ;2615
0000b8  e3500001          CMP      r0,#1                 ;2615
0000bc  83a06001          MOVHI    r6,#1                 ;2617
0000c0  eaffffd7          B        |L45.36|
                  |L45.196|
0000c4  e2840004          ADD      r0,r4,#4              ;2571
0000c8  ebfffffe          BL       uxListRemove
0000cc  e5940028          LDR      r0,[r4,#0x28]         ;2575
0000d0  e3500000          CMP      r0,#0                 ;2575
0000d4  12840018          ADDNE    r0,r4,#0x18           ;2577
0000d8  1bfffffe          BLNE     uxListRemove
0000dc  e594102c          LDR      r1,[r4,#0x2c]         ;2586
0000e0  e5970010          LDR      r0,[r7,#0x10]         ;2586  ; uxTopReadyPriority
0000e4  e1510000          CMP      r1,r0                 ;2586
0000e8  85871010          STRHI    r1,[r7,#0x10]         ;2586  ; uxTopReadyPriority
0000ec  e0810101          ADD      r0,r1,r1,LSL #2       ;2586
0000f0  e0880100          ADD      r0,r8,r0,LSL #2       ;2586
0000f4  e2841004          ADD      r1,r4,#4              ;2586
0000f8  ebfffffe          BL       vListInsertEnd
0000fc  e594002c          LDR      r0,[r4,#0x2c]         ;2596
000100  e5971000          LDR      r1,[r7,#0]            ;2596  ; pxCurrentTCB
000104  e591102c          LDR      r1,[r1,#0x2c]         ;2596
000108  e1500001          CMP      r0,r1                 ;2596
00010c  23a06001          MOVCS    r6,#1                 ;2598
000110  eaffffd8          B        |L45.120|
;;;2669   /*-----------------------------------------------------------*/
                          ENDP

                  |L45.276|
                          DCD      ||.data||
                  |L45.280|
                          DCD      ||.bss||

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4661   
;;;4662   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  e3500000          CMP      r0,#0
;;;4663   	{
;;;4664   	TCB_t *pxTCB;
;;;4665   	BaseType_t xReturn;
;;;4666   
;;;4667   		/* If null is passed in here then it is the calling task that is having
;;;4668   		its notification state cleared. */
;;;4669   		pxTCB = prvGetTCBFromHandle( xTask );
000004  059f0030          LDREQ    r0,|L46.60|
000008  e92d4010          PUSH     {r4,lr}               ;4663
00000c  05904000          LDREQ    r4,[r0,#0]  ; pxCurrentTCB
000010  11a04000          MOVNE    r4,r0
;;;4670   
;;;4671   		taskENTER_CRITICAL();
000014  ebfffffe          BL       vPortEnterCritical
;;;4672   		{
;;;4673   			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
000018  e5d40058          LDRB     r0,[r4,#0x58]
00001c  e3500002          CMP      r0,#2
;;;4674   			{
;;;4675   				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
000020  03a00000          MOVEQ    r0,#0
000024  05c40058          STRBEQ   r0,[r4,#0x58]
;;;4676   				xReturn = pdPASS;
000028  03a04001          MOVEQ    r4,#1
;;;4677   			}
;;;4678   			else
;;;4679   			{
;;;4680   				xReturn = pdFAIL;
00002c  13a04000          MOVNE    r4,#0
;;;4681   			}
;;;4682   		}
;;;4683   		taskEXIT_CRITICAL();
000030  ebfffffe          BL       vPortExitCritical
;;;4684   
;;;4685   		return xReturn;
000034  e1a00004          MOV      r0,r4
;;;4686   	}
000038  e8bd8010          POP      {r4,pc}
;;;4687   
                          ENDP

                  |L46.60|
                          DCD      ||.data||

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4262   
;;;4263   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4264   	{
000004  e1a07003          MOV      r7,r3
000008  e1a04002          MOV      r4,r2
00000c  e1a06001          MOV      r6,r1
000010  e1a08000          MOV      r8,r0
;;;4265   	BaseType_t xReturn;
;;;4266   
;;;4267   		taskENTER_CRITICAL();
000014  ebfffffe          BL       vPortEnterCritical
;;;4268   		{
;;;4269   			/* Only block if a notification is not already pending. */
;;;4270   			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
000018  e59f5098          LDR      r5,|L47.184|
00001c  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
000020  e5d00058          LDRB     r0,[r0,#0x58]
000024  e3500002          CMP      r0,#2
000028  0a00000c          BEQ      |L47.96|
;;;4271   			{
;;;4272   				/* Clear bits in the task's notification value as bits may get
;;;4273   				set	by the notifying task or interrupt.  This can be used to
;;;4274   				clear the value to zero. */
;;;4275   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00002c  e595c000          LDR      r12,[r5,#0]  ; pxCurrentTCB
000030  e59c0054          LDR      r0,[r12,#0x54]
000034  e1c00008          BIC      r0,r0,r8
000038  e58c0054          STR      r0,[r12,#0x54]
;;;4276   
;;;4277   				/* Mark this task as waiting for a notification. */
;;;4278   				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
00003c  e5951000          LDR      r1,[r5,#0]  ; pxCurrentTCB
000040  e3a00001          MOV      r0,#1
000044  e5c10058          STRB     r0,[r1,#0x58]
;;;4279   
;;;4280   				if( xTicksToWait > ( TickType_t ) 0 )
000048  e3570000          CMP      r7,#0
00004c  0a000003          BEQ      |L47.96|
;;;4281   				{
;;;4282   					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
000050  e3a01001          MOV      r1,#1
000054  e1a00007          MOV      r0,r7
000058  ebfffffe          BL       prvAddCurrentTaskToDelayedList
;;;4283   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4284   
;;;4285   					/* All ports are written to allow a yield in a critical
;;;4286   					section (some will yield immediately, others wait until the
;;;4287   					critical section exits) - but it is not something that
;;;4288   					application code should ever do. */
;;;4289   					portYIELD_WITHIN_API();
00005c  ebfffffe          BL       vPortYield
                  |L47.96|
;;;4290   				}
;;;4291   				else
;;;4292   				{
;;;4293   					mtCOVERAGE_TEST_MARKER();
;;;4294   				}
;;;4295   			}
;;;4296   			else
;;;4297   			{
;;;4298   				mtCOVERAGE_TEST_MARKER();
;;;4299   			}
;;;4300   		}
;;;4301   		taskEXIT_CRITICAL();
000060  ebfffffe          BL       vPortExitCritical
;;;4302   
;;;4303   		taskENTER_CRITICAL();
000064  ebfffffe          BL       vPortEnterCritical
;;;4304   		{
;;;4305   			traceTASK_NOTIFY_WAIT();
;;;4306   
;;;4307   			if( pulNotificationValue != NULL )
000068  e3540000          CMP      r4,#0
;;;4308   			{
;;;4309   				/* Output the current notification value, which may or may not
;;;4310   				have changed. */
;;;4311   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
00006c  15950000          LDRNE    r0,[r5,#0]  ; pxCurrentTCB
000070  15900054          LDRNE    r0,[r0,#0x54]
000074  15840000          STRNE    r0,[r4,#0]
;;;4312   			}
;;;4313   
;;;4314   			/* If ucNotifyValue is set then either the task never entered the
;;;4315   			blocked state (because a notification was already pending) or the
;;;4316   			task unblocked because of a notification.  Otherwise the task
;;;4317   			unblocked because of a timeout. */
;;;4318   			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
000078  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
00007c  e5d00058          LDRB     r0,[r0,#0x58]
000080  e3500001          CMP      r0,#1
;;;4319   			{
;;;4320   				/* A notification was not received. */
;;;4321   				xReturn = pdFALSE;
000084  03a04000          MOVEQ    r4,#0
000088  0a000004          BEQ      |L47.160|
;;;4322   			}
;;;4323   			else
;;;4324   			{
;;;4325   				/* A notification was already pending or a notification was
;;;4326   				received while the task was waiting. */
;;;4327   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
00008c  e5950000          LDR      r0,[r5,#0]  ; pxCurrentTCB
000090  e5901054          LDR      r1,[r0,#0x54]
000094  e1c11006          BIC      r1,r1,r6
000098  e5801054          STR      r1,[r0,#0x54]
;;;4328   				xReturn = pdTRUE;
00009c  e3a04001          MOV      r4,#1
                  |L47.160|
;;;4329   			}
;;;4330   
;;;4331   			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
0000a0  e5951000          LDR      r1,[r5,#0]  ; pxCurrentTCB
0000a4  e3a00000          MOV      r0,#0
0000a8  e5c10058          STRB     r0,[r1,#0x58]
;;;4332   		}
;;;4333   		taskEXIT_CRITICAL();
0000ac  ebfffffe          BL       vPortExitCritical
;;;4334   
;;;4335   		return xReturn;
0000b0  e1a00004          MOV      r0,r4
;;;4336   	}
0000b4  e8bd81f0          POP      {r4-r8,pc}
;;;4337   
                          ENDP

                  |L47.184|
                          DCD      ||.data||

                          AREA ||i.xTaskPriorityDisinherit||, CODE, READONLY, ALIGN=2

                  xTaskPriorityDisinherit PROC
;;;3771   
;;;3772   	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
000000  e92d4010          PUSH     {r4,lr}
;;;3773   	{
000004  e1b04000          MOVS     r4,r0
;;;3774   	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
;;;3775   	BaseType_t xReturn = pdFALSE;
000008  e3a00000          MOV      r0,#0
;;;3776   
;;;3777   		if( pxMutexHolder != NULL )
;;;3778   		{
;;;3779   			/* A task can only have an inherited priority if it holds the mutex.
;;;3780   			If the mutex is held by a task then it cannot be given from an
;;;3781   			interrupt, and if a mutex is given by the holding task then it must
;;;3782   			be the running state task. */
;;;3783   			configASSERT( pxTCB == pxCurrentTCB );
;;;3784   
;;;3785   			configASSERT( pxTCB->uxMutexesHeld );
;;;3786   			( pxTCB->uxMutexesHeld )--;
;;;3787   
;;;3788   			/* Has the holder of the mutex inherited the priority of another
;;;3789   			task? */
;;;3790   			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
;;;3791   			{
;;;3792   				/* Only disinherit if no other mutexes are held. */
;;;3793   				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
;;;3794   				{
;;;3795   					/* A task can only have an inherited priority if it holds
;;;3796   					the mutex.  If the mutex is held by a task then it cannot be
;;;3797   					given from an interrupt, and if a mutex is given by the
;;;3798   					holding	task then it must be the running state task.  Remove
;;;3799   					the	holding task from the ready	list. */
;;;3800   					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
;;;3801   					{
;;;3802   						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
;;;3803   					}
;;;3804   					else
;;;3805   					{
;;;3806   						mtCOVERAGE_TEST_MARKER();
;;;3807   					}
;;;3808   
;;;3809   					/* Disinherit the priority before adding the task into the
;;;3810   					new	ready list. */
;;;3811   					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
;;;3812   					pxTCB->uxPriority = pxTCB->uxBasePriority;
;;;3813   
;;;3814   					/* Reset the event list item value.  It cannot be in use for
;;;3815   					any other purpose if this task is running, and it must be
;;;3816   					running to give back the mutex. */
;;;3817   					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;3818   					prvAddTaskToReadyList( pxTCB );
;;;3819   
;;;3820   					/* Return true to indicate that a context switch is required.
;;;3821   					This is only actually required in the corner case whereby
;;;3822   					multiple mutexes were held and the mutexes were given back
;;;3823   					in an order different to that in which they were taken.
;;;3824   					If a context switch did not occur when the first mutex was
;;;3825   					returned, even if a task was waiting on it, then a context
;;;3826   					switch should occur when the last mutex is returned whether
;;;3827   					a task is waiting on it or not. */
;;;3828   					xReturn = pdTRUE;
;;;3829   				}
;;;3830   				else
;;;3831   				{
;;;3832   					mtCOVERAGE_TEST_MARKER();
;;;3833   				}
;;;3834   			}
;;;3835   			else
;;;3836   			{
;;;3837   				mtCOVERAGE_TEST_MARKER();
;;;3838   			}
;;;3839   		}
;;;3840   		else
;;;3841   		{
;;;3842   			mtCOVERAGE_TEST_MARKER();
;;;3843   		}
;;;3844   
;;;3845   		return xReturn;
;;;3846   	}
00000c  08bd8010          POPEQ    {r4,pc}
000010  e5941050          LDR      r1,[r4,#0x50]         ;3786
000014  e2411001          SUB      r1,r1,#1              ;3786
000018  e5841050          STR      r1,[r4,#0x50]         ;3790
00001c  e594202c          LDR      r2,[r4,#0x2c]         ;3790
000020  e594304c          LDR      r3,[r4,#0x4c]         ;3790
000024  e1520003          CMP      r2,r3                 ;3790
000028  08bd8010          POPEQ    {r4,pc}
00002c  e3510000          CMP      r1,#0                 ;3793
000030  18bd8010          POPNE    {r4,pc}
000034  e2840004          ADD      r0,r4,#4              ;3800
000038  ebfffffe          BL       uxListRemove
00003c  e594004c          LDR      r0,[r4,#0x4c]         ;3812
000040  e59f1034          LDR      r1,|L48.124|
000044  e584002c          STR      r0,[r4,#0x2c]         ;3812
000048  e2600004          RSB      r0,r0,#4              ;3817
00004c  e5840018          STR      r0,[r4,#0x18]         ;3818
000050  e594002c          LDR      r0,[r4,#0x2c]         ;3818
000054  e5912010          LDR      r2,[r1,#0x10]         ;3818  ; uxTopReadyPriority
000058  e1500002          CMP      r0,r2                 ;3818
00005c  85810010          STRHI    r0,[r1,#0x10]         ;3818  ; uxTopReadyPriority
000060  e59f1018          LDR      r1,|L48.128|
000064  e0800100          ADD      r0,r0,r0,LSL #2       ;3818
000068  e0810100          ADD      r0,r1,r0,LSL #2       ;3818
00006c  e2841004          ADD      r1,r4,#4              ;3818
000070  ebfffffe          BL       vListInsertEnd
000074  e3a00001          MOV      r0,#1                 ;3828
000078  e8bd8010          POP      {r4,pc}
;;;3847   
                          ENDP

                  |L48.124|
                          DCD      ||.data||
                  |L48.128|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2893   
;;;2894   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;2895   {
;;;2896   TCB_t *pxUnblockedTCB;
;;;2897   BaseType_t xReturn;
;;;2898   
;;;2899   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2900   	called from a critical section within an ISR. */
;;;2901   
;;;2902   	/* The event list is sorted in priority order, so the first in the list can
;;;2903   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2904   	the delayed list, and add it to the ready list.
;;;2905   
;;;2906   	If an event is for a queue that is locked then this function will never
;;;2907   	get called - the lock count on the queue will get modified instead.  This
;;;2908   	means exclusive access to the event list is guaranteed here.
;;;2909   
;;;2910   	This function assumes that a check has already been made to ensure that
;;;2911   	pxEventList is not empty. */
;;;2912   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  e590000c          LDR      r0,[r0,#0xc]
000008  e590400c          LDR      r4,[r0,#0xc]
;;;2913   	configASSERT( pxUnblockedTCB );
;;;2914   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
00000c  e2840018          ADD      r0,r4,#0x18
000010  ebfffffe          BL       uxListRemove
;;;2915   
;;;2916   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000014  e59f5064          LDR      r5,|L49.128|
000018  e5950030          LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
00001c  e3500000          CMP      r0,#0
;;;2917   	{
;;;2918   		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
;;;2919   		prvAddTaskToReadyList( pxUnblockedTCB );
;;;2920   	}
;;;2921   	else
;;;2922   	{
;;;2923   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2924   		pending until the scheduler is resumed. */
;;;2925   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
000020  159f005c          LDRNE    r0,|L49.132|
000024  12841018          ADDNE    r1,r4,#0x18
000028  0a000009          BEQ      |L49.84|
                  |L49.44|
00002c  ebfffffe          BL       vListInsertEnd
;;;2926   	}
;;;2927   
;;;2928   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000030  e594002c          LDR      r0,[r4,#0x2c]
000034  e5951000          LDR      r1,[r5,#0]  ; pxCurrentTCB
000038  e591102c          LDR      r1,[r1,#0x2c]
00003c  e1500001          CMP      r0,r1
;;;2929   	{
;;;2930   		/* Return true if the task removed from the event list has a higher
;;;2931   		priority than the calling task.  This allows the calling task to know if
;;;2932   		it should force a context switch now. */
;;;2933   		xReturn = pdTRUE;
000040  83a00001          MOVHI    r0,#1
;;;2934   
;;;2935   		/* Mark that a yield is pending in case the user is not using the
;;;2936   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2937   		xYieldPending = pdTRUE;
000044  81a01000          MOVHI    r1,r0
000048  8585001c          STRHI    r0,[r5,#0x1c]  ; xYieldPending
;;;2938   	}
;;;2939   	else
;;;2940   	{
;;;2941   		xReturn = pdFALSE;
00004c  93a00000          MOVLS    r0,#0
;;;2942   	}
;;;2943   
;;;2944   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2945   	{
;;;2946   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2947   		might be set to the blocked task's time out time.  If the task is
;;;2948   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2949   		normally left unchanged, because it is automatically reset to a new
;;;2950   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2951   		tickless idling is used it might be more important to enter sleep mode
;;;2952   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2953   		ensure it is updated at the earliest possible time. */
;;;2954   		prvResetNextTaskUnblockTime();
;;;2955   	}
;;;2956   	#endif
;;;2957   
;;;2958   	return xReturn;
;;;2959   }
000050  e8bd8070          POP      {r4-r6,pc}
                  |L49.84|
000054  e2840004          ADD      r0,r4,#4              ;2918
000058  ebfffffe          BL       uxListRemove
00005c  e594002c          LDR      r0,[r4,#0x2c]         ;2919
000060  e5951010          LDR      r1,[r5,#0x10]         ;2919  ; uxTopReadyPriority
000064  e1500001          CMP      r0,r1                 ;2919
000068  85850010          STRHI    r0,[r5,#0x10]         ;2919  ; uxTopReadyPriority
00006c  e0801100          ADD      r1,r0,r0,LSL #2       ;2919
000070  e59f0010          LDR      r0,|L49.136|
000074  e0800101          ADD      r0,r0,r1,LSL #2       ;2919
000078  e2841004          ADD      r1,r4,#4              ;2919
00007c  eaffffea          B        |L49.44|
;;;2960   /*-----------------------------------------------------------*/
                          ENDP

                  |L49.128|
                          DCD      ||.data||
                  |L49.132|
                          DCD      ||.bss||+0x78
                  |L49.136|
                          DCD      ||.bss||

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2961   
;;;2962   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;2963   {
;;;2964   TCB_t *pxUnblockedTCB;
;;;2965   BaseType_t xReturn;
;;;2966   
;;;2967   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2968   	the event flags implementation. */
;;;2969   	configASSERT( uxSchedulerSuspended != pdFALSE );
;;;2970   
;;;2971   	/* Store the new item value in the event list. */
;;;2972   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000004  e3811102          ORR      r1,r1,#0x80000000
;;;2973   
;;;2974   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2975   	event flags. */
;;;2976   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
000008  e5801000          STR      r1,[r0,#0]
00000c  e590400c          LDR      r4,[r0,#0xc]
;;;2977   	configASSERT( pxUnblockedTCB );
;;;2978   	( void ) uxListRemove( pxEventListItem );
000010  ebfffffe          BL       uxListRemove
;;;2979   
;;;2980   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2981   	scheduler is suspended so interrupts will not be accessing the ready
;;;2982   	lists. */
;;;2983   	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
000014  e2840004          ADD      r0,r4,#4
000018  ebfffffe          BL       uxListRemove
;;;2984   	prvAddTaskToReadyList( pxUnblockedTCB );
00001c  e59f5044          LDR      r5,|L50.104|
000020  e594002c          LDR      r0,[r4,#0x2c]
000024  e5951010          LDR      r1,[r5,#0x10]  ; uxTopReadyPriority
000028  e1500001          CMP      r0,r1
00002c  85850010          STRHI    r0,[r5,#0x10]  ; uxTopReadyPriority
000030  e59f1034          LDR      r1,|L50.108|
000034  e0800100          ADD      r0,r0,r0,LSL #2
000038  e0810100          ADD      r0,r1,r0,LSL #2
00003c  e2841004          ADD      r1,r4,#4
000040  ebfffffe          BL       vListInsertEnd
;;;2985   
;;;2986   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000044  e594002c          LDR      r0,[r4,#0x2c]
000048  e5951000          LDR      r1,[r5,#0]  ; pxCurrentTCB
00004c  e591102c          LDR      r1,[r1,#0x2c]
000050  e1500001          CMP      r0,r1
;;;2987   	{
;;;2988   		/* Return true if the task removed from the event list has
;;;2989   		a higher priority than the calling task.  This allows
;;;2990   		the calling task to know if it should force a context
;;;2991   		switch now. */
;;;2992   		xReturn = pdTRUE;
000054  83a00001          MOVHI    r0,#1
;;;2993   
;;;2994   		/* Mark that a yield is pending in case the user is not using the
;;;2995   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2996   		xYieldPending = pdTRUE;
000058  81a01000          MOVHI    r1,r0
00005c  8585001c          STRHI    r0,[r5,#0x1c]  ; xYieldPending
;;;2997   	}
;;;2998   	else
;;;2999   	{
;;;3000   		xReturn = pdFALSE;
000060  93a00000          MOVLS    r0,#0
;;;3001   	}
;;;3002   
;;;3003   	return xReturn;
;;;3004   }
000064  e8bd8070          POP      {r4-r6,pc}
;;;3005   /*-----------------------------------------------------------*/
                          ENDP

                  |L50.104|
                          DCD      ||.data||
                  |L50.108|
                          DCD      ||.bss||

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;2016   
;;;2017   BaseType_t xTaskResumeAll( void )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2018   {
;;;2019   TCB_t *pxTCB = NULL;
000004  e3a04000          MOV      r4,#0
;;;2020   BaseType_t xAlreadyYielded = pdFALSE;
000008  e1a07004          MOV      r7,r4
;;;2021   
;;;2022   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;2023   	previous call to vTaskSuspendAll(). */
;;;2024   	configASSERT( uxSchedulerSuspended );
;;;2025   
;;;2026   	/* It is possible that an ISR caused a task to be removed from an event
;;;2027   	list while the scheduler was suspended.  If this was the case then the
;;;2028   	removed task will have been added to the xPendingReadyList.  Once the
;;;2029   	scheduler has been resumed it is safe to move all the pending ready
;;;2030   	tasks from this list into their appropriate ready list. */
;;;2031   	taskENTER_CRITICAL();
00000c  ebfffffe          BL       vPortEnterCritical
;;;2032   	{
;;;2033   		--uxSchedulerSuspended;
000010  e59f50d4          LDR      r5,|L51.236|
000014  e5950030          LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000018  e2400001          SUB      r0,r0,#1
00001c  e5850030          STR      r0,[r5,#0x30]  ; uxSchedulerSuspended
;;;2034   
;;;2035   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000020  e5950030          LDR      r0,[r5,#0x30]  ; uxSchedulerSuspended
000024  e3500000          CMP      r0,#0
000028  1a00002c          BNE      |L51.224|
;;;2036   		{
;;;2037   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
00002c  e5950008          LDR      r0,[r5,#8]  ; uxCurrentNumberOfTasks
;;;2038   			{
;;;2039   				/* Move any readied tasks from the pending list into the
;;;2040   				appropriate ready list. */
;;;2041   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
;;;2042   				{
;;;2043   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
000030  e59f80b8          LDR      r8,|L51.240|
000034  e3500000          CMP      r0,#0                 ;2037
;;;2044   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
;;;2045   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;2046   					prvAddTaskToReadyList( pxTCB );
;;;2047   
;;;2048   					/* If the moved task has a priority higher than the current
;;;2049   					task then a yield must be performed. */
;;;2050   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;2051   					{
;;;2052   						xYieldPending = pdTRUE;
000038  e3a06001          MOV      r6,#1
00003c  12489078          SUBNE    r9,r8,#0x78           ;2046
000040  0a000026          BEQ      |L51.224|
                  |L51.68|
000044  e5980000          LDR      r0,[r8,#0]            ;2041  ; xPendingReadyList
000048  e3500000          CMP      r0,#0                 ;2041
00004c  0a000013          BEQ      |L51.160|
000050  e598000c          LDR      r0,[r8,#0xc]          ;2043  ; xPendingReadyList
000054  e590400c          LDR      r4,[r0,#0xc]          ;2043
000058  e2840018          ADD      r0,r4,#0x18           ;2044
00005c  ebfffffe          BL       uxListRemove
000060  e2840004          ADD      r0,r4,#4              ;2045
000064  ebfffffe          BL       uxListRemove
000068  e594102c          LDR      r1,[r4,#0x2c]         ;2046
00006c  e5950010          LDR      r0,[r5,#0x10]         ;2046  ; uxTopReadyPriority
000070  e1510000          CMP      r1,r0                 ;2046
000074  85851010          STRHI    r1,[r5,#0x10]         ;2046  ; uxTopReadyPriority
000078  e0810101          ADD      r0,r1,r1,LSL #2       ;2046
00007c  e0890100          ADD      r0,r9,r0,LSL #2       ;2046
000080  e2841004          ADD      r1,r4,#4              ;2046
000084  ebfffffe          BL       vListInsertEnd
000088  e594002c          LDR      r0,[r4,#0x2c]         ;2050
00008c  e5951000          LDR      r1,[r5,#0]            ;2050  ; pxCurrentTCB
000090  e591102c          LDR      r1,[r1,#0x2c]         ;2050
000094  e1500001          CMP      r0,r1                 ;2050
000098  2585601c          STRCS    r6,[r5,#0x1c]  ; xYieldPending
00009c  eaffffe8          B        |L51.68|
                  |L51.160|
;;;2053   					}
;;;2054   					else
;;;2055   					{
;;;2056   						mtCOVERAGE_TEST_MARKER();
;;;2057   					}
;;;2058   				}
;;;2059   
;;;2060   				if( pxTCB != NULL )
0000a0  e3540000          CMP      r4,#0
;;;2061   				{
;;;2062   					/* A task was unblocked while the scheduler was suspended,
;;;2063   					which may have prevented the next unblock time from being
;;;2064   					re-calculated, in which case re-calculate it now.  Mainly
;;;2065   					important for low power tickless implementations, where
;;;2066   					this can prevent an unnecessary exit from low power
;;;2067   					state. */
;;;2068   					prvResetNextTaskUnblockTime();
0000a4  1bfffffe          BLNE     prvResetNextTaskUnblockTime
;;;2069   				}
;;;2070   
;;;2071   				/* If any ticks occurred while the scheduler was suspended then
;;;2072   				they should be processed now.  This ensures the tick count does
;;;2073   				not	slip, and that any delayed tasks are resumed at the correct
;;;2074   				time. */
;;;2075   				{
;;;2076   					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
0000a8  e5954018          LDR      r4,[r5,#0x18]  ; uxPendedTicks
;;;2077   
;;;2078   					if( uxPendedCounts > ( UBaseType_t ) 0U )
0000ac  e3540000          CMP      r4,#0
0000b0  0a000006          BEQ      |L51.208|
                  |L51.180|
;;;2079   					{
;;;2080   						do
;;;2081   						{
;;;2082   							if( xTaskIncrementTick() != pdFALSE )
0000b4  ebfffffe          BL       xTaskIncrementTick
0000b8  e3500000          CMP      r0,#0
;;;2083   							{
;;;2084   								xYieldPending = pdTRUE;
0000bc  1585601c          STRNE    r6,[r5,#0x1c]  ; xYieldPending
0000c0  e2544001          SUBS     r4,r4,#1
;;;2085   							}
;;;2086   							else
;;;2087   							{
;;;2088   								mtCOVERAGE_TEST_MARKER();
;;;2089   							}
;;;2090   							--uxPendedCounts;
;;;2091   						} while( uxPendedCounts > ( UBaseType_t ) 0U );
;;;2092   
;;;2093   						uxPendedTicks = 0;
0000c4  03a00000          MOVEQ    r0,#0
0000c8  05850018          STREQ    r0,[r5,#0x18]  ; uxPendedTicks
0000cc  1afffff8          BNE      |L51.180|
                  |L51.208|
;;;2094   					}
;;;2095   					else
;;;2096   					{
;;;2097   						mtCOVERAGE_TEST_MARKER();
;;;2098   					}
;;;2099   				}
;;;2100   
;;;2101   				if( xYieldPending != pdFALSE )
0000d0  e595001c          LDR      r0,[r5,#0x1c]  ; xYieldPending
0000d4  e3500000          CMP      r0,#0
;;;2102   				{
;;;2103   					#if( configUSE_PREEMPTION != 0 )
;;;2104   					{
;;;2105   						xAlreadyYielded = pdTRUE;
0000d8  13a07001          MOVNE    r7,#1
;;;2106   					}
;;;2107   					#endif
;;;2108   					taskYIELD_IF_USING_PREEMPTION();
0000dc  1bfffffe          BLNE     vPortYield
                  |L51.224|
;;;2109   				}
;;;2110   				else
;;;2111   				{
;;;2112   					mtCOVERAGE_TEST_MARKER();
;;;2113   				}
;;;2114   			}
;;;2115   		}
;;;2116   		else
;;;2117   		{
;;;2118   			mtCOVERAGE_TEST_MARKER();
;;;2119   		}
;;;2120   	}
;;;2121   	taskEXIT_CRITICAL();
0000e0  ebfffffe          BL       vPortExitCritical
;;;2122   
;;;2123   	return xAlreadyYielded;
0000e4  e1a00007          MOV      r0,r7
;;;2124   }
0000e8  e8bd87f0          POP      {r4-r10,pc}
;;;2125   /*-----------------------------------------------------------*/
                          ENDP

                  |L51.236|
                          DCD      ||.data||
                  |L51.240|
                          DCD      ||.bss||+0x78

                          AREA ||i.xTaskResumeFromISR||, CODE, READONLY, ALIGN=2

                  xTaskResumeFromISR PROC
;;;1755   
;;;1756   	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1757   	{
000004  e1a04000          MOV      r4,r0
;;;1758   	BaseType_t xYieldRequired = pdFALSE;
000008  e3a05000          MOV      r5,#0
;;;1759   	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
;;;1760   	UBaseType_t uxSavedInterruptStatus;
;;;1761   
;;;1762   		configASSERT( xTaskToResume );
;;;1763   
;;;1764   		/* RTOS ports that support interrupt nesting have the concept of a
;;;1765   		maximum	system call (or maximum API call) interrupt priority.
;;;1766   		Interrupts that are	above the maximum system call priority are keep
;;;1767   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;1768   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;1769   		is defined in FreeRTOSConfig.h then
;;;1770   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1771   		failure if a FreeRTOS API function is called from an interrupt that has
;;;1772   		been assigned a priority above the configured maximum system call
;;;1773   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;1774   		from interrupts	that have been assigned a priority at or (logically)
;;;1775   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;1776   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;1777   		simple as possible.  More information (albeit Cortex-M specific) is
;;;1778   		provided on the following link:
;;;1779   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1780   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1781   
;;;1782   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1783   		{
;;;1784   			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
00000c  ebfffffe          BL       prvTaskIsTaskSuspended
000010  e3500000          CMP      r0,#0
000014  0a000006          BEQ      |L52.52|
;;;1785   			{
;;;1786   				traceTASK_RESUME_FROM_ISR( pxTCB );
;;;1787   
;;;1788   				/* Check the ready lists can be accessed. */
;;;1789   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000018  e59f605c          LDR      r6,|L52.124|
00001c  e5960030          LDR      r0,[r6,#0x30]  ; uxSchedulerSuspended
000020  e3500000          CMP      r0,#0
;;;1790   				{
;;;1791   					/* Ready lists can be accessed so move the task from the
;;;1792   					suspended list to the ready list directly. */
;;;1793   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
;;;1794   					{
;;;1795   						xYieldRequired = pdTRUE;
;;;1796   					}
;;;1797   					else
;;;1798   					{
;;;1799   						mtCOVERAGE_TEST_MARKER();
;;;1800   					}
;;;1801   
;;;1802   					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
;;;1803   					prvAddTaskToReadyList( pxTCB );
;;;1804   				}
;;;1805   				else
;;;1806   				{
;;;1807   					/* The delayed or ready lists cannot be accessed so the task
;;;1808   					is held in the pending ready list until the scheduler is
;;;1809   					unsuspended. */
;;;1810   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000024  159f0054          LDRNE    r0,|L52.128|
000028  12841018          ADDNE    r1,r4,#0x18
00002c  0a000002          BEQ      |L52.60|
                  |L52.48|
000030  ebfffffe          BL       vListInsertEnd
                  |L52.52|
;;;1811   				}
;;;1812   			}
;;;1813   			else
;;;1814   			{
;;;1815   				mtCOVERAGE_TEST_MARKER();
;;;1816   			}
;;;1817   		}
;;;1818   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1819   
;;;1820   		return xYieldRequired;
000034  e1a00005          MOV      r0,r5
;;;1821   	}
000038  e8bd8070          POP      {r4-r6,pc}
                  |L52.60|
00003c  e594002c          LDR      r0,[r4,#0x2c]         ;1793
000040  e5961000          LDR      r1,[r6,#0]            ;1793  ; pxCurrentTCB
000044  e591102c          LDR      r1,[r1,#0x2c]         ;1793
000048  e1500001          CMP      r0,r1                 ;1793
00004c  23a05001          MOVCS    r5,#1                 ;1795
000050  e2840004          ADD      r0,r4,#4              ;1802
000054  ebfffffe          BL       uxListRemove
000058  e594002c          LDR      r0,[r4,#0x2c]         ;1803
00005c  e5961010          LDR      r1,[r6,#0x10]         ;1803  ; uxTopReadyPriority
000060  e1500001          CMP      r0,r1                 ;1803
000064  85860010          STRHI    r0,[r6,#0x10]         ;1803  ; uxTopReadyPriority
000068  e59f1014          LDR      r1,|L52.132|
00006c  e0800100          ADD      r0,r0,r0,LSL #2       ;1803
000070  e0810100          ADD      r0,r1,r0,LSL #2       ;1803
000074  e2841004          ADD      r1,r4,#4              ;1803
000078  eaffffec          B        |L52.48|
;;;1822   
                          ENDP

                  |L52.124|
                          DCD      ||.data||
                  |L52.128|
                          DCD      ||.bss||+0x78
                  |L52.132|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        80
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20
                  xSuspendedTaskList
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  uxDeletedTasksWaitingCleanUp
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  xIdleTaskHandle
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
