; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spi.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spi.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\spi.crf ..\..\..\Driver\Source\spi.c]
                          ARM

                          AREA ||i.spi0ISR||, CODE, READONLY, ALIGN=2

                  spi0ISR PROC
;;;51       */
;;;52     static void spi0ISR(void)
000000  e59f001c          LDR      r0,|L1.36|
;;;53     {
;;;54         // clear interrupt flag
;;;55         outpw(REG_SPI0_CNTRL, spi_in((spi_dev *)((uint32_t)&spi_device[0]), CNTRL) | 0x1 << 16);
000004  e5901000          LDR      r1,[r0,#0]  ; spi_device
000008  e5911000          LDR      r1,[r1,#0]
00000c  e59f2014          LDR      r2,|L1.40|
000010  e3811801          ORR      r1,r1,#0x10000
000014  e5821200          STR      r1,[r2,#0x200]
;;;56         spi_device[0].intflag = 1;
000018  e3a01001          MOV      r1,#1
00001c  e5c01005          STRB     r1,[r0,#5]  ; spi_device
;;;57     }
000020  e12fff1e          BX       lr
;;;58     
                          ENDP

                  |L1.36|
                          DCD      ||.bss||
                  |L1.40|
                          DCD      0xb8006000

                          AREA ||i.spi1ISR||, CODE, READONLY, ALIGN=2

                  spi1ISR PROC
;;;63       */
;;;64     static void spi1ISR(void)
000000  e59f001c          LDR      r0,|L2.36|
;;;65     {
;;;66         // clear interrupt flag
;;;67         outpw(REG_SPI1_CNTRL, spi_in((spi_dev *)((uint32_t)&spi_device[1]), CNTRL) | 0x1 << 16);
000004  e5901008          LDR      r1,[r0,#8]  ; spi_device
000008  e5911000          LDR      r1,[r1,#0]
00000c  e59f2014          LDR      r2,|L2.40|
000010  e3811801          ORR      r1,r1,#0x10000
000014  e5821300          STR      r1,[r2,#0x300]
;;;68         spi_device[1].intflag = 1;
000018  e3a01001          MOV      r1,#1
00001c  e5c0100d          STRB     r1,[r0,#0xd]  ; spi_device
;;;69     }
000020  e12fff1e          BX       lr
;;;70     
                          ENDP

                  |L2.36|
                          DCD      ||.bss||
                  |L2.40|
                          DCD      0xb8006000

                          AREA ||i.spiGetBusyStatus||, CODE, READONLY, ALIGN=2

                  spiGetBusyStatus PROC
;;;304      */
;;;305    uint8_t spiGetBusyStatus(int32_t fd)
000000  e59f102c          LDR      r1,|L3.52|
;;;306    {
;;;307        spi_dev *dev;
;;;308    
;;;309        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
000004  e0810180          ADD      r0,r1,r0,LSL #3
;;;310    
;;;311        if(spi_in(dev, CNTRL) & (0x1 << 17))
000008  e5901000          LDR      r1,[r0,#0]
00000c  e5912000          LDR      r2,[r1,#0]
000010  e3120802          TST      r2,#0x20000
;;;312            return (!dev->intflag);
;;;313        else
;;;314            return (( spi_in(dev, CNTRL) & 0x1) == 0x1 ? 1:0);
000014  05910000          LDREQ    r0,[r1,#0]
000018  02000001          ANDEQ    r0,r0,#1
;;;315    }
00001c  012fff1e          BXEQ     lr
000020  e5d00005          LDRB     r0,[r0,#5]            ;312
000024  e3500000          CMP      r0,#0                 ;312
000028  03a00001          MOVEQ    r0,#1                 ;312
00002c  13a00000          MOVNE    r0,#0                 ;312
000030  e12fff1e          BX       lr
;;;316    
                          ENDP

                  |L3.52|
                          DCD      ||.bss||

                          AREA ||i.spiInit||, CODE, READONLY, ALIGN=2

                  spiInit PROC
;;;91       */
;;;92     int32_t  spiInit(int32_t fd)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;93     {
;;;94         if(fd == 0) {
;;;95             sysInstallISR(IRQ_LEVEL_1, SPI0_IRQn, (PVOID)spi0ISR);
;;;96             sysEnableInterrupt(SPI0_IRQn);
;;;97             memset((void *)&spi_device[0], 0, sizeof(spi_dev));
000004  e59f505c          LDR      r5,|L4.104|
000008  e3500000          CMP      r0,#0                 ;94
00000c  e3a04000          MOV      r4,#0                 ;93
000010  0a00000b          BEQ      |L4.68|
;;;98         } else {
;;;99             sysInstallISR(IRQ_LEVEL_1, SPI1_IRQn, (PVOID)spi1ISR);
000014  e59f2050          LDR      r2,|L4.108|
000018  e3a01034          MOV      r1,#0x34
00001c  e3a00001          MOV      r0,#1
000020  ebfffffe          BL       sysInstallISR
;;;100            sysEnableInterrupt(SPI1_IRQn);
000024  e3a00034          MOV      r0,#0x34
000028  ebfffffe          BL       sysEnableInterrupt
;;;101            memset((void *)&spi_device[1], 0, sizeof(spi_dev));
00002c  e5854008          STR      r4,[r5,#8]  ; spi_device
000030  e585400c          STR      r4,[r5,#0xc]  ; spi_device
                  |L4.52|
;;;102        }
;;;103    
;;;104        sysSetLocalInterrupt(ENABLE_IRQ);
000034  e3a0007f          MOV      r0,#0x7f
000038  ebfffffe          BL       sysSetLocalInterrupt
;;;105    
;;;106        return(0);
00003c  e3a00000          MOV      r0,#0
;;;107    }
000040  e8bd8070          POP      {r4-r6,pc}
                  |L4.68|
000044  e59f2024          LDR      r2,|L4.112|
000048  e3a01033          MOV      r1,#0x33              ;95
00004c  e3a00001          MOV      r0,#1                 ;95
000050  ebfffffe          BL       sysInstallISR
000054  e3a00033          MOV      r0,#0x33              ;96
000058  ebfffffe          BL       sysEnableInterrupt
00005c  e5854000          STR      r4,[r5,#0]            ;97  ; spi_device
000060  e5854004          STR      r4,[r5,#4]            ;97  ; spi_device
000064  eafffff2          B        |L4.52|
;;;108    
                          ENDP

                  |L4.104|
                          DCD      ||.bss||
                  |L4.108|
                          DCD      spi1ISR
                  |L4.112|
                          DCD      spi0ISR

                          AREA ||i.spiIoctl||, CODE, READONLY, ALIGN=2

                  spiIoctl PROC
;;;120      */
;;;121    int32_t spiIoctl(int32_t fd, uint32_t cmd, uint32_t arg0, uint32_t arg1)
000000  e3500000          CMP      r0,#0
;;;122    {
;;;123        spi_dev *dev;
;;;124    
;;;125        if(fd != 0 && fd != 1)
000004  13500001          CMPNE    r0,#1
000008  e92d4010          PUSH     {r4,lr}               ;122
;;;126            return(SPI_ERR_NODEV);
00000c  13e00000          MVNNE    r0,#0
;;;127    
;;;128        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;129        if(dev->openflag == 0)
;;;130            return(SPI_ERR_IO);
;;;131    
;;;132        switch(cmd) {
;;;133            case SPI_IOC_TRIGGER:
;;;134                dev->intflag = 0;
;;;135                spi_out(dev, spi_in(dev, CNTRL) | 0x1 ,CNTRL);
;;;136                break;
;;;137    
;;;138            case SPI_IOC_SET_INTERRUPT:
;;;139                if(arg0 == SPI_ENABLE_INTERRUPT)
;;;140                    spi_out(dev, spi_in(dev, CNTRL) | (0x1<<17) ,CNTRL);
;;;141                else
;;;142                    spi_out(dev, spi_in(dev, CNTRL) & ~(0x1<<17) ,CNTRL);
;;;143                break;
;;;144    
;;;145            case SPI_IOC_SET_SPEED:
;;;146                spiSetSpeed(dev, (uint32_t)arg0);
;;;147                break;
;;;148    
;;;149            case SPI_IOC_SET_DUAL_QUAD_MODE:
;;;150                if(arg0 == SPI_DISABLE_DUAL_QUAD) {
;;;151                    spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) ,CNTRL);
;;;152                    break;
;;;153                }
;;;154    
;;;155                if(arg0 == SPI_DUAL_MODE)
;;;156                    spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) | (0x1 << 22) ,CNTRL);
;;;157                else
;;;158                    spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 21)) | (0x1 << 21) ,CNTRL);
;;;159                break;
;;;160    
;;;161            case SPI_IOC_SET_DUAL_QUAD_DIR:
;;;162                if(arg0 == SPI_DUAL_QUAD_INPUT)
;;;163                    spi_out(dev, spi_in(dev, CNTRL) & ~(0x1 << 20) ,CNTRL);
;;;164                else
;;;165                    spi_out(dev, spi_in(dev, CNTRL) | (0x1 << 20) ,CNTRL);
;;;166                break;
;;;167    
;;;168            case SPI_IOC_SET_LSB_MSB:
;;;169                if(arg0 == SPI_MSB)
;;;170                    spi_out(dev, spi_in(dev, CNTRL) & ~(0x1 << 10) ,CNTRL);
;;;171                else
;;;172                    spi_out(dev, spi_in(dev, CNTRL) | (0x1 << 10) ,CNTRL);
;;;173                break;
;;;174    
;;;175            case SPI_IOC_SET_TX_NUM:
;;;176                if(arg0 < 4)
;;;177                    spi_out(dev, (spi_in(dev, CNTRL) & ~(0x3 << 8)) | (arg0 << 8) ,CNTRL);
;;;178                else
;;;179                    return SPI_ERR_ARG;
;;;180                break;
;;;181    
;;;182            case SPI_IOC_SET_TX_BITLEN:
;;;183                if(arg0 < 32)
;;;184                    spi_out(dev, (spi_in(dev, CNTRL) & ~(0x1f << 3)) | (arg0 << 3) ,CNTRL);
;;;185                else
;;;186                    return SPI_ERR_ARG;
;;;187                break;
;;;188    
;;;189            case SPI_IOC_SET_MODE:
;;;190                if(arg0 > SPI_MODE_3)
;;;191                    return SPI_ERR_ARG;
;;;192    
;;;193                if(arg0 == SPI_MODE_0)
;;;194                    spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | (1<<2) ,CNTRL);
;;;195                else if(arg0 == SPI_MODE_1)
;;;196                    spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | (1<<1) ,CNTRL);
;;;197                else if(arg0 == SPI_MODE_2)
;;;198                    spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | ((1UL<<31) | (1<<2)) ,CNTRL);
;;;199                else
;;;200                    spi_out(dev, (spi_in(dev, CNTRL) & ~((0x3<<1) | (1UL<<31))) | ((1UL<<31) | (1<<1)) ,CNTRL);
;;;201                break;
;;;202    
;;;203            case SPI_IOC_ENABLE_SS:
;;;204                if(arg0 == SPI_SS_SS0)
;;;205                    spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x1 ,SSR);
;;;206                else if(arg0 == SPI_SS_SS1)
;;;207                    spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x2 ,SSR);
;;;208                else if(arg0 == SPI_SS_BOTH)
;;;209                    spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) | 0x3 ,SSR);
;;;210                else
;;;211                    return SPI_ERR_ARG;
;;;212                break;
;;;213    
;;;214            case SPI_IOC_DISABLE_SS:
;;;215                if(arg0 == SPI_SS_SS0)
;;;216                    spi_out(dev, (spi_in(dev, SSR) & ~(0x1)) ,SSR);
;;;217                else if(arg0 == SPI_SS_SS1)
;;;218                    spi_out(dev, (spi_in(dev, SSR) & ~(0x2)) ,SSR);
;;;219                else if(arg0 == SPI_SS_BOTH)
;;;220                    spi_out(dev, (spi_in(dev, SSR) & ~(0x3)) ,SSR);
;;;221                else
;;;222                    return SPI_ERR_ARG;
;;;223                break;
;;;224    
;;;225            case SPI_IOC_SET_AUTOSS:
;;;226                if(arg0 == SPI_DISABLE_AUTOSS)
;;;227                    spi_out(dev, spi_in(dev, SSR) & ~(0x1 << 3) ,SSR);
;;;228                else
;;;229                    spi_out(dev, spi_in(dev, SSR) | (0x1 << 3) ,SSR);
;;;230                break;
;;;231    
;;;232            case SPI_IOC_SET_SS_ACTIVE_LEVEL:
;;;233                if(arg0 == SPI_SS_ACTIVE_LOW)
;;;234                    spi_out(dev, spi_in(dev, SSR) & ~(0x1 << 2) ,SSR);
;;;235                else
;;;236                    spi_out(dev, spi_in(dev, SSR) | (0x1 << 2) ,SSR);
;;;237            default:
;;;238                break;
;;;239        }
;;;240    
;;;241        return 0;
;;;242    }
000010  18bd8010          POPNE    {r4,pc}
000014  e59f3268          LDR      r3,|L5.644|
000018  e0834180          ADD      r4,r3,r0,LSL #3       ;128
00001c  e5d40004          LDRB     r0,[r4,#4]            ;129
000020  e3500000          CMP      r0,#0                 ;129
000024  03e00002          MVNEQ    r0,#2                 ;130
000028  08bd8010          POPEQ    {r4,pc}
00002c  e351000d          CMP      r1,#0xd               ;132
000030  308ff101          ADDCC    pc,pc,r1,LSL #2       ;132
000034  ea000073          B        |L5.520|
000038  ea00000b          B        |L5.108|
00003c  ea000010          B        |L5.132|
000040  ea000015          B        |L5.156|
000044  ea00001d          B        |L5.192|
000048  ea000028          B        |L5.240|
00004c  ea00002d          B        |L5.264|
000050  ea000032          B        |L5.288|
000054  ea000038          B        |L5.316|
000058  ea00003e          B        |L5.344|
00005c  ea000055          B        |L5.440|
000060  ea00006a          B        |L5.528|
000064  ea00007a          B        |L5.596|
000068  ea00007f          B        |L5.620|
                  |L5.108|
00006c  e3a00000          MOV      r0,#0                 ;134
000070  e5c40005          STRB     r0,[r4,#5]            ;134
000074  e5940000          LDR      r0,[r4,#0]            ;135
000078  e5901000          LDR      r1,[r0,#0]            ;135
00007c  e3811001          ORR      r1,r1,#1              ;135
000080  ea000040          B        |L5.392|
                  |L5.132|
000084  e5940000          LDR      r0,[r4,#0]            ;142
000088  e3520001          CMP      r2,#1                 ;139
00008c  e5901000          LDR      r1,[r0,#0]            ;142
000090  03811802          ORREQ    r1,r1,#0x20000        ;140
000094  13c11802          BICNE    r1,r1,#0x20000        ;142
000098  ea00003a          B        |L5.392|
                  |L5.156|
00009c  e59f01e4          LDR      r0,|L5.648|
0000a0  e1a01082          LSL      r1,r2,#1              ;139
0000a4  ebfffffe          BL       __aeabi_uidivmod
0000a8  e2400001          SUB      r0,r0,#1              ;139
0000ac  e5941000          LDR      r1,[r4,#0]            ;139
0000b0  e1a00800          LSL      r0,r0,#16             ;139
0000b4  e1a00820          LSR      r0,r0,#16             ;139
0000b8  e5810004          STR      r0,[r1,#4]            ;139
0000bc  ea000051          B        |L5.520|
                  |L5.192|
0000c0  e3520000          CMP      r2,#0                 ;150
0000c4  05940000          LDREQ    r0,[r4,#0]            ;151
0000c8  05901000          LDREQ    r1,[r0,#0]            ;151
0000cc  03c11606          BICEQ    r1,r1,#0x600000       ;151
0000d0  0a00002c          BEQ      |L5.392|
0000d4  e5940000          LDR      r0,[r4,#0]            ;158
0000d8  e3520001          CMP      r2,#1                 ;155
0000dc  e5901000          LDR      r1,[r0,#0]            ;158
0000e0  e3c11606          BIC      r1,r1,#0x600000       ;158
0000e4  03811501          ORREQ    r1,r1,#0x400000       ;156
0000e8  13811602          ORRNE    r1,r1,#0x200000       ;158
0000ec  ea000025          B        |L5.392|
                  |L5.240|
0000f0  e5940000          LDR      r0,[r4,#0]            ;165
0000f4  e3520000          CMP      r2,#0                 ;162
0000f8  e5901000          LDR      r1,[r0,#0]            ;165
0000fc  03c11601          BICEQ    r1,r1,#0x100000       ;163
000100  13811601          ORRNE    r1,r1,#0x100000       ;165
000104  ea00001f          B        |L5.392|
                  |L5.264|
000108  e5940000          LDR      r0,[r4,#0]            ;172
00010c  e3520000          CMP      r2,#0                 ;169
000110  e5901000          LDR      r1,[r0,#0]            ;172
000114  03c11b01          BICEQ    r1,r1,#0x400          ;170
000118  13811b01          ORRNE    r1,r1,#0x400          ;172
00011c  ea000019          B        |L5.392|
                  |L5.288|
000120  e3520004          CMP      r2,#4                 ;176
000124  2a000048          BCS      |L5.588|
000128  e5940000          LDR      r0,[r4,#0]            ;177
00012c  e5901000          LDR      r1,[r0,#0]            ;177
000130  e3c11c03          BIC      r1,r1,#0x300          ;177
000134  e1811402          ORR      r1,r1,r2,LSL #8       ;177
000138  ea000012          B        |L5.392|
                  |L5.316|
00013c  e3520020          CMP      r2,#0x20              ;183
000140  2a000041          BCS      |L5.588|
000144  e5940000          LDR      r0,[r4,#0]            ;184
000148  e5901000          LDR      r1,[r0,#0]            ;184
00014c  e3c110f8          BIC      r1,r1,#0xf8           ;184
000150  e1811182          ORR      r1,r1,r2,LSL #3       ;184
000154  ea00000b          B        |L5.392|
                  |L5.344|
000158  e3520003          CMP      r2,#3                 ;190
00015c  8a00003a          BHI      |L5.588|
000160  e3520000          CMP      r2,#0                 ;193
000164  0a000009          BEQ      |L5.400|
000168  e3520001          CMP      r2,#1                 ;195
00016c  0a00000c          BEQ      |L5.420|
000170  e5940000          LDR      r0,[r4,#0]            ;200
000174  e3520002          CMP      r2,#2                 ;197
000178  e5901000          LDR      r1,[r0,#0]            ;200
00017c  e3c1111a          BIC      r1,r1,#0x80000006     ;200
000180  03811112          ORREQ    r1,r1,#0x80000004     ;198
000184  1381110a          ORRNE    r1,r1,#0x80000002     ;200
                  |L5.392|
000188  e5801000          STR      r1,[r0,#0]            ;198
00018c  ea00001d          B        |L5.520|
                  |L5.400|
000190  e5940000          LDR      r0,[r4,#0]            ;194
000194  e5901000          LDR      r1,[r0,#0]            ;194
000198  e3c1111a          BIC      r1,r1,#0x80000006     ;194
00019c  e3811004          ORR      r1,r1,#4              ;194
0001a0  eafffff8          B        |L5.392|
                  |L5.420|
0001a4  e5940000          LDR      r0,[r4,#0]            ;196
0001a8  e5901000          LDR      r1,[r0,#0]            ;196
0001ac  e3c1111a          BIC      r1,r1,#0x80000006     ;196
0001b0  e3811002          ORR      r1,r1,#2              ;196
0001b4  eafffff3          B        |L5.392|
                  |L5.440|
0001b8  e3520000          CMP      r2,#0                 ;204
0001bc  0a000007          BEQ      |L5.480|
0001c0  e3520001          CMP      r2,#1                 ;206
0001c4  0a00000a          BEQ      |L5.500|
0001c8  e3520002          CMP      r2,#2                 ;208
0001cc  05940000          LDREQ    r0,[r4,#0]            ;209
0001d0  05901008          LDREQ    r1,[r0,#8]            ;209
0001d4  03811003          ORREQ    r1,r1,#3              ;209
0001d8  0a000009          BEQ      |L5.516|
0001dc  ea00001a          B        |L5.588|
                  |L5.480|
0001e0  e5940000          LDR      r0,[r4,#0]            ;205
0001e4  e5901008          LDR      r1,[r0,#8]            ;205
0001e8  e3c11003          BIC      r1,r1,#3              ;205
0001ec  e3811001          ORR      r1,r1,#1              ;205
0001f0  ea000003          B        |L5.516|
                  |L5.500|
0001f4  e5940000          LDR      r0,[r4,#0]            ;207
0001f8  e5901008          LDR      r1,[r0,#8]            ;207
0001fc  e3c11003          BIC      r1,r1,#3              ;207
000200  e3811002          ORR      r1,r1,#2              ;207
                  |L5.516|
000204  e5801008          STR      r1,[r0,#8]            ;234
                  |L5.520|
000208  e3a00000          MOV      r0,#0                 ;241
00020c  e8bd8010          POP      {r4,pc}
                  |L5.528|
000210  e3520000          CMP      r2,#0                 ;215
000214  05940000          LDREQ    r0,[r4,#0]            ;216
000218  05901008          LDREQ    r1,[r0,#8]            ;216
00021c  03c11001          BICEQ    r1,r1,#1              ;216
000220  0afffff7          BEQ      |L5.516|
000224  e3520001          CMP      r2,#1                 ;217
000228  05940000          LDREQ    r0,[r4,#0]            ;218
00022c  05901008          LDREQ    r1,[r0,#8]            ;218
000230  03c11002          BICEQ    r1,r1,#2              ;218
000234  0afffff2          BEQ      |L5.516|
000238  e3520002          CMP      r2,#2                 ;219
00023c  05940000          LDREQ    r0,[r4,#0]            ;220
000240  05901008          LDREQ    r1,[r0,#8]            ;220
000244  03c11003          BICEQ    r1,r1,#3              ;220
000248  0affffed          BEQ      |L5.516|
                  |L5.588|
00024c  e3e00003          MVN      r0,#3                 ;222
000250  e8bd8010          POP      {r4,pc}
                  |L5.596|
000254  e5940000          LDR      r0,[r4,#0]            ;229
000258  e3520000          CMP      r2,#0                 ;226
00025c  e5901008          LDR      r1,[r0,#8]            ;229
000260  03c11008          BICEQ    r1,r1,#8              ;227
000264  13811008          ORRNE    r1,r1,#8              ;229
000268  eaffffe5          B        |L5.516|
                  |L5.620|
00026c  e5940000          LDR      r0,[r4,#0]            ;236
000270  e3520000          CMP      r2,#0                 ;233
000274  e5901008          LDR      r1,[r0,#8]            ;236
000278  03c11004          BICEQ    r1,r1,#4              ;234
00027c  13811004          ORRNE    r1,r1,#4              ;236
000280  eaffffdf          B        |L5.516|
;;;243    
                          ENDP

                  |L5.644|
                          DCD      ||.bss||
                  |L5.648|
                          DCD      0x047868c0

                          AREA ||i.spiOpen||, CODE, READONLY, ALIGN=2

                  spiOpen PROC
;;;249      */
;;;250    int spiOpen(int32_t fd)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;251    {
;;;252        spi_dev *dev;
;;;253    
;;;254        if( (uint32_t)fd >= SPI_NUMBER)
000004  e3500002          CMP      r0,#2
;;;255            return SPI_ERR_NODEV;
000008  23e00000          MVNCS    r0,#0
;;;256    
;;;257        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;258    
;;;259        if( dev->openflag != 0 )        /* a card slot can open only once */
;;;260            return(SPI_ERR_BUSY);
;;;261    
;;;262        /* Enable engine clock */
;;;263        if((uint32_t)fd == 0)
;;;264            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x10);
;;;265        else
;;;266            outpw(REG_CLK_PCLKEN1, inpw(REG_CLK_PCLKEN1) | 0x20);
;;;267    
;;;268        /* Unlock write-protect */
;;;269        do {
;;;270            outpw(REG_SYS_REGWPCTL, 0x59);
;;;271            outpw(REG_SYS_REGWPCTL, 0x16);
;;;272            outpw(REG_SYS_REGWPCTL, 0x88);
;;;273        } while (inpw(REG_SYS_REGWPCTL) != 1);
;;;274    
;;;275        /* Reset SPI */
;;;276        if((uint32_t)fd == 0) {
;;;277            outpw(REG_SYS_APBIPRST1, inpw(REG_SYS_APBIPRST1) | 0x10);
;;;278            outpw(REG_SYS_APBIPRST1, inpw(REG_SYS_APBIPRST1) & ~0x10);
;;;279            while(inpw(REG_SYS_APBIPRST1) & 0x10) {}
;;;280        }
;;;281        else {
;;;282            outpw(REG_SYS_APBIPRST1, inpw(REG_SYS_APBIPRST1) | 0x20);
;;;283            outpw(REG_SYS_APBIPRST1, inpw(REG_SYS_APBIPRST1) & ~0x20);
;;;284            while(inpw(REG_SYS_APBIPRST1) & 0x20) {}
;;;285        }
;;;286    
;;;287        /* Lock write protect */
;;;288        outpw(REG_SYS_REGWPCTL, 0x0);
;;;289    
;;;290        memset(dev, 0, sizeof(spi_dev));
;;;291        dev->base = ((uint32_t)fd) ? SPI1_BA : SPI0_BA;
;;;292        dev->openflag = 1;
;;;293        dev->intflag = 0;
;;;294    
;;;295        return 0;
;;;296    }
00000c  28bd8030          POPCS    {r4,r5,pc}
000010  e59f10c4          LDR      r1,|L6.220|
000014  e0811180          ADD      r1,r1,r0,LSL #3       ;257
000018  e5d12004          LDRB     r2,[r1,#4]            ;259
00001c  e3520000          CMP      r2,#0                 ;259
000020  13e00001          MVNNE    r0,#1                 ;260
000024  18bd8030          POPNE    {r4,r5,pc}
000028  e3a0220b          MOV      r2,#0xb0000000        ;264
00002c  e592321c          LDR      r3,[r2,#0x21c]        ;266
000030  e3500000          CMP      r0,#0                 ;263
000034  03833010          ORREQ    r3,r3,#0x10           ;264
000038  13833020          ORRNE    r3,r3,#0x20           ;266
00003c  e582321c          STR      r3,[r2,#0x21c]        ;266
000040  e3a03059          MOV      r3,#0x59              ;270
000044  e3a0c016          MOV      r12,#0x16             ;271
000048  e3a04088          MOV      r4,#0x88              ;272
                  |L6.76|
00004c  e58231fc          STR      r3,[r2,#0x1fc]        ;270
000050  e582c1fc          STR      r12,[r2,#0x1fc]       ;271
000054  e58241fc          STR      r4,[r2,#0x1fc]        ;272
000058  e59251fc          LDR      r5,[r2,#0x1fc]        ;273
00005c  e3550001          CMP      r5,#1                 ;273
000060  1afffff9          BNE      |L6.76|
000064  e5923068          LDR      r3,[r2,#0x68]         ;282
000068  e3500000          CMP      r0,#0                 ;276
00006c  13833020          ORRNE    r3,r3,#0x20           ;282
000070  03833010          ORREQ    r3,r3,#0x10           ;277
000074  e5823068          STR      r3,[r2,#0x68]         ;277
000078  e5923068          LDR      r3,[r2,#0x68]         ;278
00007c  13c33020          BICNE    r3,r3,#0x20           ;283
000080  03c33010          BICEQ    r3,r3,#0x10           ;278
000084  e5823068          STR      r3,[r2,#0x68]         ;278
000088  0a00000f          BEQ      |L6.204|
                  |L6.140|
00008c  e5923068          LDR      r3,[r2,#0x68]         ;284
000090  e3130020          TST      r3,#0x20              ;284
000094  1afffffc          BNE      |L6.140|
                  |L6.152|
000098  e3a03000          MOV      r3,#0                 ;288
00009c  e58231fc          STR      r3,[r2,#0x1fc]        ;288
0000a0  e3500000          CMP      r0,#0                 ;291
0000a4  159f0034          LDRNE    r0,|L6.224|
0000a8  059f0034          LDREQ    r0,|L6.228|
0000ac  e5813000          STR      r3,[r1,#0]            ;290
0000b0  e5813004          STR      r3,[r1,#4]            ;291
0000b4  e5810000          STR      r0,[r1,#0]            ;291
0000b8  e3a00001          MOV      r0,#1                 ;292
0000bc  e5c10004          STRB     r0,[r1,#4]            ;292
0000c0  e3a00000          MOV      r0,#0                 ;295
0000c4  e5c13005          STRB     r3,[r1,#5]            ;293
0000c8  e8bd8030          POP      {r4,r5,pc}
                  |L6.204|
0000cc  e5923068          LDR      r3,[r2,#0x68]         ;279
0000d0  e3130010          TST      r3,#0x10              ;279
0000d4  1afffffc          BNE      |L6.204|
0000d8  eaffffee          B        |L6.152|
;;;297    
                          ENDP

                  |L6.220|
                          DCD      ||.bss||
                  |L6.224|
                          DCD      0xb8006300
                  |L6.228|
                          DCD      0xb8006200

                          AREA ||i.spiRead||, CODE, READONLY, ALIGN=2

                  spiRead PROC
;;;322      */
;;;323    uint32_t spiRead(int32_t fd, uint8_t buff_id)
000000  e59f200c          LDR      r2,|L7.20|
;;;324    {
;;;325        spi_dev *dev;
;;;326    
;;;327        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;328        return spi_in(dev, (RX0+4*buff_id));
000004  e7920180          LDR      r0,[r2,r0,LSL #3]
000008  e0800101          ADD      r0,r0,r1,LSL #2
00000c  e5900010          LDR      r0,[r0,#0x10]
;;;329    }
000010  e12fff1e          BX       lr
;;;330    
                          ENDP

                  |L7.20|
                          DCD      ||.bss||

                          AREA ||i.spiWrite||, CODE, READONLY, ALIGN=2

                  spiWrite PROC
;;;337      */
;;;338    void spiWrite(int32_t fd, uint8_t buff_id, uint32_t data)
000000  e59f300c          LDR      r3,|L8.20|
;;;339    {
;;;340        spi_dev *dev;
;;;341    
;;;342        dev = (spi_dev *)((uint32_t)&spi_device[fd]);
;;;343        spi_out(dev, data, (TX0+4*buff_id));
000004  e7930180          LDR      r0,[r3,r0,LSL #3]
000008  e0800101          ADD      r0,r0,r1,LSL #2
00000c  e5802010          STR      r2,[r0,#0x10]
;;;344    }
000010  e12fff1e          BX       lr
;;;345    
                          ENDP

                  |L8.20|
                          DCD      ||.bss||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  spi_device
                          %        16
