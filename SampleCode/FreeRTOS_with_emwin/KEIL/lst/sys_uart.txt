; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys_uart.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_uart.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\sys_uart.crf ..\..\..\Driver\Source\sys_uart.c]
                          ARM

                          AREA ||i.FormatItem||, CODE, READONLY, ALIGN=2

                  FormatItem PROC
;;;118    
;;;119    static INT8 *FormatItem(INT8 *f, INT a)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;120    {
000004  e1a05000          MOV      r5,r0
;;;121        INT8   c;
;;;122        INT    fieldwidth = 0;
;;;123        INT    leftjust = FALSE;
;;;124        INT    radix = 0;
;;;125        INT8   fill = ' ';
;;;126    
;;;127        if (*f == '0')
000008  e5d00000          LDRB     r0,[r0,#0]
00000c  e3a04000          MOV      r4,#0                 ;122
000010  e1a08001          MOV      r8,r1                 ;120
000014  e3500030          CMP      r0,#0x30
000018  e3a07020          MOV      r7,#0x20              ;125
00001c  e1a06004          MOV      r6,r4                 ;123
000020  e1a01004          MOV      r1,r4                 ;124
;;;128            fill = '0';
000024  03a07030          MOVEQ    r7,#0x30
000028  ea00004d          B        |L1.356|
                  |L1.44|
;;;129    
;;;130        while ((c = *f++) != 0) {
;;;131            if (c >= '0' && c <= '9') {
00002c  e2402030          SUB      r2,r0,#0x30
000030  e3520009          CMP      r2,#9
;;;132                fieldwidth = (fieldwidth * 10) + (c - '0');
000034  90842104          ADDLS    r2,r4,r4,LSL #2
000038  90800082          ADDLS    r0,r0,r2,LSL #1
00003c  92404030          SUBLS    r4,r0,#0x30
000040  9a000023          BLS      |L1.212|
;;;133            } else if (c == 'l')
000044  e350006c          CMP      r0,#0x6c
000048  0a000045          BEQ      |L1.356|
;;;134                continue;
;;;135            else
;;;136                switch (c) {
00004c  e3500064          CMP      r0,#0x64
000050  0a00003f          BEQ      |L1.340|
000054  ca00000e          BGT      |L1.148|
000058  e350002d          CMP      r0,#0x2d
;;;137                    case '\000':
;;;138                        return (--f);
;;;139                    case '%':
;;;140                        _PutChar_f('%');
;;;141                        return (f);
;;;142                    case '-':
;;;143                        leftjust = TRUE;
00005c  03a06001          MOVEQ    r6,#1
000060  0a00001b          BEQ      |L1.212|
000064  ca000005          BGT      |L1.128|
000068  e3500000          CMP      r0,#0                 ;136
00006c  02450001          SUBEQ    r0,r5,#1              ;138
;;;144                        break;
;;;145                    case 'c': {
;;;146                        if (leftjust)
;;;147                            _PutChar_f(a & 0x7f);
;;;148    
;;;149                        if (fieldwidth > 0)
;;;150                            sysPutRepChar(fill, fieldwidth - 1);
;;;151    
;;;152                        if (!leftjust)
;;;153                            _PutChar_f(a & 0x7f);
;;;154                        return (f);
;;;155                    }
;;;156                    case 's': {
;;;157                        if (leftjust)
;;;158                            sysPutString((PINT8)a);
;;;159    
;;;160                        if (fieldwidth > strlen((PINT8)a))
;;;161                            sysPutRepChar(fill, fieldwidth - strlen((PINT8)a));
;;;162    
;;;163                        if (!leftjust)
;;;164                            sysPutString((PINT8)a);
;;;165                        return (f);
;;;166                    }
;;;167                    case 'd':
;;;168                    case 'i':
;;;169                        radix = -10;
;;;170                        break;
;;;171                    case 'u':
;;;172                        radix = 10;
;;;173                        break;
;;;174                    case 'x':
;;;175                        radix = 16;
;;;176                        break;
;;;177                    case 'X':
;;;178                        radix = 16;
;;;179                        break;
;;;180                    case 'o':
;;;181                        radix = 8;
;;;182                        break;
;;;183                    default:
;;;184                        radix = 3;
;;;185                        break;      /* unknown switch! */
;;;186                }
;;;187            if (radix)
;;;188                break;
;;;189        }
;;;190    
;;;191        if (leftjust)
;;;192            fieldwidth = -fieldwidth;
;;;193    
;;;194        sysPutNumber(a, radix, fieldwidth, fill);
;;;195    
;;;196        return (f);
;;;197    }
000070  08bd81f0          POPEQ    {r4-r8,pc}
000074  e3500025          CMP      r0,#0x25              ;136
000078  0a000022          BEQ      |L1.264|
00007c  ea000012          B        |L1.204|
                  |L1.128|
000080  e3500058          CMP      r0,#0x58              ;136
000084  0a000034          BEQ      |L1.348|
000088  e3500063          CMP      r0,#0x63              ;136
00008c  0a000013          BEQ      |L1.224|
000090  ea00000d          B        |L1.204|
                  |L1.148|
000094  e3500073          CMP      r0,#0x73              ;136
000098  0a00001c          BEQ      |L1.272|
00009c  ca000005          BGT      |L1.184|
0000a0  e3500069          CMP      r0,#0x69              ;136
0000a4  0a00002a          BEQ      |L1.340|
0000a8  e350006f          CMP      r0,#0x6f              ;136
0000ac  03a01008          MOVEQ    r1,#8                 ;181
0000b0  0a00002e          BEQ      |L1.368|
0000b4  ea000004          B        |L1.204|
                  |L1.184|
0000b8  e3500075          CMP      r0,#0x75              ;136
0000bc  03a0100a          MOVEQ    r1,#0xa               ;172
0000c0  0a00002a          BEQ      |L1.368|
0000c4  e3500078          CMP      r0,#0x78              ;136
0000c8  0a000023          BEQ      |L1.348|
                  |L1.204|
0000cc  e3a01003          MOV      r1,#3                 ;184
0000d0  ea000026          B        |L1.368|
                  |L1.212|
0000d4  e3510000          CMP      r1,#0                 ;187
0000d8  0a000021          BEQ      |L1.356|
0000dc  ea000023          B        |L1.368|
                  |L1.224|
0000e0  e3560000          CMP      r6,#0                 ;146
0000e4  1208007f          ANDNE    r0,r8,#0x7f           ;147
0000e8  1bfffffe          BLNE     _PutChar_f
0000ec  e3540000          CMP      r4,#0                 ;149
0000f0  c2441001          SUBGT    r1,r4,#1              ;150
0000f4  c1a00007          MOVGT    r0,r7                 ;150
0000f8  cbfffffe          BLGT     sysPutRepChar
0000fc  e3560000          CMP      r6,#0                 ;152
000100  0208007f          ANDEQ    r0,r8,#0x7f           ;153
000104  1a000010          BNE      |L1.332|
                  |L1.264|
000108  ebfffffe          BL       _PutChar_f
00010c  ea00000e          B        |L1.332|
                  |L1.272|
000110  e3560000          CMP      r6,#0                 ;157
000114  11a00008          MOVNE    r0,r8                 ;158
000118  1bfffffe          BLNE     sysPutString
00011c  e1a00008          MOV      r0,r8                 ;160
000120  ebfffffe          BL       strlen
000124  e1500004          CMP      r0,r4                 ;160
000128  2a000004          BCS      |L1.320|
00012c  e1a00008          MOV      r0,r8                 ;161
000130  ebfffffe          BL       strlen
000134  e0441000          SUB      r1,r4,r0              ;161
000138  e1a00007          MOV      r0,r7                 ;161
00013c  ebfffffe          BL       sysPutRepChar
                  |L1.320|
000140  e3560000          CMP      r6,#0                 ;163
000144  01a00008          MOVEQ    r0,r8                 ;164
000148  0bfffffe          BLEQ     sysPutString
                  |L1.332|
00014c  e1a00005          MOV      r0,r5                 ;165
000150  e8bd81f0          POP      {r4-r8,pc}
                  |L1.340|
000154  e3e01009          MVN      r1,#9                 ;169
000158  ea000004          B        |L1.368|
                  |L1.348|
00015c  e3a01010          MOV      r1,#0x10              ;175
000160  ea000002          B        |L1.368|
                  |L1.356|
000164  e4d50001          LDRB     r0,[r5],#1            ;130
000168  e3500000          CMP      r0,#0                 ;130
00016c  1affffae          BNE      |L1.44|
                  |L1.368|
000170  e3560000          CMP      r6,#0                 ;191
000174  12644000          RSBNE    r4,r4,#0              ;192
000178  e1a03007          MOV      r3,r7                 ;194
00017c  e1a02004          MOV      r2,r4                 ;194
000180  e1a00008          MOV      r0,r8                 ;194
000184  ebfffffe          BL       sysPutNumber
000188  eaffffef          B        |L1.332|
;;;198    
                          ENDP


                          AREA ||i._PutChar_f||, CODE, READONLY, ALIGN=2

                  _PutChar_f PROC
;;;16     
;;;17     void _PutChar_f(UINT8 ch)
000000  e3a0132e          MOV      r1,#0xb8000000
                  |L2.4|
;;;18     {
;;;19         volatile int loop;
;;;20         while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e5912018          LDR      r2,[r1,#0x18]
000008  e3120502          TST      r2,#0x800000
00000c  1afffffc          BNE      |L2.4|
;;;21         outpw(REG_UART0_THR, ch);
000010  e5810000          STR      r0,[r1,#0]
;;;22         if(ch == '\n') {
000014  e350000a          CMP      r0,#0xa
;;;23             while((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
;;;24             outpw(REG_UART0_THR, '\r');
;;;25         }
;;;26     }
000018  112fff1e          BXNE     lr
                  |L2.28|
00001c  e5910018          LDR      r0,[r1,#0x18]         ;23
000020  e3100502          TST      r0,#0x800000          ;23
000024  03a0000d          MOVEQ    r0,#0xd               ;24
000028  05810000          STREQ    r0,[r1,#0]            ;24
00002c  1afffffa          BNE      |L2.28|
000030  e12fff1e          BX       lr
;;;27     
                          ENDP


                          AREA ||i.sysGetChar||, CODE, READONLY, ALIGN=2

                  sysGetChar PROC
;;;255     */
;;;256    INT8 sysGetChar(void)
000000  e3a0132e          MOV      r1,#0xb8000000
                  |L3.4|
;;;257    {
;;;258        int i;
;;;259        while (1) {
;;;260            for(i=0; i<0x1000; i++);
000004  e3a00000          MOV      r0,#0
                  |L3.8|
000008  e2800001          ADD      r0,r0,#1
00000c  e3500a01          CMP      r0,#0x1000
000010  bafffffc          BLT      |L3.8|
;;;261            if (!(inpw(REG_UART0_FSR) & (1 << 14))) {
000014  e5910018          LDR      r0,[r1,#0x18]
000018  e3100901          TST      r0,#0x4000
;;;262                return (inpw(REG_UART0_RBR));
00001c  05910000          LDREQ    r0,[r1,#0]
000020  020000ff          ANDEQ    r0,r0,#0xff
000024  1afffff6          BNE      |L3.4|
;;;263            }
;;;264        }
;;;265    }
000028  e12fff1e          BX       lr
;;;266    
                          ENDP


                          AREA ||i.sysInitializeUART||, CODE, READONLY, ALIGN=2

                  sysInitializeUART PROC
;;;214     */
;;;215    INT32 sysInitializeUART(void)
000000  e3a0020b          MOV      r0,#0xb0000000
;;;216    {
;;;217        /* enable UART0 clock */
;;;218        outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0) | 0x10000);
000004  e5901218          LDR      r1,[r0,#0x218]
000008  e3811801          ORR      r1,r1,#0x10000
00000c  e5801218          STR      r1,[r0,#0x218]
;;;219    
;;;220        /* GPE0, GPE1 */
;;;221        outpw(REG_SYS_GPE_MFPL, (inpw(REG_SYS_GPE_MFPL) & 0xffffff00) | 0x99);  // UART0 multi-function
000010  e5901090          LDR      r1,[r0,#0x90]
000014  e3c110ff          BIC      r1,r1,#0xff
000018  e3811099          ORR      r1,r1,#0x99
00001c  e5801090          STR      r1,[r0,#0x90]
;;;222    
;;;223        /* UART0 line configuration for (115200,n,8,1) */
;;;224        outpw(REG_UART0_LCR, inpw(REG_UART0_LCR) | 0x7);
000020  e3a0032e          MOV      r0,#0xb8000000
000024  e590100c          LDR      r1,[r0,#0xc]
000028  e3811007          ORR      r1,r1,#7
00002c  e580100c          STR      r1,[r0,#0xc]
;;;225        outpw(REG_UART0_BAUD, 0x30000066); /* 12MHz reference clock input, 115200 */
000030  e59f1008          LDR      r1,|L4.64|
000034  e5801024          STR      r1,[r0,#0x24]
;;;226        return 0;
000038  e3a00000          MOV      r0,#0
;;;227    }
00003c  e12fff1e          BX       lr
;;;228    
                          ENDP

                  |L4.64|
                          DCD      0x30000066

                          AREA ||i.sysIsKbHit||, CODE, READONLY, ALIGN=2

                  sysIsKbHit PROC
;;;199    
;;;200    INT  sysIsKbHit()
000000  e3a0032e          MOV      r0,#0xb8000000
;;;201    {
;;;202        if (inpw(REG_UART0_FSR) & (1 << 14))
000004  e5900018          LDR      r0,[r0,#0x18]
000008  e3100901          TST      r0,#0x4000
;;;203            return 0;
00000c  13a00000          MOVNE    r0,#0
;;;204        else
;;;205            return 1;
000010  03a00001          MOVEQ    r0,#1
;;;206    }
000014  e12fff1e          BX       lr
;;;207    /// @endcond HIDDEN_SYMBOLS
                          ENDP


                          AREA ||i.sysPutChar||, CODE, READONLY, ALIGN=2

                  sysPutChar PROC
;;;273     */
;;;274    void sysPutChar(UINT8 ucCh)
000000  e3a0132e          MOV      r1,#0xb8000000
                  |L6.4|
;;;275    {
;;;276        volatile int loop;
;;;277        while ((inpw(REG_UART0_FSR) & (1<<23))); //waits for TX_FULL bit is clear
000004  e5912018          LDR      r2,[r1,#0x18]
000008  e3120502          TST      r2,#0x800000
;;;278        outpw(REG_UART0_THR, ucCh);
00000c  05810000          STREQ    r0,[r1,#0]
000010  1afffffb          BNE      |L6.4|
;;;279    }
000014  e12fff1e          BX       lr
;;;280    
                          ENDP


                          AREA ||i.sysPutNumber||, CODE, READONLY, ALIGN=2

                  sysPutNumber PROC
;;;51     
;;;52     static void sysPutNumber(INT value, INT radix, INT width, INT8 fill)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;53     {
000004  e1b0a003          MOVS     r10,r3
000008  e1a05002          MOV      r5,r2
;;;54         INT8    buffer[40];
;;;55         INT     bi = 0;
00000c  e3a04000          MOV      r4,#0
;;;56         UINT32  uvalue;
;;;57         UINT16  digit;
;;;58         UINT16  left = FALSE;
;;;59         UINT16  negative = FALSE;
;;;60     
;;;61         if (fill == 0)
;;;62             fill = ' ';
000010  03a0a020          MOVEQ    r10,#0x20
;;;63     
;;;64         if (width < 0) {
000014  e3550000          CMP      r5,#0
000018  e1a07004          MOV      r7,r4                 ;58
;;;65             width = -width;
00001c  b2625000          RSBLT    r5,r2,#0
;;;66             left = TRUE;
000020  b3a07001          MOVLT    r7,#1
;;;67         }
;;;68     
;;;69         if (width < 0 || width > 80)
000024  e3550051          CMP      r5,#0x51
000028  e1a06001          MOV      r6,r1                 ;53
;;;70             width = 0;
00002c  23a05000          MOVCS    r5,#0
;;;71     
;;;72         if (radix < 0) {
000030  e3560000          CMP      r6,#0
;;;73             radix = -radix;
000034  b2616000          RSBLT    r6,r1,#0
;;;74             if (value < 0) {
000038  b3500000          CMPLT    r0,#0
00003c  e24dd028          SUB      sp,sp,#0x28           ;53
000040  e1a08004          MOV      r8,r4                 ;59
;;;75                 negative = TRUE;
000044  b3a08001          MOVLT    r8,#1
;;;76                 value = -value;
000048  b2600000          RSBLT    r0,r0,#0
00004c  e1a0900d          MOV      r9,sp                 ;54
                  |L7.80|
;;;77             }
;;;78         }
;;;79     
;;;80         uvalue = value;
;;;81     
;;;82         do {
;;;83             if (radix != 16) {
000050  e3560010          CMP      r6,#0x10
;;;84                 digit = uvalue % radix;
;;;85                 uvalue = uvalue / radix;
;;;86             } else {
;;;87                 digit = uvalue & 0xf;
000054  0200100f          ANDEQ    r1,r0,#0xf
;;;88                 uvalue = uvalue >> 4;
000058  01a00220          LSREQ    r0,r0,#4
00005c  0a000003          BEQ      |L7.112|
000060  e1a01006          MOV      r1,r6                 ;84
000064  ebfffffe          BL       __aeabi_uidivmod
000068  e1a01801          LSL      r1,r1,#16             ;84
00006c  e1a01821          LSR      r1,r1,#16             ;84
                  |L7.112|
;;;89             }
;;;90             buffer[bi] = digit + ((digit <= 9) ? '0' : ('A' - 10));
000070  e3510009          CMP      r1,#9
000074  93a02030          MOVLS    r2,#0x30
000078  83a02037          MOVHI    r2,#0x37
00007c  e0811002          ADD      r1,r1,r2
000080  e7c91004          STRB     r1,[r9,r4]
;;;91             bi++;
;;;92     
;;;93             if (uvalue != 0) {
000084  e3500000          CMP      r0,#0
000088  e2844001          ADD      r4,r4,#1
00008c  0a000012          BEQ      |L7.220|
;;;94                 if ((radix == 10)
000090  e356000a          CMP      r6,#0xa
000094  1affffed          BNE      |L7.80|
;;;95                     && ((bi == 3) || (bi == 7) || (bi == 11) | (bi == 15))) {
000098  e3540003          CMP      r4,#3
00009c  13540007          CMPNE    r4,#7
0000a0  0a000009          BEQ      |L7.204|
0000a4  e354000b          CMP      r4,#0xb
0000a8  03a01001          MOVEQ    r1,#1
0000ac  0a000003          BEQ      |L7.192|
0000b0  e354000f          CMP      r4,#0xf
0000b4  e3a01000          MOV      r1,#0
0000b8  03a02001          MOVEQ    r2,#1
0000bc  0a000000          BEQ      |L7.196|
                  |L7.192|
0000c0  e3a02000          MOV      r2,#0
                  |L7.196|
0000c4  e1911002          ORRS     r1,r1,r2
0000c8  0affffe0          BEQ      |L7.80|
                  |L7.204|
;;;96                     buffer[bi++] = ',';
0000cc  e3a0102c          MOV      r1,#0x2c
0000d0  e7c91004          STRB     r1,[r9,r4]
0000d4  e2844001          ADD      r4,r4,#1
0000d8  eaffffdc          B        |L7.80|
                  |L7.220|
;;;97                 }
;;;98             }
;;;99         } while (uvalue != 0);
;;;100    
;;;101        if (negative) {
0000dc  e3580000          CMP      r8,#0
;;;102            buffer[bi] = '-';
0000e0  13a0002d          MOVNE    r0,#0x2d
0000e4  17c90004          STRBNE   r0,[r9,r4]
0000e8  12844001          ADDNE    r4,r4,#1
;;;103            bi += 1;
;;;104        }
;;;105    
;;;106        if (width <= bi)
0000ec  e1550004          CMP      r5,r4
0000f0  ca000004          BGT      |L7.264|
;;;107            sysPutStringReverse(buffer, bi);
0000f4  e1a01004          MOV      r1,r4
0000f8  e1a0000d          MOV      r0,sp
0000fc  ebfffffe          BL       sysPutStringReverse
                  |L7.256|
;;;108        else {
;;;109            width -= bi;
;;;110            if (!left)
;;;111                sysPutRepChar(fill, width);
;;;112            sysPutStringReverse(buffer, bi);
;;;113            if (left)
;;;114                sysPutRepChar(fill, width);
;;;115        }
;;;116    }
000100  e28dd028          ADD      sp,sp,#0x28
000104  e8bd87f0          POP      {r4-r10,pc}
                  |L7.264|
000108  e3570000          CMP      r7,#0                 ;110
00010c  e0455004          SUB      r5,r5,r4              ;109
000110  01a01005          MOVEQ    r1,r5                 ;111
000114  01a0000a          MOVEQ    r0,r10                ;111
000118  0bfffffe          BLEQ     sysPutRepChar
00011c  e1a01004          MOV      r1,r4                 ;112
000120  e1a0000d          MOV      r0,sp                 ;112
000124  ebfffffe          BL       sysPutStringReverse
000128  e3570000          CMP      r7,#0                 ;113
00012c  11a01005          MOVNE    r1,r5                 ;114
000130  11a0000a          MOVNE    r0,r10                ;114
000134  1bfffffe          BLNE     sysPutRepChar
000138  eafffff0          B        |L7.256|
;;;117    
                          ENDP


                          AREA ||i.sysPutRepChar||, CODE, READONLY, ALIGN=2

                  sysPutRepChar PROC
;;;37     
;;;38     static void sysPutRepChar(INT8 c, INT count)
000000  e92d4010          PUSH     {r4,lr}
;;;39     {
000004  e1a03001          MOV      r3,r1
000008  e1a04000          MOV      r4,r0
;;;40         while (count--)
;;;41             _PutChar_f(c);
00000c  ea000001          B        |L8.24|
                  |L8.16|
000010  e1a00004          MOV      r0,r4
000014  ebfffffe          BL       _PutChar_f
                  |L8.24|
000018  e2533001          SUBS     r3,r3,#1
00001c  2afffffb          BCS      |L8.16|
;;;42     }
000020  e8bd8010          POP      {r4,pc}
;;;43     
                          ENDP


                          AREA ||i.sysPutString||, CODE, READONLY, ALIGN=2

                  sysPutString PROC
;;;28     
;;;29     void sysPutString(INT8 *string)
000000  e1a03000          MOV      r3,r0
;;;30     {
000004  e52de004          PUSH     {lr}
;;;31         while (*string != '\0') {
;;;32             _PutChar_f(*string);
;;;33             string++;
000008  ea000001          B        |L9.20|
                  |L9.12|
00000c  ebfffffe          BL       _PutChar_f
000010  e2833001          ADD      r3,r3,#1              ;32
                  |L9.20|
000014  e5d30000          LDRB     r0,[r3,#0]            ;31
000018  e3500000          CMP      r0,#0                 ;31
00001c  1afffffa          BNE      |L9.12|
;;;34         }
;;;35     }
000020  e49df004          POP      {pc}
;;;36     
                          ENDP


                          AREA ||i.sysPutStringReverse||, CODE, READONLY, ALIGN=2

                  sysPutStringReverse PROC
;;;44     
;;;45     static void sysPutStringReverse(INT8 *s, INT index)
000000  e92d4010          PUSH     {r4,lr}
;;;46     {
000004  e1a03001          MOV      r3,r1
000008  e1a04000          MOV      r4,r0
;;;47         while ((index--) > 0)
;;;48             _PutChar_f(s[index]);
00000c  ea000001          B        |L10.24|
                  |L10.16|
000010  e7d40003          LDRB     r0,[r4,r3]
000014  ebfffffe          BL       _PutChar_f
                  |L10.24|
000018  e2530000          SUBS     r0,r3,#0              ;47
00001c  e2433001          SUB      r3,r3,#1              ;47
000020  cafffffa          BGT      |L10.16|
;;;49     }
000024  e8bd8010          POP      {r4,pc}
;;;50     
                          ENDP


                          AREA ||i.sysprintf||, CODE, READONLY, ALIGN=2

                  sysprintf PROC
;;;236     */
;;;237    void sysprintf(PINT8 pcStr,...)
000000  e92d000f          PUSH     {r0-r3}
;;;238    {
000004  e92d4010          PUSH     {r4,lr}
;;;239        INT8  *argP;
;;;240    
;;;241        vaStart(argP, pcStr);       /* point at the end of the format string */
000008  e28d400c          ADD      r4,sp,#0xc
00000c  ea000004          B        |L11.36|
                  |L11.16|
;;;242        while (*pcStr) {
;;;243            /* this works because args are all ints */
;;;244            if (*pcStr == '%')
000010  e3500025          CMP      r0,#0x25
000014  0a000008          BEQ      |L11.60|
;;;245                pcStr = FormatItem(pcStr + 1, vaArg(argP, INT));
;;;246            else
;;;247                _PutChar_f(*pcStr++);
000018  e2821001          ADD      r1,r2,#1
00001c  e58d1008          STR      r1,[sp,#8]
000020  ebfffffe          BL       _PutChar_f
                  |L11.36|
000024  e59d2008          LDR      r2,[sp,#8]            ;242
000028  e5d20000          LDRB     r0,[r2,#0]            ;242
00002c  e3500000          CMP      r0,#0                 ;242
000030  1afffff6          BNE      |L11.16|
;;;248        }
;;;249    }
000034  e49d4004          POP      {r4}
000038  e49df014          LDR      pc,[sp],#0x14
                  |L11.60|
00003c  e4941004          LDR      r1,[r4],#4            ;245
000040  e2820001          ADD      r0,r2,#1              ;245
000044  ebfffffe          BL       FormatItem
000048  e58d0008          STR      r0,[sp,#8]            ;245
00004c  eafffff4          B        |L11.36|
;;;250    
                          ENDP

