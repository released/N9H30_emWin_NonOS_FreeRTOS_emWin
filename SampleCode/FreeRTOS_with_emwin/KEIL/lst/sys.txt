; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\sys.crf ..\..\..\Driver\Source\sys.c]
                          ARM

                          AREA ||i.SYS_Interrupt_Shell||, CODE, READONLY, ALIGN=2

                  SYS_Interrupt_Shell PROC
;;;180    
;;;181    void SYS_Interrupt_Shell()
000000  e59f0008          LDR      r0,|L1.16|
;;;182    {
;;;183        sysprintf("ISR not found! ISNR=%d\n", inpw(REG_AIC_ISNR));
000004  e5901120          LDR      r1,[r0,#0x120]
000008  e28f0004          ADR      r0,|L1.20|
00000c  eafffffe          B        sysprintf
;;;184    }
;;;185    
                          ENDP

                  |L1.16|
                          DCD      0xb8002000
                  |L1.20|
000014  49535220          DCB      "ISR not found! ISNR=%d\n",0
000018  6e6f7420
00001c  666f756e
000020  64212049
000024  534e523d
000028  25640a00

                          AREA ||i.sysDisableInterrupt||, CODE, READONLY, ALIGN=2

                  sysDisableInterrupt PROC
;;;202     */
;;;203    INT32 sysDisableInterrupt(IRQn_Type eIntNo)
000000  e2401001          SUB      r1,r0,#1
;;;204    {
;;;205        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
;;;206            return 1;
000008  23a00001          MOVCS    r0,#1
;;;207    
;;;208        if (eIntNo < 32)
;;;209            outpw(REG_AIC_MDCR, (1 << eIntNo));
;;;210        else
;;;211            outpw(REG_AIC_MDCRH, (1 << (eIntNo - 32)));
;;;212    
;;;213        return 0;
;;;214    }
00000c  212fff1e          BXCS     lr
000010  e3500020          CMP      r0,#0x20              ;208
000014  e3a02001          MOV      r2,#1                 ;206
000018  22400020          SUBCS    r0,r0,#0x20           ;208
00001c  e59f1010          LDR      r1,|L2.52|
000020  e1a00012          LSL      r0,r2,r0              ;211
000024  35810138          STRCC    r0,[r1,#0x138]        ;209
000028  2581013c          STRCS    r0,[r1,#0x13c]        ;211
00002c  e3a00000          MOV      r0,#0                 ;213
000030  e12fff1e          BX       lr
;;;215    
                          ENDP

                  |L2.52|
                          DCD      0xb8002000

                          AREA ||i.sysEnableInterrupt||, CODE, READONLY, ALIGN=2

                  sysEnableInterrupt PROC
;;;223     */
;;;224    INT32 sysEnableInterrupt(IRQn_Type eIntNo)
000000  e2401001          SUB      r1,r0,#1
;;;225    {
;;;226        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e351003e          CMP      r1,#0x3e
;;;227            return 1;
000008  23a00001          MOVCS    r0,#1
;;;228    
;;;229        if (eIntNo < 32)
;;;230            outpw(REG_AIC_MECR, (1 << eIntNo));
;;;231        else
;;;232            outpw(REG_AIC_MECRH, (1 << (eIntNo - 32)));
;;;233    
;;;234        return 0;
;;;235    }
00000c  212fff1e          BXCS     lr
000010  e3500020          CMP      r0,#0x20              ;229
000014  e3a02001          MOV      r2,#1                 ;227
000018  22400020          SUBCS    r0,r0,#0x20           ;229
00001c  e59f1010          LDR      r1,|L3.52|
000020  e1a00012          LSL      r0,r2,r0              ;232
000024  35810130          STRCC    r0,[r1,#0x130]        ;230
000028  25810134          STRCS    r0,[r1,#0x134]        ;232
00002c  e3a00000          MOV      r0,#0                 ;234
000030  e12fff1e          BX       lr
;;;236    
                          ENDP

                  |L3.52|
                          DCD      0xb8002000

                          AREA ||i.sysFiqHandler||, CODE, READONLY, ALIGN=2

                  sysFiqHandler PROC
;;;167    
;;;168    __irq void sysFiqHandler()
000000  e92d501f          PUSH     {r0-r4,r12,lr}
;;;169    {
;;;170        UINT32 volatile _mIPER, _mISNR;
;;;171    
;;;172        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f4054          LDR      r4,|L4.96|
000008  e24dd00c          SUB      sp,sp,#0xc            ;169
00000c  e5940118          LDR      r0,[r4,#0x118]
000010  e1a00c00          LSL      r0,r0,#24
000014  e1a00d20          LSR      r0,r0,#26
;;;173        _mISNR = inpw(REG_AIC_ISNR);
000018  e58d0000          STR      r0,[sp,#0]
00001c  e5940120          LDR      r0,[r4,#0x120]
;;;174        if (_mIPER != 0) {
000020  e58d0004          STR      r0,[sp,#4]
000024  e59d0000          LDR      r0,[sp,#0]
000028  e3500000          CMP      r0,#0
00002c  0a000008          BEQ      |L4.84|
;;;175            if (_mISNR != 0)
000030  e59d0004          LDR      r0,[sp,#4]
000034  e3500000          CMP      r0,#0
000038  0a000003          BEQ      |L4.76|
;;;176                (*sysFiqHandlerTable[_mIPER])();
00003c  e59f0020          LDR      r0,|L4.100|
000040  e59d1000          LDR      r1,[sp,#0]
000044  e7900101          LDR      r0,[r0,r1,LSL #2]
000048  e12fff30          BLX      r0
                  |L4.76|
;;;177            outpw(REG_AIC_EOSCR, 1);
00004c  e3a00001          MOV      r0,#1
000050  e5840150          STR      r0,[r4,#0x150]
                  |L4.84|
;;;178        }
;;;179    }
000054  e28dd00c          ADD      sp,sp,#0xc
000058  e8bd501f          POP      {r0-r4,r12,lr}
00005c  e25ef004          SUBS     pc,lr,#4
;;;180    
                          ENDP

                  |L4.96|
                          DCD      0xb8002000
                  |L4.100|
                          DCD      ||.data||+0xfc

                          AREA ||i.sysGetClock||, CODE, READONLY, ALIGN=2

                  sysGetClock PROC
;;;493     */
;;;494    UINT32 sysGetClock(CLK_Type clk)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;495    {
000004  e1a03000          MOV      r3,r0
;;;496        UINT32 src, divS, divN, reg, div;
;;;497    
;;;498        switch(clk) {
;;;499            case SYS_UPLL:
;;;500                return sysGetPLL(REG_CLK_UPLLCON);
000008  e59f01a8          LDR      r0,|L5.440|
00000c  e3530008          CMP      r3,#8                 ;498
000010  e3a05001          MOV      r5,#1                 ;495
;;;501    
;;;502            case SYS_APLL:
;;;503                return sysGetPLL(REG_CLK_APLLCON);
000014  e2402004          SUB      r2,r0,#4
;;;504    
;;;505            case SYS_SYSTEM: {
;;;506                reg = inpw(REG_CLK_DIVCTL0);
000018  e3a0120b          MOV      r1,#0xb0000000
00001c  308ff103          ADDCC    pc,pc,r3,LSL #2       ;498
000020  ea000013          B        |L5.116|
000024  ea000012          B        |L5.116|
000028  ea000005          B        |L5.68|
00002c  ea000006          B        |L5.76|
000030  ea000007          B        |L5.84|
000034  ea000016          B        |L5.148|
000038  ea000027          B        |L5.220|
00003c  ea000034          B        |L5.276|
000040  ea000047          B        |L5.356|
                  |L5.68|
000044  e8bd4070          POP      {r4-r6,lr}            ;500
000048  eafffffe          B        sysGetPLL
                  |L5.76|
00004c  e1a00002          MOV      r0,r2                 ;503
000050  eafffffb          B        |L5.68|
                  |L5.84|
000054  e5914220          LDR      r4,[r1,#0x220]
;;;507                switch (reg & 0x18) {
000058  e2141018          ANDS     r1,r4,#0x18
;;;508                    case 0x0:
;;;509                        src = 12;   /* HXT */
00005c  03a0000c          MOVEQ    r0,#0xc
000060  0a000006          BEQ      |L5.128|
000064  e3510010          CMP      r1,#0x10              ;507
;;;510                        break;
;;;511                    case 0x10:
;;;512                        src = sysGetPLL(REG_CLK_APLLCON);
000068  01a00002          MOVEQ    r0,r2
00006c  13510018          CMPNE    r1,#0x18              ;507
000070  0a000001          BEQ      |L5.124|
                  |L5.116|
;;;513                        break;
;;;514                    case 0x18:
;;;515                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;516                        break;
;;;517                    default:
;;;518                        return 0;
;;;519                }
;;;520                divS = (reg & 0x7) + 1;
;;;521                divN = ((reg & 0xf00) >> 8) + 1;
;;;522                return (src / divS / divN);
;;;523            }
;;;524    
;;;525            case SYS_HCLK1: {
;;;526                reg = inpw(REG_CLK_DIVCTL0);
;;;527                switch (reg & 0x18) {
;;;528                    case 0x0:
;;;529                        src = 12;   /* HXT */
;;;530                        break;
;;;531                    case 0x10:
;;;532                        src = sysGetPLL(REG_CLK_APLLCON);
;;;533                        break;
;;;534                    case 0x18:
;;;535                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;536                        break;
;;;537                    default:
;;;538                        return 0;
;;;539                }
;;;540                divS = (reg & 0x7) + 1;
;;;541                divN = ((reg & 0xf00) >> 8) + 1;
;;;542                return (src / divS / divN / 2);
;;;543            }
;;;544    
;;;545            case SYS_HCLK234: {
;;;546                reg = inpw(REG_CLK_DIVCTL0);
;;;547                switch (reg & 0x18) {
;;;548                    case 0x0:
;;;549                        src = 12;   /* HXT */
;;;550                        break;
;;;551                    case 0x10:
;;;552                        src = sysGetPLL(REG_CLK_APLLCON);
;;;553                        break;
;;;554                    case 0x18:
;;;555                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;556                        break;
;;;557                    default:
;;;558                        return 0;
;;;559                }
;;;560                divS = (reg & 0x7) + 1;
;;;561                divN = ((reg & 0xf00) >> 8) + 1;
;;;562                div = ((reg & 0xf00000) >> 20) + 1;
;;;563                return (src / divS / divN / 2 / div);
;;;564            }
;;;565    
;;;566            case SYS_PCLK: {
;;;567                reg = inpw(REG_CLK_DIVCTL0);
;;;568                switch (reg & 0x18) {
;;;569                    case 0x0:
;;;570                        src = 12;   /* HXT */
;;;571                        break;
;;;572                    case 0x10:
;;;573                        src = sysGetPLL(REG_CLK_APLLCON);
;;;574                        break;
;;;575                    case 0x18:
;;;576                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;577                        break;
;;;578                    default:
;;;579                        return 0;
;;;580                }
;;;581                divS = (reg & 0x7) + 1;
;;;582                divN = ((reg & 0xf00) >> 8) + 1;
;;;583                div = ((reg & 0xf000000) >> 24) + 1;
;;;584                return (src / divS / divN / 2 / div);
;;;585            }
;;;586            case SYS_CPU: {
;;;587                reg = inpw(REG_CLK_DIVCTL0);
;;;588                switch (reg & 0x18) {
;;;589                    case 0x0:
;;;590                        src = 12;   /* HXT */
;;;591                        break;
;;;592                    case 0x10:
;;;593                        src = sysGetPLL(REG_CLK_APLLCON);
;;;594                        break;
;;;595                    case 0x18:
;;;596                        src = sysGetPLL(REG_CLK_UPLLCON);
;;;597                        break;
;;;598                    default:
;;;599                        return 0;
;;;600                }
;;;601                divS = (reg & 0x7) + 1;
;;;602                divN = ((reg & 0xf00) >> 8) + 1;
;;;603                div = ((reg & 0xf0000) >> 16) + 1;
;;;604                return (src / divS / divN / div);
;;;605            }
;;;606    
;;;607            default:
;;;608                ;
;;;609        }
;;;610        return 0;
000074  e3a00000          MOV      r0,#0
;;;611    }
000078  e8bd8070          POP      {r4-r6,pc}
                  |L5.124|
00007c  ebfffffe          BL       sysGetPLL
                  |L5.128|
000080  e2041007          AND      r1,r4,#7              ;520
000084  e1a02a04          LSL      r2,r4,#20             ;521
000088  e0854e22          ADD      r4,r5,r2,LSR #28      ;521
00008c  e2811001          ADD      r1,r1,#1              ;521
000090  ea000044          B        |L5.424|
                  |L5.148|
000094  e5914220          LDR      r4,[r1,#0x220]        ;526
000098  e2141018          ANDS     r1,r4,#0x18           ;527
00009c  03a0000c          MOVEQ    r0,#0xc               ;529
0000a0  0a000004          BEQ      |L5.184|
0000a4  e3510010          CMP      r1,#0x10              ;527
0000a8  01a00002          MOVEQ    r0,r2                 ;532
0000ac  13510018          CMPNE    r1,#0x18              ;527
0000b0  1affffef          BNE      |L5.116|
0000b4  ebfffffe          BL       sysGetPLL
                  |L5.184|
0000b8  e2041007          AND      r1,r4,#7              ;540
0000bc  e1a02a04          LSL      r2,r4,#20             ;541
0000c0  e0854e22          ADD      r4,r5,r2,LSR #28      ;541
0000c4  e2811001          ADD      r1,r1,#1              ;541
0000c8  ebfffffe          BL       __aeabi_uidivmod
0000cc  e1a01004          MOV      r1,r4                 ;542
0000d0  ebfffffe          BL       __aeabi_uidivmod
0000d4  e1a000a0          LSR      r0,r0,#1              ;542
0000d8  e8bd8070          POP      {r4-r6,pc}
                  |L5.220|
0000dc  e5914220          LDR      r4,[r1,#0x220]        ;546
0000e0  e2141018          ANDS     r1,r4,#0x18           ;547
0000e4  03a0000c          MOVEQ    r0,#0xc               ;549
0000e8  0a000004          BEQ      |L5.256|
0000ec  e3510010          CMP      r1,#0x10              ;547
0000f0  01a00002          MOVEQ    r0,r2                 ;552
0000f4  13510018          CMPNE    r1,#0x18              ;547
0000f8  1affffdd          BNE      |L5.116|
0000fc  ebfffffe          BL       sysGetPLL
                  |L5.256|
000100  e1a02a04          LSL      r2,r4,#20             ;561
000104  e0856e22          ADD      r6,r5,r2,LSR #28      ;561
000108  e2041007          AND      r1,r4,#7              ;560
00010c  e1a02404          LSL      r2,r4,#8              ;562
000110  ea00000c          B        |L5.328|
                  |L5.276|
000114  e5914220          LDR      r4,[r1,#0x220]        ;567
000118  e2141018          ANDS     r1,r4,#0x18           ;568
00011c  03a0000c          MOVEQ    r0,#0xc               ;570
000120  0a000004          BEQ      |L5.312|
000124  e3510010          CMP      r1,#0x10              ;568
000128  01a00002          MOVEQ    r0,r2                 ;573
00012c  13510018          CMPNE    r1,#0x18              ;568
000130  1affffcf          BNE      |L5.116|
000134  ebfffffe          BL       sysGetPLL
                  |L5.312|
000138  e1a02a04          LSL      r2,r4,#20             ;582
00013c  e0856e22          ADD      r6,r5,r2,LSR #28      ;582
000140  e2041007          AND      r1,r4,#7              ;581
000144  e1a02204          LSL      r2,r4,#4              ;583
                  |L5.328|
000148  e0854e22          ADD      r4,r5,r2,LSR #28      ;562
00014c  e2811001          ADD      r1,r1,#1              ;562
000150  ebfffffe          BL       __aeabi_uidivmod
000154  e1a01006          MOV      r1,r6                 ;563
000158  ebfffffe          BL       __aeabi_uidivmod
00015c  e1a000a0          LSR      r0,r0,#1              ;563
000160  ea000011          B        |L5.428|
                  |L5.356|
000164  e5914220          LDR      r4,[r1,#0x220]        ;587
000168  e2141018          ANDS     r1,r4,#0x18           ;588
00016c  03a0000c          MOVEQ    r0,#0xc               ;590
000170  0a000004          BEQ      |L5.392|
000174  e3510010          CMP      r1,#0x10              ;588
000178  01a00002          MOVEQ    r0,r2                 ;593
00017c  13510018          CMPNE    r1,#0x18              ;588
000180  1affffbb          BNE      |L5.116|
000184  ebfffffe          BL       sysGetPLL
                  |L5.392|
000188  e1a02a04          LSL      r2,r4,#20             ;602
00018c  e2041007          AND      r1,r4,#7              ;601
000190  e0856e22          ADD      r6,r5,r2,LSR #28      ;602
000194  e1a02604          LSL      r2,r4,#12             ;603
000198  e0854e22          ADD      r4,r5,r2,LSR #28      ;603
00019c  e2811001          ADD      r1,r1,#1              ;603
0001a0  ebfffffe          BL       __aeabi_uidivmod
0001a4  e1a01006          MOV      r1,r6                 ;604
                  |L5.424|
0001a8  ebfffffe          BL       __aeabi_uidivmod
                  |L5.428|
0001ac  e1a01004          MOV      r1,r4                 ;604
0001b0  ebfffffe          BL       __aeabi_uidivmod
0001b4  e8bd8070          POP      {r4-r6,pc}
;;;612    
                          ENDP

                  |L5.440|
                          DCD      0xb0000264

                          AREA ||i.sysGetIBitState||, CODE, READONLY, ALIGN=2

                  sysGetIBitState PROC
;;;460    /// @cond HIDDEN_SYMBOLS
;;;461    BOOL sysGetIBitState()
000000  e10f0000          MRS      r0,APSR ; formerly CPSR
;;;462    {
;;;463        INT32 temp;
;;;464    
;;;465        __asm {
;;;466            MRS temp, CPSR
;;;467        }
;;;468    
;;;469        if (temp & 0x80)
000004  e3100080          TST      r0,#0x80
;;;470            return FALSE;
000008  13a00000          MOVNE    r0,#0
;;;471        else
;;;472            return TRUE;
00000c  03a00001          MOVEQ    r0,#1
;;;473    }
000010  e12fff1e          BX       lr
;;;474    
                          ENDP


                          AREA ||i.sysGetInterruptEnableStatus||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatus PROC
;;;448    
;;;449    UINT32  sysGetInterruptEnableStatus(void)
000000  e59f0004          LDR      r0,|L7.12|
;;;450    {
;;;451        return (inpw(REG_AIC_IMR));
000004  e5900128          LDR      r0,[r0,#0x128]
;;;452    }
000008  e12fff1e          BX       lr
;;;453    
                          ENDP

                  |L7.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetInterruptEnableStatusH||, CODE, READONLY, ALIGN=2

                  sysGetInterruptEnableStatusH PROC
;;;454    
;;;455    UINT32  sysGetInterruptEnableStatusH(void)
000000  e59f0004          LDR      r0,|L8.12|
;;;456    {
;;;457        return (inpw(REG_AIC_IMRH));
000004  e590012c          LDR      r0,[r0,#0x12c]
;;;458    }
000008  e12fff1e          BX       lr
;;;459    
                          ENDP

                  |L8.12|
                          DCD      0xb8002000

                          AREA ||i.sysGetPLL||, CODE, READONLY, ALIGN=2

                  sysGetPLL PROC
;;;474    
;;;475    INT32 sysGetPLL(UINT32 reg)
000000  e92d4010          PUSH     {r4,lr}
;;;476    {
;;;477        UINT32 N,M,P;
;;;478    
;;;479        N =((inpw(reg) & 0x007F)>>0)+1;
000004  e5901000          LDR      r1,[r0,#0]
000008  e201107f          AND      r1,r1,#0x7f
00000c  e2812001          ADD      r2,r1,#1
;;;480        M =((inpw(reg) & 0x1F80)>>7)+1;
000010  e5901000          LDR      r1,[r0,#0]
;;;481        P =((inpw(reg) & 0xE000)>>13)+1;
000014  e5900000          LDR      r0,[r0,#0]
000018  e2011d7e          AND      r1,r1,#0x1f80         ;480
00001c  e3a03001          MOV      r3,#1                 ;480
000020  e08313a1          ADD      r1,r3,r1,LSR #7       ;480
000024  e2000a0e          AND      r0,r0,#0xe000
000028  e08306a0          ADD      r0,r3,r0,LSR #13
;;;482    
;;;483        return (12*N/(M*P));    /* 12MHz HXT */
00002c  e1610081          SMULBB   r1,r1,r0
000030  e0820082          ADD      r0,r2,r2,LSL #1
000034  e1a00100          LSL      r0,r0,#2
000038  ebfffffe          BL       __aeabi_uidivmod
;;;484    }
00003c  e8bd8010          POP      {r4,pc}
;;;485    /// @endcond HIDDEN_SYMBOLS
                          ENDP


                          AREA ||i.sysInitializeAIC||, CODE, READONLY, ALIGN=2

                  sysInitializeAIC PROC
;;;185    
;;;186    void sysInitializeAIC()
000000  e59f1010          LDR      r1,|L10.24|
;;;187    {
;;;188        *(unsigned int volatile *)0x38 = (unsigned int)sysIrqHandler;
000004  e3a00000          MOV      r0,#0
000008  e5801038          STR      r1,[r0,#0x38]
;;;189    
;;;190        *(unsigned int volatile *)0x3C = (unsigned int)sysFiqHandler;
00000c  e59f1008          LDR      r1,|L10.28|
000010  e580103c          STR      r1,[r0,#0x3c]
;;;191    }
000014  e12fff1e          BX       lr
;;;192    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L10.24|
                          DCD      sysIrqHandler
                  |L10.28|
                          DCD      sysFiqHandler

                          AREA ||i.sysInstallExceptionHandler||, CODE, READONLY, ALIGN=2

                  sysInstallExceptionHandler PROC
;;;245     */
;;;246    PVOID sysInstallExceptionHandler(INT32 nExceptType, PVOID pvNewHandler)
000000  e1b02000          MOVS     r2,r0
;;;247    {
;;;248        PVOID _mOldVect = NULL;
000004  e3a00000          MOV      r0,#0
000008  e1a03000          MOV      r3,r0
;;;249    
;;;250        switch (nExceptType) {
;;;251            case SYS_SWI:
;;;252                _mOldVect = *(PVOID volatile *)0x28;
00000c  05930028          LDREQ    r0,[r3,#0x28]
;;;253                *(PVOID volatile *)0x28 = pvNewHandler;
000010  05831028          STREQ    r1,[r3,#0x28]
;;;254                break;
;;;255    
;;;256            case SYS_D_ABORT:
;;;257                _mOldVect = *(PVOID volatile *)0x30;
;;;258                *(PVOID volatile *)0x30 = pvNewHandler;
;;;259                break;
;;;260    
;;;261            case SYS_I_ABORT:
;;;262                _mOldVect = *(PVOID volatile *)0x2C;
;;;263                *(PVOID volatile *)0x2C = pvNewHandler;
;;;264                break;
;;;265    
;;;266            case SYS_UNDEFINE:
;;;267                _mOldVect = *(PVOID volatile *)0x24;
;;;268                *(PVOID volatile *)0x24 = pvNewHandler;
;;;269                break;
;;;270    
;;;271            default:
;;;272                ;
;;;273        }
;;;274        return _mOldVect;
;;;275    }
000014  012fff1e          BXEQ     lr
000018  e3520001          CMP      r2,#1                 ;250
00001c  05930030          LDREQ    r0,[r3,#0x30]         ;257
000020  05831030          STREQ    r1,[r3,#0x30]         ;258
000024  012fff1e          BXEQ     lr
000028  e3520002          CMP      r2,#2                 ;250
00002c  0593002c          LDREQ    r0,[r3,#0x2c]         ;262
000030  0583102c          STREQ    r1,[r3,#0x2c]         ;263
000034  012fff1e          BXEQ     lr
000038  e3520003          CMP      r2,#3                 ;250
00003c  05930024          LDREQ    r0,[r3,#0x24]         ;267
000040  05831024          STREQ    r1,[r3,#0x24]         ;268
000044  e12fff1e          BX       lr
;;;276    
                          ENDP


                          AREA ||i.sysInstallFiqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallFiqHandler PROC
;;;283     */
;;;284    PVOID sysInstallFiqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;285    {
;;;286        PVOID _mOldVect;
;;;287    
;;;288        _mOldVect = *(PVOID volatile *)0x3C;
000004  e3a02000          MOV      r2,#0
000008  e592003c          LDR      r0,[r2,#0x3c]
;;;289        *(PVOID volatile *)0x3C = pvNewISR;
00000c  e582103c          STR      r1,[r2,#0x3c]
;;;290        return _mOldVect;
;;;291    }
000010  e12fff1e          BX       lr
;;;292    
                          ENDP


                          AREA ||i.sysInstallISR||, CODE, READONLY, ALIGN=2

                  sysInstallISR PROC
;;;319     */
;;;320    PVOID sysInstallISR(INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;321    {
;;;322        PVOID   _mOldVect;
;;;323        UINT32  _mRegAddr/*, _mRegValue*/;
;;;324        INT     shift;
;;;325    
;;;326        if (!_sys_bIsAICInitial) {
000004  e59f5060          LDR      r5,|L13.108|
000008  e1a04000          MOV      r4,r0                 ;321
00000c  e5d50000          LDRB     r0,[r5,#0]  ; _sys_bIsAICInitial
000010  e1a03001          MOV      r3,r1                 ;321
000014  e3500000          CMP      r0,#0
000018  1a000002          BNE      |L13.40|
;;;327            sysInitializeAIC();
00001c  ebfffffe          BL       sysInitializeAIC
;;;328            _sys_bIsAICInitial = TRUE;
000020  e3a00001          MOV      r0,#1
000024  e5c50000          STRB     r0,[r5,#0]  ; _sys_bIsAICInitial
                  |L13.40|
;;;329        }
;;;330    
;;;331        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
000028  e59f1040          LDR      r1,|L13.112|
00002c  e3c30003          BIC      r0,r3,#3
000030  e080c001          ADD      r12,r0,r1
;;;332        shift = (eIntNo % 4) * 8;
000034  e1a00f03          LSL      r0,r3,#30
000038  e1a01da0          LSR      r1,r0,#27
;;;333        nIntTypeLevel &= 0xff;
00003c  e20400ff          AND      r0,r4,#0xff
;;;334        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (nIntTypeLevel << shift));
000040  e59c4000          LDR      r4,[r12,#0]
000044  e3a05007          MOV      r5,#7
000048  e1c44115          BIC      r4,r4,r5,LSL r1
00004c  e1841110          ORR      r1,r4,r0,LSL r1
000050  e58c1000          STR      r1,[r12,#0]
;;;335    
;;;336        if ((nIntTypeLevel & 0x7) == FIQ_LEVEL_0) {
000054  e3100007          TST      r0,#7
;;;337            _mOldVect = (PVOID) sysFiqHandlerTable[eIntNo];
000058  059f1014          LDREQ    r1,|L13.116|
;;;338            sysFiqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;339        } else {
;;;340            _mOldVect = (PVOID) sysIrqHandlerTable[eIntNo];
00005c  159f1014          LDRNE    r1,|L13.120|
000060  e7910103          LDR      r0,[r1,r3,LSL #2]     ;337
000064  e7812103          STR      r2,[r1,r3,LSL #2]     ;338
;;;341            sysIrqHandlerTable[eIntNo] = (sys_pvFunPtr)pvNewISR;
;;;342        }
;;;343        return _mOldVect;
;;;344    }
000068  e8bd8030          POP      {r4,r5,pc}
;;;345    
                          ENDP

                  |L13.108|
                          DCD      ||.data||
                  |L13.112|
                          DCD      0xb8002000
                  |L13.116|
                          DCD      ||.data||+0xfc
                  |L13.120|
                          DCD      ||.data||+0x4

                          AREA ||i.sysInstallIrqHandler||, CODE, READONLY, ALIGN=2

                  sysInstallIrqHandler PROC
;;;299     */
;;;300    PVOID sysInstallIrqHandler(PVOID pvNewISR)
000000  e1a01000          MOV      r1,r0
;;;301    {
;;;302        PVOID _mOldVect;
;;;303    
;;;304        _mOldVect = *(PVOID volatile *)0x38;
000004  e3a02000          MOV      r2,#0
000008  e5920038          LDR      r0,[r2,#0x38]
;;;305        *(PVOID volatile *)0x38 = pvNewISR;
00000c  e5821038          STR      r1,[r2,#0x38]
;;;306        return _mOldVect;
;;;307    }
000010  e12fff1e          BX       lr
;;;308    
                          ENDP


                          AREA ||i.sysIrqHandler||, CODE, READONLY, ALIGN=2

                  sysIrqHandler PROC
;;;154    /* Interrupt Handler */
;;;155    __irq void sysIrqHandler()
000000  e92d501f          PUSH     {r0-r4,r12,lr}
;;;156    {
;;;157        UINT32 volatile _mIPER, _mISNR;
;;;158    
;;;159        _mIPER = (inpw(REG_AIC_IPER) >> 2) & 0x3f;
000004  e59f4054          LDR      r4,|L15.96|
000008  e24dd00c          SUB      sp,sp,#0xc            ;156
00000c  e5940118          LDR      r0,[r4,#0x118]
000010  e1a00c00          LSL      r0,r0,#24
000014  e1a00d20          LSR      r0,r0,#26
;;;160        _mISNR = inpw(REG_AIC_ISNR);
000018  e58d0000          STR      r0,[sp,#0]
00001c  e5940120          LDR      r0,[r4,#0x120]
;;;161        if (_mIPER != 0) {
000020  e58d0004          STR      r0,[sp,#4]
000024  e59d0000          LDR      r0,[sp,#0]
000028  e3500000          CMP      r0,#0
00002c  0a000008          BEQ      |L15.84|
;;;162            if (_mISNR != 0)
000030  e59d0004          LDR      r0,[sp,#4]
000034  e3500000          CMP      r0,#0
000038  0a000003          BEQ      |L15.76|
;;;163                (*sysIrqHandlerTable[_mIPER])();
00003c  e59f0020          LDR      r0,|L15.100|
000040  e59d1000          LDR      r1,[sp,#0]
000044  e7900101          LDR      r0,[r0,r1,LSL #2]
000048  e12fff30          BLX      r0
                  |L15.76|
;;;164            outpw(REG_AIC_EOSCR, 1);
00004c  e3a00001          MOV      r0,#1
000050  e5840150          STR      r0,[r4,#0x150]
                  |L15.84|
;;;165        }
;;;166    }
000054  e28dd00c          ADD      sp,sp,#0xc
000058  e8bd501f          POP      {r0-r4,r12,lr}
00005c  e25ef004          SUBS     pc,lr,#4
;;;167    
                          ENDP

                  |L15.96|
                          DCD      0xb8002000
                  |L15.100|
                          DCD      ||.data||+0x4

                          AREA ||i.sysSetGlobalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetGlobalInterrupt PROC
;;;346    
;;;347    INT32 sysSetGlobalInterrupt(INT32 nIntState)
000000  e59f2024          LDR      r2,|L16.44|
;;;348    {
;;;349        switch (nIntState) {
000004  e3500000          CMP      r0,#0
;;;350            case ENABLE_ALL_INTERRUPTS:
;;;351                outpw(REG_AIC_MECR, 0xFFFFFFFF);
000008  e3e01000          MVN      r1,#0
00000c  05821130          STREQ    r1,[r2,#0x130]
;;;352                outpw(REG_AIC_MECRH, 0xFFFFFFFF);
000010  05821134          STREQ    r1,[r2,#0x134]
000014  0a000002          BEQ      |L16.36|
000018  e3500001          CMP      r0,#1                 ;349
;;;353                break;
;;;354    
;;;355            case DISABLE_ALL_INTERRUPTS:
;;;356                outpw(REG_AIC_MDCR, 0xFFFFFFFF);
00001c  05821138          STREQ    r1,[r2,#0x138]
;;;357                outpw(REG_AIC_MDCRH, 0xFFFFFFFF);
000020  0582113c          STREQ    r1,[r2,#0x13c]
                  |L16.36|
;;;358                break;
;;;359    
;;;360            default:
;;;361                ;
;;;362        }
;;;363        return 0;
000024  e3a00000          MOV      r0,#0
;;;364    }
000028  e12fff1e          BX       lr
;;;365    
                          ENDP

                  |L16.44|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptPriorityLevel||, CODE, READONLY, ALIGN=2

                  sysSetInterruptPriorityLevel PROC
;;;375     */
;;;376    INT32 sysSetInterruptPriorityLevel(IRQn_Type eIntNo, UINT32 uIntLevel)
000000  e2402001          SUB      r2,r0,#1
;;;377    {
;;;378        UINT32  _mRegAddr;
;;;379        INT     shift;
;;;380    
;;;381        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e352003e          CMP      r2,#0x3e
;;;382            return 1;
000008  23a00001          MOVCS    r0,#1
;;;383    
;;;384        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;385        shift = (eIntNo % 4) * 8;
;;;386        uIntLevel &= 0x7;
;;;387        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0x07 << shift)) | (uIntLevel << shift));
;;;388    
;;;389        return 0;
;;;390    }
00000c  212fff1e          BXCS     lr
000010  e3c02003          BIC      r2,r0,#3              ;384
000014  e1a00f00          LSL      r0,r0,#30             ;385
000018  e1a00da0          LSR      r0,r0,#27             ;385
00001c  e59f301c          LDR      r3,|L17.64|
000020  e2011007          AND      r1,r1,#7              ;386
000024  e7b23003          LDR      r3,[r2,r3]!           ;387
000028  e3a0c007          MOV      r12,#7                ;387
00002c  e1c3301c          BIC      r3,r3,r12,LSL r0      ;387
000030  e1830011          ORR      r0,r3,r1,LSL r0       ;387
000034  e5820000          STR      r0,[r2,#0]            ;387
000038  e3a00000          MOV      r0,#0                 ;389
00003c  e12fff1e          BX       lr
;;;391    
                          ENDP

                  |L17.64|
                          DCD      0xb8002000

                          AREA ||i.sysSetInterruptType||, CODE, READONLY, ALIGN=2

                  sysSetInterruptType PROC
;;;392    
;;;393    INT32 sysSetInterruptType(IRQn_Type eIntNo, UINT32 uIntSourceType)
000000  e2402001          SUB      r2,r0,#1
;;;394    {
;;;395        UINT32 _mRegAddr;
;;;396        INT     shift;
;;;397    
;;;398        if ((eIntNo > SYS_MAX_INT_SOURCE) || (eIntNo < SYS_MIN_INT_SOURCE))
000004  e352003e          CMP      r2,#0x3e
;;;399            return 1;
000008  23a00001          MOVCS    r0,#1
;;;400    
;;;401        _mRegAddr = REG_AIC_SCR1 + ((eIntNo / 4) * 4);
;;;402        shift = (eIntNo % 4) * 8;
;;;403        uIntSourceType &= 0xC0;
;;;404        outpw(_mRegAddr, (inpw(_mRegAddr) & ~(0xC0 << shift)) | (uIntSourceType << shift));
;;;405    
;;;406        return 0;
;;;407    }
00000c  212fff1e          BXCS     lr
000010  e3c02003          BIC      r2,r0,#3              ;401
000014  e1a00f00          LSL      r0,r0,#30             ;402
000018  e1a00da0          LSR      r0,r0,#27             ;402
00001c  e59f301c          LDR      r3,|L18.64|
000020  e20110c0          AND      r1,r1,#0xc0           ;403
000024  e7b23003          LDR      r3,[r2,r3]!           ;404
000028  e3a0c0c0          MOV      r12,#0xc0             ;404
00002c  e1c3301c          BIC      r3,r3,r12,LSL r0      ;404
000030  e1830011          ORR      r0,r3,r1,LSL r0       ;404
000034  e5820000          STR      r0,[r2,#0]            ;404
000038  e3a00000          MOV      r0,#0                 ;406
00003c  e12fff1e          BX       lr
;;;408    
                          ENDP

                  |L18.64|
                          DCD      0xb8002000

                          AREA ||i.sysSetLocalInterrupt||, CODE, READONLY, ALIGN=2

                  sysSetLocalInterrupt PROC
;;;417     */
;;;418    INT32 sysSetLocalInterrupt(INT32 nIntState)
000000  e3500080          CMP      r0,#0x80
;;;419    {
;;;420        INT32 temp;
;;;421    
;;;422        switch (nIntState) {
000004  0a000010          BEQ      |L19.76|
000008  ca000006          BGT      |L19.40|
00000c  e350003f          CMP      r0,#0x3f
000010  0a000009          BEQ      |L19.60|
000014  e3500040          CMP      r0,#0x40
000018  0a00000b          BEQ      |L19.76|
00001c  e350007f          CMP      r0,#0x7f
000020  0a000005          BEQ      |L19.60|
000024  ea00000b          B        |L19.88|
                  |L19.40|
000028  e35000bf          CMP      r0,#0xbf
00002c  0a000002          BEQ      |L19.60|
000030  e35000c0          CMP      r0,#0xc0
000034  0a000004          BEQ      |L19.76|
000038  ea000006          B        |L19.88|
                  |L19.60|
;;;423            case ENABLE_IRQ:
;;;424            case ENABLE_FIQ:
;;;425            case ENABLE_FIQ_IRQ:
;;;426                __asm {
;;;427                    MRS    temp, CPSR
00003c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;428                    AND    temp, temp, nIntState
000040  e0010000          AND      r0,r1,r0
;;;429                    MSR    CPSR_c, temp
000044  e121f000          MSR      CPSR_c,r0
;;;430                }
;;;431                break;
000048  ea000002          B        |L19.88|
                  |L19.76|
;;;432    
;;;433            case DISABLE_IRQ:
;;;434            case DISABLE_FIQ:
;;;435            case DISABLE_FIQ_IRQ:
;;;436                __asm {
;;;437                    MRS    temp, CPSR
00004c  e10f1000          MRS      r1,APSR ; formerly CPSR
;;;438                    ORR    temp, temp, nIntState
000050  e1810000          ORR      r0,r1,r0
;;;439                    MSR    CPSR_c, temp
000054  e121f000          MSR      CPSR_c,r0
                  |L19.88|
;;;440                }
;;;441                break;
;;;442    
;;;443            default:
;;;444                ;
;;;445        }
;;;446        return 0;
000058  e3a00000          MOV      r0,#0
;;;447    }
00005c  e12fff1e          BX       lr
;;;448    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsAICInitial
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  sysIrqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                  sysFiqHandlerTable
                          DCD      0x00000000
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
                          DCD      SYS_Interrupt_Shell
