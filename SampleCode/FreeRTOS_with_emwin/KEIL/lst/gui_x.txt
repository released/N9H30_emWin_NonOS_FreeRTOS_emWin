; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_x.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\gui_x.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\gui_x.crf ..\..\..\ThirdParty\emWin\Config\GUI_X.c]
                          ARM

                          AREA ||i.GUI_X_Delay||, CODE, READONLY, ALIGN=2

                  GUI_X_Delay PROC
;;;74     
;;;75     void GUI_X_Delay(int ms) { 
000000  e59f1018          LDR      r1,|L1.32|
;;;76       int tEnd = OS_TimeMS + ms;
000004  e5912000          LDR      r2,[r1,#0]  ; OS_TimeMS
000008  e0800002          ADD      r0,r0,r2
                  |L1.12|
;;;77       while ((tEnd - OS_TimeMS) > 0);
00000c  e5912000          LDR      r2,[r1,#0]  ; OS_TimeMS
000010  e0402002          SUB      r2,r0,r2
000014  e3520000          CMP      r2,#0
000018  cafffffb          BGT      |L1.12|
;;;78     }
00001c  e12fff1e          BX       lr
;;;79     
                          ENDP

                  |L1.32|
                          DCD      ||.data||

                          AREA ||i.GUI_X_ErrorOut||, CODE, READONLY, ALIGN=2

                  GUI_X_ErrorOut PROC
;;;118    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
;;;119    void GUI_X_ErrorOut(const char *s) { GUI_USE_PARA(s); }
000000  e12fff1e          BX       lr
;;;120    
                          ENDP


                          AREA ||i.GUI_X_ExecIdle||, CODE, READONLY, ALIGN=2

                  GUI_X_ExecIdle PROC
;;;100    
;;;101    void GUI_X_ExecIdle(void) {}
000000  e12fff1e          BX       lr
;;;102    
                          ENDP


                          AREA ||i.GUI_X_GetTaskId||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTaskId PROC
;;;157    }
;;;158    U32  GUI_X_GetTaskId(void) { 
000000  eafffffe          B        xTaskGetCurrentTaskHandle
;;;159    return ((U32) xTaskGetCurrentTaskHandle());
;;;160    
;;;161    //return 1; 
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.GUI_X_GetTime||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTime PROC
;;;70     
;;;71     GUI_TIMER_TIME GUI_X_GetTime(void) { 
000000  e59f0004          LDR      r0,|L5.12|
;;;72       return OS_TimeMS; 
000004  e5900000          LDR      r0,[r0,#0]  ; OS_TimeMS
;;;73     }
000008  e12fff1e          BX       lr
;;;74     
                          ENDP

                  |L5.12|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Init||, CODE, READONLY, ALIGN=2

                  GUI_X_Init PROC
;;;89     
;;;90     void GUI_X_Init(void) {}
000000  e12fff1e          BX       lr
;;;91     
                          ENDP


                          AREA ||i.GUI_X_InitOS||, CODE, READONLY, ALIGN=2

                  GUI_X_InitOS PROC
;;;138    
;;;139    void GUI_X_InitOS(void)    {  
000000  e92d4010          PUSH     {r4,lr}
;;;140      xQueueMutex = xSemaphoreCreateMutex();
000004  e3a00001          MOV      r0,#1
000008  ebfffffe          BL       xQueueCreateMutex
00000c  e59f4030          LDR      r4,|L7.68|
;;;141      configASSERT (xQueueMutex != NULL);
;;;142      
;;;143      /* Queue Semaphore */ 
;;;144      vSemaphoreCreateBinary( xSemaTxDone );
000010  e3a02003          MOV      r2,#3
000014  e5840004          STR      r0,[r4,#4]  ; xQueueMutex
000018  e3a01000          MOV      r1,#0
00001c  e3a00001          MOV      r0,#1
000020  ebfffffe          BL       xQueueGenericCreate
000024  e3500000          CMP      r0,#0
000028  e5840008          STR      r0,[r4,#8]  ; xSemaTxDone
;;;145      configASSERT ( xSemaTxDone != NULL );
;;;146    }
00002c  08bd8010          POPEQ    {r4,pc}
000030  e3a03000          MOV      r3,#0                 ;144
000034  e8bd4010          POP      {r4,lr}               ;144
000038  e1a02003          MOV      r2,r3                 ;144
00003c  e1a01003          MOV      r1,r3                 ;144
000040  eafffffe          B        xQueueGenericSend
;;;147    void GUI_X_Unlock(void)    {  
                          ENDP

                  |L7.68|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Lock||, CODE, READONLY, ALIGN=2

                  GUI_X_Lock PROC
;;;149    }
;;;150    void GUI_X_Lock(void)      {  
000000  e92d4010          PUSH     {r4,lr}
;;;151      if(xQueueMutex == NULL)
000004  e59f4020          LDR      r4,|L8.44|
000008  e5940004          LDR      r0,[r4,#4]  ; xQueueMutex
00000c  e3500000          CMP      r0,#0
;;;152      {
;;;153        GUI_X_InitOS();
000010  0bfffffe          BLEQ     GUI_X_InitOS
;;;154      }
;;;155      
;;;156      xSemaphoreTake( xQueueMutex, portMAX_DELAY );
000014  e5940004          LDR      r0,[r4,#4]  ; xQueueMutex
000018  e8bd4010          POP      {r4,lr}
00001c  e3a03000          MOV      r3,#0
000020  e3e02000          MVN      r2,#0
000024  e1a01003          MOV      r1,r3
000028  eafffffe          B        xQueueGenericReceive
;;;157    }
;;;158    U32  GUI_X_GetTaskId(void) { 
                          ENDP

                  |L8.44|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Log||, CODE, READONLY, ALIGN=2

                  GUI_X_Log PROC
;;;116    
;;;117    void GUI_X_Log     (const char *s) { GUI_USE_PARA(s); }
000000  e12fff1e          BX       lr
;;;118    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
                          ENDP


                          AREA ||i.GUI_X_SignalEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_SignalEvent PROC
;;;176    }
;;;177    void GUI_X_SignalEvent(void)          {  
000000  e59f0010          LDR      r0,|L10.24|
;;;178      xSemaphoreGive( xSemaTxDone );
000004  e3a03000          MOV      r3,#0
000008  e5900008          LDR      r0,[r0,#8]  ; xSemaTxDone
00000c  e1a02003          MOV      r2,r3
000010  e1a01003          MOV      r1,r3
000014  eafffffe          B        xQueueGenericSend
;;;179    }
;;;180    void GUI_X_WaitEventTimed(int Period) {  }
                          ENDP

                  |L10.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Unlock||, CODE, READONLY, ALIGN=2

                  GUI_X_Unlock PROC
;;;146    }
;;;147    void GUI_X_Unlock(void)    {  
000000  e59f0010          LDR      r0,|L11.24|
;;;148      xSemaphoreGive( xQueueMutex ); 
000004  e3a03000          MOV      r3,#0
000008  e5900004          LDR      r0,[r0,#4]  ; xQueueMutex
00000c  e1a02003          MOV      r2,r3
000010  e1a01003          MOV      r1,r3
000014  eafffffe          B        xQueueGenericSend
;;;149    }
;;;150    void GUI_X_Lock(void)      {  
                          ENDP

                  |L11.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_WaitEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitEvent PROC
;;;173    
;;;174    void GUI_X_WaitEvent(void)            {  
000000  e92d4010          PUSH     {r4,lr}
;;;175      while( xSemaphoreTake(xSemaTxDone, portMAX_DELAY ) != pdTRUE );
000004  e59f401c          LDR      r4,|L12.40|
                  |L12.8|
000008  e3a03000          MOV      r3,#0
00000c  e5940008          LDR      r0,[r4,#8]  ; xSemaTxDone
000010  e3e02000          MVN      r2,#0
000014  e1a01003          MOV      r1,r3
000018  ebfffffe          BL       xQueueGenericReceive
00001c  e3500001          CMP      r0,#1
000020  1afffff8          BNE      |L12.8|
;;;176    }
000024  e8bd8010          POP      {r4,pc}
;;;177    void GUI_X_SignalEvent(void)          {  
                          ENDP

                  |L12.40|
                          DCD      ||.data||

                          AREA ||i.GUI_X_WaitEventTimed||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitEventTimed PROC
;;;179    }
;;;180    void GUI_X_WaitEventTimed(int Period) {  }
000000  e12fff1e          BX       lr
;;;181    
                          ENDP


                          AREA ||i.GUI_X_Warn||, CODE, READONLY, ALIGN=2

                  GUI_X_Warn PROC
;;;117    void GUI_X_Log     (const char *s) { GUI_USE_PARA(s); }
;;;118    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
000000  e12fff1e          BX       lr
;;;119    void GUI_X_ErrorOut(const char *s) { GUI_USE_PARA(s); }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  OS_TimeMS
                          DCD      0x00000000
                  xQueueMutex
                          DCD      0x00000000
                  xSemaTxDone
                          DCD      0x00000000
