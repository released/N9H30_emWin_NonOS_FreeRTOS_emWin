; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\2d.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\2d.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\2d.crf ..\..\..\Driver\Source\2d.c]
                          ARM

                          AREA ||i.ge2dBitblt_ScreenToScreen||, CODE, READONLY, ALIGN=2

                  ge2dBitblt_ScreenToScreen PROC
;;;869      */
;;;870    void ge2dBitblt_ScreenToScreen(int srcx, int srcy, int destx, int desty, int width, int height)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;871    {
;;;872        UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;873        UINT32 data32, alpha;
;;;874    
;;;875    #ifdef DEBUG
;;;876        sysprintf("screen_to_screen_blt():\n");
;;;877        sysprintf("(%d,%d)=>(%d,%d)\n", srcx, srcy, destx, desty);
;;;878        sysprintf("width=%d height=%d\n", width, height);
;;;879    #endif
;;;880    
;;;881        cmd32 = 0xcc430000;
000004  e59fc144          LDR      r12,|L1.336|
;;;882    
;;;883        outpw(REG_GE2D_CTL, cmd32);
000008  e59f4144          LDR      r4,|L1.340|
00000c  e59d501c          LDR      r5,[sp,#0x1c]         ;881
000010  e59d6018          LDR      r6,[sp,#0x18]         ;881
000014  e584c020          STR      r12,[r4,#0x20]
;;;884    
;;;885        if (srcx > destx) { //+X
000018  e1500002          CMP      r0,r2
;;;886            if (srcy > desty) { //+Y
;;;887            } else { //-Y
;;;888                cmd32 |= 0x08;
;;;889                srcy = srcy + height - 1;
00001c  e0818005          ADD      r8,r1,r5
;;;890                desty = desty + height - 1;
000020  e0837005          ADD      r7,r3,r5
000024  da000028          BLE      |L1.204|
000028  e1510003          CMP      r1,r3                 ;886
00002c  d28cc008          ADDLE    r12,r12,#8            ;888
000030  d2481001          SUBLE    r1,r8,#1              ;889
000034  d2473001          SUBLE    r3,r7,#1
                  |L1.56|
;;;891            }
;;;892        } else { //-X
;;;893            if (srcy > desty) { //+Y
;;;894                cmd32 |= 0x04; // 010
;;;895                srcx = srcx + width - 1;
;;;896                destx = destx + width - 1;
;;;897            } else { //-Y
;;;898                cmd32 |= 0xc; // 110
;;;899                srcx = srcx + width - 1;
;;;900                destx = destx + width - 1;
;;;901                srcy = srcy + height - 1;
;;;902                desty = desty + height - 1;
;;;903            }
;;;904        }
;;;905    
;;;906    #ifdef DEBUG
;;;907        sysprintf("new srcx=%d srcy=%d\n", srcx, srcy);
;;;908        sysprintf("new destx=%d desty=%d\n", destx, desty);
;;;909    #endif
;;;910    
;;;911        outpw(REG_GE2D_CTL, cmd32);
000038  e584c020          STR      r12,[r4,#0x20]
;;;912    
;;;913        pitch = GFX_WIDTH << 16 | GFX_WIDTH;
00003c  e59f7114          LDR      r7,|L1.344|
000040  e597800c          LDR      r8,[r7,#0xc]  ; GFX_WIDTH
000044  e1888808          ORR      r8,r8,r8,LSL #16
;;;914        outpw(REG_GE2D_SDPITCH, pitch);
000048  e5848038          STR      r8,[r4,#0x38]
;;;915    
;;;916        src_start = srcy << 16 | srcx;
00004c  e1800801          ORR      r0,r0,r1,LSL #16
;;;917        outpw(REG_GE2D_SRCSPA, src_start);
000050  e584003c          STR      r0,[r4,#0x3c]
;;;918    
;;;919        dest_start = desty << 16 | destx;
000054  e1820803          ORR      r0,r2,r3,LSL #16
;;;920        outpw(REG_GE2D_DSTSPA, dest_start);
000058  e5840040          STR      r0,[r4,#0x40]
;;;921    
;;;922        dimension = height << 16 | width;
00005c  e1860805          ORR      r0,r6,r5,LSL #16
;;;923        outpw(REG_GE2D_RTGLSZ, dimension);
000060  e5840044          STR      r0,[r4,#0x44]
;;;924    
;;;925        //
;;;926        // force to use the same starting address
;;;927        //
;;;928        outpw(REG_GE2D_XYSORG, (int)GFX_START_ADDR);
000064  e5970020          LDR      r0,[r7,#0x20]  ; GFX_START_ADDR
000068  e5840004          STR      r0,[r4,#4]
;;;929        outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);  //smf
00006c  e5840034          STR      r0,[r4,#0x34]
;;;930    
;;;931        if (_ClipEnable) {
000070  e5d70002          LDRB     r0,[r7,#2]  ; _ClipEnable
000074  e3500000          CMP      r0,#0
000078  0a000008          BEQ      |L1.160|
;;;932            cmd32 |= 0x00000200;
;;;933            if (_OutsideClip) {
00007c  e5d70003          LDRB     r0,[r7,#3]  ; _OutsideClip
000080  e38ccc02          ORR      r12,r12,#0x200        ;932
000084  e3500000          CMP      r0,#0
;;;934                cmd32 |= 0x00000100;
000088  138ccc01          ORRNE    r12,r12,#0x100
;;;935            }
;;;936            outpw(REG_GE2D_CTL, cmd32);
00008c  e584c020          STR      r12,[r4,#0x20]
;;;937            outpw(REG_GE2D_CLPBTL, _ClipTL);
000090  e59700ec          LDR      r0,[r7,#0xec]  ; _ClipTL
000094  e5840048          STR      r0,[r4,#0x48]
;;;938            outpw(REG_GE2D_CLPBBR, _ClipBR);
000098  e59700f0          LDR      r0,[r7,#0xf0]  ; _ClipBR
00009c  e584004c          STR      r0,[r4,#0x4c]
                  |L1.160|
;;;939        }
;;;940    
;;;941        if (_DrawMode==MODE_TRANSPARENT) {
0000a0  e5d72000          LDRB     r2,[r7,#0]  ; _DrawMode
0000a4  e59f00ac          LDR      r0,|L1.344|
;;;942            cmd32 |= 0x00008000; // color transparency
;;;943            outpw(REG_GE2D_CTL, cmd32);
;;;944            outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;945            outpw(REG_GE2D_TCMSK, _ColorKeyMask);
0000a8  e59010dc          LDR      r1,[r0,#0xdc]
0000ac  e59000e0          LDR      r0,[r0,#0xe0]
0000b0  e3520001          CMP      r2,#1                 ;941
0000b4  038cc902          ORREQ    r12,r12,#0x8000       ;942
0000b8  0a00000d          BEQ      |L1.244|
;;;946        } else if (_DrawMode==MODE_DEST_TRANSPARENT) {
0000bc  e3520002          CMP      r2,#2
;;;947            cmd32 |= 0x00009000;   // destination pixels control transparency
0000c0  038cca09          ORREQ    r12,r12,#0x9000
0000c4  0a00000a          BEQ      |L1.244|
0000c8  ea00000c          B        |L1.256|
                  |L1.204|
0000cc  e1510003          CMP      r1,r3                 ;893
0000d0  e0800006          ADD      r0,r0,r6              ;895
0000d4  e0822006          ADD      r2,r2,r6              ;896
0000d8  c59fc07c          LDRGT    r12,|L1.348|
0000dc  d59fc07c          LDRLE    r12,|L1.352|
0000e0  d2481001          SUBLE    r1,r8,#1              ;901
0000e4  d2473001          SUBLE    r3,r7,#1              ;902
0000e8  e2400001          SUB      r0,r0,#1              ;902
0000ec  e2422001          SUB      r2,r2,#1              ;902
0000f0  eaffffd0          B        |L1.56|
                  |L1.244|
;;;948            outpw(REG_GE2D_CTL, cmd32);
0000f4  e584c020          STR      r12,[r4,#0x20]
;;;949            outpw(REG_GE2D_TRNSCOLR, _ColorKey);
0000f8  e584102c          STR      r1,[r4,#0x2c]
;;;950            outpw(REG_GE2D_TCMSK, _ColorKeyMask);
0000fc  e5840030          STR      r0,[r4,#0x30]
                  |L1.256|
;;;951        }
;;;952    
;;;953        if (_EnableAlpha) {
000100  e5d70001          LDRB     r0,[r7,#1]  ; _EnableAlpha
000104  e3500000          CMP      r0,#0
000108  0a000009          BEQ      |L1.308|
;;;954            cmd32 |= 0x00200000;
00010c  e38c0602          ORR      r0,r12,#0x200000
;;;955            outpw(REG_GE2D_CTL, cmd32);
000110  e5840020          STR      r0,[r4,#0x20]
;;;956    
;;;957            data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
000114  e594005c          LDR      r0,[r4,#0x5c]
;;;958            alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
000118  e1d71eb8          LDRH     r1,[r7,#0xe8]  ; _AlphaKd
00011c  e5d720e4          LDRB     r2,[r7,#0xe4]  ; _AlphaKs
000120  e1a00800          LSL      r0,r0,#16             ;957
000124  e1a00820          LSR      r0,r0,#16             ;957
000128  e1811402          ORR      r1,r1,r2,LSL #8
;;;959            data32 |= (alpha << 16);
00012c  e1800801          ORR      r0,r0,r1,LSL #16
;;;960    
;;;961            outpw(REG_GE2D_MISCTL, data32);
000130  e584005c          STR      r0,[r4,#0x5c]
                  |L1.308|
;;;962        }
;;;963    
;;;964        outpw(REG_GE2D_TRG, 1);
000134  e3a01001          MOV      r1,#1
000138  e5841000          STR      r1,[r4,#0]
                  |L1.316|
;;;965    
;;;966        while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
00013c  e5940010          LDR      r0,[r4,#0x10]
000140  e3100001          TST      r0,#1
;;;967    
;;;968        outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000144  15841010          STRNE    r1,[r4,#0x10]
000148  0afffffb          BEQ      |L1.316|
;;;969    }
00014c  e8bd81f0          POP      {r4-r8,pc}
;;;970    
                          ENDP

                  |L1.336|
                          DCD      0xcc430000
                  |L1.340|
                          DCD      0xb000b000
                  |L1.344|
                          DCD      ||.data||
                  |L1.348|
                          DCD      0xcc430004
                  |L1.352|
                          DCD      0xcc43000c

                          AREA ||i.ge2dBitblt_ScreenToScreenRop||, CODE, READONLY, ALIGN=2

                  ge2dBitblt_ScreenToScreenRop PROC
;;;981      */
;;;982    void ge2dBitblt_ScreenToScreenRop(int srcx, int srcy, int destx, int desty, int width, int height, int rop)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;983    {
;;;984        UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;985        UINT32 data32, alpha;
;;;986    
;;;987    #ifdef DEBUG
;;;988        sysprintf("screen_to_screen_rop_blt():\n");
;;;989        sysprintf("ROP=0x%x\n", rop);
;;;990        sysprintf("(%d,%d)=>(%d,%d)\n", srcx, srcy, destx, desty);
;;;991        sysprintf("width=%d height=%d\n", width, height);
;;;992    #endif
;;;993    
;;;994        cmd32 = 0x00430000 | (rop << 24);
;;;995    
;;;996        if (_PatternType==TYPE_MONO) {
000004  e59fa16c          LDR      r10,|L2.376|
000008  e59d6028          LDR      r6,[sp,#0x28]         ;994
00000c  e59a40f4          LDR      r4,[r10,#0xf4]  ; _PatternType
000010  e3a0c843          MOV      r12,#0x430000         ;994
;;;997            cmd32 |= 0x00000010; // default is TYPE_COLOR
;;;998        }
;;;999    
;;;1000       outpw(REG_GE2D_CTL, cmd32);
000014  e59f9160          LDR      r9,|L2.380|
000018  e3540000          CMP      r4,#0                 ;996
00001c  e18ccc06          ORR      r12,r12,r6,LSL #24    ;994
000020  e59d7024          LDR      r7,[sp,#0x24]         ;996
000024  e59d8020          LDR      r8,[sp,#0x20]         ;996
000028  038cc010          ORREQ    r12,r12,#0x10         ;997
00002c  e589c020          STR      r12,[r9,#0x20]
;;;1001   
;;;1002       if (srcx > destx) { //+X
000030  e1500002          CMP      r0,r2
;;;1003           if (srcy > desty) { //+Y
;;;1004           } else { //-Y
;;;1005               cmd32 |= 0x08;
;;;1006               srcy = srcy + height - 1;
000034  e0815007          ADD      r5,r1,r7
;;;1007               desty = desty + height - 1;
000038  e0834007          ADD      r4,r3,r7
00003c  da000027          BLE      |L2.224|
000040  e1510003          CMP      r1,r3                 ;1003
000044  d38cc008          ORRLE    r12,r12,#8            ;1005
000048  d2451001          SUBLE    r1,r5,#1              ;1006
00004c  d2443001          SUBLE    r3,r4,#1
                  |L2.80|
;;;1008           }
;;;1009       } else { //-X
;;;1010           if (srcy > desty) { //+Y
;;;1011               cmd32 |= 0x04; // 010
;;;1012               srcx = srcx + width - 1;
;;;1013               destx = destx + width - 1;
;;;1014           } else { //-Y
;;;1015               cmd32 |= 0xc; // 110
;;;1016               srcx = srcx + width - 1;
;;;1017               destx = destx + width - 1;
;;;1018               srcy = srcy + height - 1;
;;;1019               desty = desty + height - 1;
;;;1020           }
;;;1021       }
;;;1022   
;;;1023   #ifdef DEBUG
;;;1024       sysprintf("new srcx=%d srcy=%d\n", srcx, srcy);
;;;1025       sysprintf("new destx=%d desty=%d\n", destx, desty);
;;;1026   #endif
;;;1027   
;;;1028       outpw(REG_GE2D_CTL, cmd32);
000050  e589c020          STR      r12,[r9,#0x20]
;;;1029   
;;;1030       pitch = GFX_WIDTH << 16 | GFX_WIDTH; // pitch in pixel
000054  e59a400c          LDR      r4,[r10,#0xc]  ; GFX_WIDTH
000058  e1844804          ORR      r4,r4,r4,LSL #16
;;;1031       outpw(REG_GE2D_SDPITCH, pitch);
00005c  e5894038          STR      r4,[r9,#0x38]
;;;1032   
;;;1033       src_start = srcy << 16 | srcx;
000060  e1800801          ORR      r0,r0,r1,LSL #16
;;;1034       outpw(REG_GE2D_SRCSPA, src_start);
000064  e589003c          STR      r0,[r9,#0x3c]
;;;1035   
;;;1036       dest_start = desty << 16 | destx;
000068  e1820803          ORR      r0,r2,r3,LSL #16
;;;1037       outpw(REG_GE2D_DSTSPA, dest_start);
00006c  e5890040          STR      r0,[r9,#0x40]
;;;1038   
;;;1039       dimension = height << 16 | width;
000070  e1880807          ORR      r0,r8,r7,LSL #16
;;;1040       outpw(REG_GE2D_RTGLSZ, dimension);
000074  e5890044          STR      r0,[r9,#0x44]
;;;1041   
;;;1042       //
;;;1043       // force to use the same starting address
;;;1044       //
;;;1045       outpw(REG_GE2D_XYSORG, (int)GFX_START_ADDR);
000078  e59a0020          LDR      r0,[r10,#0x20]  ; GFX_START_ADDR
00007c  e5890004          STR      r0,[r9,#4]
;;;1046       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);  //smf
000080  e5890034          STR      r0,[r9,#0x34]
;;;1047   
;;;1048       if (_ClipEnable) {
000084  e5da0002          LDRB     r0,[r10,#2]  ; _ClipEnable
000088  e3500000          CMP      r0,#0
00008c  0a000008          BEQ      |L2.180|
;;;1049           cmd32 |= 0x00000200;
;;;1050           if (_OutsideClip) {
000090  e5da0003          LDRB     r0,[r10,#3]  ; _OutsideClip
000094  e38ccc02          ORR      r12,r12,#0x200        ;1049
000098  e3500000          CMP      r0,#0
;;;1051               cmd32 |= 0x00000100;
00009c  138ccc01          ORRNE    r12,r12,#0x100
;;;1052           }
;;;1053           outpw(REG_GE2D_CTL, cmd32);
0000a0  e589c020          STR      r12,[r9,#0x20]
;;;1054           outpw(REG_GE2D_CLPBTL, _ClipTL);
0000a4  e59a00ec          LDR      r0,[r10,#0xec]  ; _ClipTL
0000a8  e5890048          STR      r0,[r9,#0x48]
;;;1055           outpw(REG_GE2D_CLPBBR, _ClipBR);
0000ac  e59a00f0          LDR      r0,[r10,#0xf0]  ; _ClipBR
0000b0  e589004c          STR      r0,[r9,#0x4c]
                  |L2.180|
;;;1056       }
;;;1057   
;;;1058       if (_DrawMode==MODE_TRANSPARENT) {
0000b4  e5da2000          LDRB     r2,[r10,#0]  ; _DrawMode
0000b8  e59f00b8          LDR      r0,|L2.376|
;;;1059           cmd32 |= 0x00008000; // color transparency
;;;1060           outpw(REG_GE2D_CTL, cmd32);
;;;1061           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;1062           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
0000bc  e59010dc          LDR      r1,[r0,#0xdc]
0000c0  e59000e0          LDR      r0,[r0,#0xe0]
0000c4  e3520001          CMP      r2,#1                 ;1058
0000c8  038cc902          ORREQ    r12,r12,#0x8000       ;1059
0000cc  0a00000d          BEQ      |L2.264|
;;;1063       } else if (_DrawMode==MODE_DEST_TRANSPARENT) {
0000d0  e3520002          CMP      r2,#2
;;;1064           cmd32 |= 0x00009000;
0000d4  038cca09          ORREQ    r12,r12,#0x9000
0000d8  0a00000a          BEQ      |L2.264|
0000dc  ea00000c          B        |L2.276|
                  |L2.224|
0000e0  e1510003          CMP      r1,r3                 ;1010
0000e4  e0800008          ADD      r0,r0,r8              ;1012
0000e8  e0822008          ADD      r2,r2,r8              ;1013
0000ec  c38cc004          ORRGT    r12,r12,#4            ;1011
0000f0  d38cc00c          ORRLE    r12,r12,#0xc          ;1015
0000f4  d2451001          SUBLE    r1,r5,#1              ;1018
0000f8  d2443001          SUBLE    r3,r4,#1              ;1019
0000fc  e2400001          SUB      r0,r0,#1              ;1019
000100  e2422001          SUB      r2,r2,#1              ;1019
000104  eaffffd1          B        |L2.80|
                  |L2.264|
;;;1065           outpw(REG_GE2D_CTL, cmd32);
000108  e589c020          STR      r12,[r9,#0x20]
;;;1066           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
00010c  e589102c          STR      r1,[r9,#0x2c]
;;;1067           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
000110  e5890030          STR      r0,[r9,#0x30]
                  |L2.276|
;;;1068       }
;;;1069   
;;;1070       if (_EnableAlpha) {
000114  e5da0001          LDRB     r0,[r10,#1]  ; _EnableAlpha
000118  e3500000          CMP      r0,#0
00011c  0a000009          BEQ      |L2.328|
;;;1071           cmd32 |= 0x00200000;
000120  e38cc602          ORR      r12,r12,#0x200000
;;;1072           outpw(REG_GE2D_CTL, cmd32);
000124  e589c020          STR      r12,[r9,#0x20]
;;;1073   
;;;1074           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
000128  e599005c          LDR      r0,[r9,#0x5c]
;;;1075           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
00012c  e1da1eb8          LDRH     r1,[r10,#0xe8]  ; _AlphaKd
000130  e5da20e4          LDRB     r2,[r10,#0xe4]  ; _AlphaKs
000134  e1a00800          LSL      r0,r0,#16             ;1074
000138  e1a00820          LSR      r0,r0,#16             ;1074
00013c  e1811402          ORR      r1,r1,r2,LSL #8
;;;1076           data32 |= (alpha << 16);
000140  e1800801          ORR      r0,r0,r1,LSL #16
;;;1077   
;;;1078           outpw(REG_GE2D_MISCTL, data32);
000144  e589005c          STR      r0,[r9,#0x5c]
                  |L2.328|
;;;1079       }
;;;1080   
;;;1081       if ((rop==0x00) || (rop==0xff)) {
000148  e3560000          CMP      r6,#0
00014c  135600ff          CMPNE    r6,#0xff
;;;1082           cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
000150  03cc0a0f          BICEQ    r0,r12,#0xf000
000154  03800a09          ORREQ    r0,r0,#0x9000
;;;1083           outpw(REG_GE2D_CTL, cmd32);
000158  05890020          STREQ    r0,[r9,#0x20]
;;;1084       }
;;;1085   
;;;1086       outpw(REG_GE2D_TRG, 1);
00015c  e3a01001          MOV      r1,#1
000160  e5891000          STR      r1,[r9,#0]
                  |L2.356|
;;;1087   
;;;1088       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000164  e5990010          LDR      r0,[r9,#0x10]
000168  e3100001          TST      r0,#1
;;;1089   
;;;1090       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00016c  15891010          STRNE    r1,[r9,#0x10]
000170  0afffffb          BEQ      |L2.356|
;;;1091   }
000174  e8bd87f0          POP      {r4-r10,pc}
;;;1092   
                          ENDP

                  |L2.376|
                          DCD      ||.data||
                  |L2.380|
                          DCD      0xb000b000

                          AREA ||i.ge2dBitblt_SetAlphaMode||, CODE, READONLY, ALIGN=2

                  ge2dBitblt_SetAlphaMode PROC
;;;843      */
;;;844    int ge2dBitblt_SetAlphaMode(int opt, int ks, int kd)
000000  e0813002          ADD      r3,r1,r2
;;;845    {
;;;846        if (ks + kd > 255)
000004  e35300ff          CMP      r3,#0xff
;;;847            return -1;
000008  c3e00000          MVNGT    r0,#0
;;;848    
;;;849        if (opt==1) {
;;;850            _EnableAlpha = TRUE;
;;;851            _AlphaKs = ks;
;;;852            _AlphaKd = kd;
;;;853        } else {
;;;854            _EnableAlpha = FALSE;
;;;855        }
;;;856    
;;;857        return 0;
;;;858    }
00000c  c12fff1e          BXGT     lr
000010  e3500001          CMP      r0,#1                 ;849
000014  03a00001          MOVEQ    r0,#1                 ;850
000018  13a00000          MOVNE    r0,#0                 ;854
00001c  e59f3010          LDR      r3,|L3.52|
000020  e5c30001          STRB     r0,[r3,#1]            ;854  ; _EnableAlpha
000024  058310e4          STREQ    r1,[r3,#0xe4]         ;851  ; _AlphaKs
000028  e3a00000          MOV      r0,#0                 ;857
00002c  058320e8          STREQ    r2,[r3,#0xe8]         ;852  ; _AlphaKd
000030  e12fff1e          BX       lr
;;;859    
                          ENDP

                  |L3.52|
                          DCD      ||.data||

                          AREA ||i.ge2dBitblt_SetDrawMode||, CODE, READONLY, ALIGN=2

                  ge2dBitblt_SetDrawMode PROC
;;;813      */
;;;814    void ge2dBitblt_SetDrawMode(int opt, int ckey, int mask)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;815    {
;;;816        if (opt==MODE_TRANSPARENT) {
000004  e3500001          CMP      r0,#1
;;;817            _DrawMode = MODE_TRANSPARENT;
000008  e59f4044          LDR      r4,|L4.84|
;;;818    
;;;819            _ColorKey = make_color(ckey);
;;;820            _ColorKeyMask = make_color(mask);
;;;821    
;;;822            outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;823            outpw(REG_GE2D_TCMSK, _ColorKeyMask);
;;;824        } else if (opt==MODE_DEST_TRANSPARENT) {
00000c  13500002          CMPNE    r0,#2
000010  e59f5038          LDR      r5,|L4.80|
;;;825            _DrawMode = MODE_DEST_TRANSPARENT;
;;;826    
;;;827            _ColorKey = make_color(ckey);
;;;828            _ColorKeyMask = make_color(mask);
;;;829    
;;;830            outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;831            outpw(REG_GE2D_TCMSK, _ColorKeyMask);
;;;832        } else {
;;;833            _DrawMode = MODE_OPAQUE; // default is OPAQUE
000014  13a00000          MOVNE    r0,#0
000018  e1a06002          MOV      r6,r2                 ;815
00001c  15c40000          STRBNE   r0,[r4,#0]  ; _DrawMode
;;;834        }
;;;835    }
000020  18bd8070          POPNE    {r4-r6,pc}
000024  e5c40000          STRB     r0,[r4,#0]            ;817  ; _DrawMode
000028  e1a00001          MOV      r0,r1                 ;819
00002c  ebfffffe          BL       make_color
000030  e58400dc          STR      r0,[r4,#0xdc]         ;819  ; _ColorKey
000034  e1a00006          MOV      r0,r6                 ;820
000038  ebfffffe          BL       make_color
00003c  e58400e0          STR      r0,[r4,#0xe0]         ;822  ; _ColorKeyMask
000040  e59410dc          LDR      r1,[r4,#0xdc]         ;822  ; _ColorKey
000044  e585102c          STR      r1,[r5,#0x2c]         ;822
000048  e5850030          STR      r0,[r5,#0x30]         ;823
00004c  e8bd8070          POP      {r4-r6,pc}
;;;836    
                          ENDP

                  |L4.80|
                          DCD      0xb000b000
                  |L4.84|
                          DCD      ||.data||

                          AREA ||i.ge2dBitblt_SourceToDestination||, CODE, READONLY, ALIGN=2

                  ge2dBitblt_SourceToDestination PROC
;;;1105     */
;;;1106   void ge2dBitblt_SourceToDestination(int srcx, int srcy, int destx, int desty, int width, int height, int srcpitch, int destpitch)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1107   {
;;;1108       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;1109       UINT32 data32, alpha;
;;;1110   
;;;1111   #ifdef DEBUG
;;;1112       sysprintf("source_to_destination_blt():\n");
;;;1113       sysprintf("(%d,%d)=>(%d,%d)\n", srcx, srcy, destx, desty);
;;;1114       sysprintf("width=%d height=%d\n", width, height);
;;;1115   #endif
;;;1116   
;;;1117       cmd32 = 0xcc430000;
000004  e59fc13c          LDR      r12,|L5.328|
;;;1118   
;;;1119       outpw(REG_GE2D_CTL, cmd32);
000008  e59f413c          LDR      r4,|L5.332|
00000c  e59d5024          LDR      r5,[sp,#0x24]         ;1117
000010  e59da028          LDR      r10,[sp,#0x28]        ;1117
000014  e59d6020          LDR      r6,[sp,#0x20]         ;1117
000018  e59d902c          LDR      r9,[sp,#0x2c]         ;1117
00001c  e584c020          STR      r12,[r4,#0x20]
;;;1120   
;;;1121       if (srcx > destx) { //+X
000020  e1500002          CMP      r0,r2
;;;1122           if (srcy > desty) { //+Y
;;;1123           } else { //-Y
;;;1124               cmd32 |= 0x08;
;;;1125               srcy = srcy + height - 1;
000024  e0818005          ADD      r8,r1,r5
;;;1126               desty = desty + height - 1;
000028  e0837005          ADD      r7,r3,r5
00002c  da000024          BLE      |L5.196|
000030  e1510003          CMP      r1,r3                 ;1122
000034  d28cc008          ADDLE    r12,r12,#8            ;1124
000038  d2481001          SUBLE    r1,r8,#1              ;1125
00003c  d2473001          SUBLE    r3,r7,#1
                  |L5.64|
;;;1127           }
;;;1128       } else { //-X
;;;1129           if (srcy > desty) { //+Y
;;;1130               cmd32 |= 0x04; // 010
;;;1131               srcx = srcx + width - 1;
;;;1132               destx = destx + width - 1;
;;;1133           } else { //-Y
;;;1134               cmd32 |= 0xc; // 110
;;;1135               srcx = srcx + width - 1;
;;;1136               destx = destx + width - 1;
;;;1137               srcy = srcy + height - 1;
;;;1138               desty = desty + height - 1;
;;;1139           }
;;;1140       }
;;;1141   
;;;1142   #ifdef DEBUG
;;;1143       sysprintf("new srcx=%d srcy=%d\n", srcx, srcy);
;;;1144       sysprintf("new destx=%d desty=%d\n", destx, desty);
;;;1145   #endif
;;;1146   
;;;1147       outpw(REG_GE2D_CTL, cmd32);
000040  e584c020          STR      r12,[r4,#0x20]
;;;1148   
;;;1149       pitch = destpitch << 16 | srcpitch; // pitch in pixel, back | GFX_WIDTH ??
000044  e18a7809          ORR      r7,r10,r9,LSL #16
;;;1150       outpw(REG_GE2D_SDPITCH, pitch);
000048  e5847038          STR      r7,[r4,#0x38]
;;;1151   
;;;1152       src_start = srcy << 16 | srcx;
00004c  e1800801          ORR      r0,r0,r1,LSL #16
;;;1153       outpw(REG_GE2D_SRCSPA, src_start);
000050  e584003c          STR      r0,[r4,#0x3c]
;;;1154   
;;;1155       dest_start = desty << 16 | destx;
000054  e1820803          ORR      r0,r2,r3,LSL #16
;;;1156       outpw(REG_GE2D_DSTSPA, dest_start);
000058  e5840040          STR      r0,[r4,#0x40]
;;;1157   
;;;1158       dimension = height << 16 | width;
00005c  e1860805          ORR      r0,r6,r5,LSL #16
;;;1159       outpw(REG_GE2D_RTGLSZ, dimension);
000060  e5840044          STR      r0,[r4,#0x44]
;;;1160   
;;;1161   
;;;1162       if (_ClipEnable) {
000064  e59f30e4          LDR      r3,|L5.336|
000068  e5d30002          LDRB     r0,[r3,#2]  ; _ClipEnable
00006c  e3500000          CMP      r0,#0
000070  0a000008          BEQ      |L5.152|
;;;1163           cmd32 |= 0x00000200;
;;;1164           if (_OutsideClip) {
000074  e5d30003          LDRB     r0,[r3,#3]  ; _OutsideClip
000078  e38ccc02          ORR      r12,r12,#0x200        ;1163
00007c  e3500000          CMP      r0,#0
;;;1165               cmd32 |= 0x00000100;
000080  138ccc01          ORRNE    r12,r12,#0x100
;;;1166           }
;;;1167           outpw(REG_GE2D_CTL, cmd32);
000084  e584c020          STR      r12,[r4,#0x20]
;;;1168           outpw(REG_GE2D_CLPBTL, _ClipTL);
000088  e59300ec          LDR      r0,[r3,#0xec]  ; _ClipTL
00008c  e5840048          STR      r0,[r4,#0x48]
;;;1169           outpw(REG_GE2D_CLPBBR, _ClipBR);
000090  e59300f0          LDR      r0,[r3,#0xf0]  ; _ClipBR
000094  e584004c          STR      r0,[r4,#0x4c]
                  |L5.152|
;;;1170       }
;;;1171   
;;;1172       if (_DrawMode==MODE_TRANSPARENT) {
000098  e5d32000          LDRB     r2,[r3,#0]  ; _DrawMode
00009c  e59f00ac          LDR      r0,|L5.336|
;;;1173           cmd32 |= 0x00008000; // color transparency
;;;1174           outpw(REG_GE2D_CTL, cmd32);
;;;1175           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;1176           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
0000a0  e59010dc          LDR      r1,[r0,#0xdc]
0000a4  e59000e0          LDR      r0,[r0,#0xe0]
0000a8  e3520001          CMP      r2,#1                 ;1172
0000ac  038cc902          ORREQ    r12,r12,#0x8000       ;1173
0000b0  0a00000d          BEQ      |L5.236|
;;;1177       } else if (_DrawMode==MODE_DEST_TRANSPARENT) {
0000b4  e3520002          CMP      r2,#2
;;;1178           cmd32 |= 0x00009000;   // destination pixels control transparency
0000b8  038cca09          ORREQ    r12,r12,#0x9000
0000bc  0a00000a          BEQ      |L5.236|
0000c0  ea00000c          B        |L5.248|
                  |L5.196|
0000c4  e1510003          CMP      r1,r3                 ;1129
0000c8  e0800006          ADD      r0,r0,r6              ;1131
0000cc  e0822006          ADD      r2,r2,r6              ;1132
0000d0  c59fc07c          LDRGT    r12,|L5.340|
0000d4  d59fc07c          LDRLE    r12,|L5.344|
0000d8  d2481001          SUBLE    r1,r8,#1              ;1137
0000dc  d2473001          SUBLE    r3,r7,#1              ;1138
0000e0  e2400001          SUB      r0,r0,#1              ;1138
0000e4  e2422001          SUB      r2,r2,#1              ;1138
0000e8  eaffffd4          B        |L5.64|
                  |L5.236|
;;;1179           outpw(REG_GE2D_CTL, cmd32);
0000ec  e584c020          STR      r12,[r4,#0x20]
;;;1180           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
0000f0  e584102c          STR      r1,[r4,#0x2c]
;;;1181           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
0000f4  e5840030          STR      r0,[r4,#0x30]
                  |L5.248|
;;;1182       }
;;;1183   
;;;1184       if (_EnableAlpha) {
0000f8  e5d30001          LDRB     r0,[r3,#1]  ; _EnableAlpha
0000fc  e3500000          CMP      r0,#0
000100  0a000009          BEQ      |L5.300|
;;;1185           cmd32 |= 0x00200000;
000104  e38c0602          ORR      r0,r12,#0x200000
;;;1186           outpw(REG_GE2D_CTL, cmd32);
000108  e5840020          STR      r0,[r4,#0x20]
;;;1187   
;;;1188           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
00010c  e594005c          LDR      r0,[r4,#0x5c]
;;;1189           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
000110  e1d31eb8          LDRH     r1,[r3,#0xe8]  ; _AlphaKd
000114  e5d320e4          LDRB     r2,[r3,#0xe4]  ; _AlphaKs
000118  e1a00800          LSL      r0,r0,#16             ;1188
00011c  e1a00820          LSR      r0,r0,#16             ;1188
000120  e1811402          ORR      r1,r1,r2,LSL #8
;;;1190           data32 |= (alpha << 16);
000124  e1800801          ORR      r0,r0,r1,LSL #16
;;;1191   
;;;1192           outpw(REG_GE2D_MISCTL, data32);
000128  e584005c          STR      r0,[r4,#0x5c]
                  |L5.300|
;;;1193       }
;;;1194   
;;;1195       outpw(REG_GE2D_TRG, 1);
00012c  e3a01001          MOV      r1,#1
000130  e5841000          STR      r1,[r4,#0]
                  |L5.308|
;;;1196   
;;;1197       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000134  e5940010          LDR      r0,[r4,#0x10]
000138  e3100001          TST      r0,#1
;;;1198   
;;;1199       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00013c  15841010          STRNE    r1,[r4,#0x10]
000140  0afffffb          BEQ      |L5.308|
;;;1200   }
000144  e8bd87f0          POP      {r4-r10,pc}
;;;1201   
                          ENDP

                  |L5.328|
                          DCD      0xcc430000
                  |L5.332|
                          DCD      0xb000b000
                  |L5.336|
                          DCD      ||.data||
                  |L5.340|
                          DCD      0xcc430004
                  |L5.344|
                          DCD      0xcc43000c

                          AREA ||i.ge2dClearScreen||, CODE, READONLY, ALIGN=2

                  ge2dClearScreen PROC
;;;653      */
;;;654    void ge2dClearScreen(int color)
000000  e92d4010          PUSH     {r4,lr}
;;;655    {
;;;656        UINT32 cmd32;
;;;657        UINT32 color32, dest_pitch, dest_dimension;
;;;658    
;;;659        color32 = make_color(color);
000004  ebfffffe          BL       make_color
;;;660    
;;;661        cmd32 = 0xcc430040;
000008  e59f2048          LDR      r2,|L6.88|
;;;662        outpw(REG_GE2D_CTL, cmd32);
00000c  e59f1048          LDR      r1,|L6.92|
000010  e5812020          STR      r2,[r1,#0x20]
;;;663        outpw(REG_GE2D_BGCOLR, color32); // fill with background color
000014  e5810024          STR      r0,[r1,#0x24]
;;;664    
;;;665        dest_pitch = GFX_WIDTH << 16; // pitch in pixels
000018  e59f3040          LDR      r3,|L6.96|
00001c  e593000c          LDR      r0,[r3,#0xc]  ; GFX_WIDTH
000020  e1a02800          LSL      r2,r0,#16
;;;666        outpw(REG_GE2D_SDPITCH, dest_pitch);
000024  e5812038          STR      r2,[r1,#0x38]
;;;667    
;;;668        outpw(REG_GE2D_DSTSPA, 0); // starts from (0,0)
000028  e3a02000          MOV      r2,#0
00002c  e5812040          STR      r2,[r1,#0x40]
;;;669    
;;;670        dest_dimension = GFX_HEIGHT << 16 | GFX_WIDTH;
000030  e1d321b0          LDRH     r2,[r3,#0x10]  ; GFX_HEIGHT
000034  e1800802          ORR      r0,r0,r2,LSL #16
;;;671        outpw(REG_GE2D_RTGLSZ, dest_dimension);
000038  e5810044          STR      r0,[r1,#0x44]
;;;672    
;;;673        outpw(REG_GE2D_TRG, 1);
00003c  e3a02001          MOV      r2,#1
000040  e5812000          STR      r2,[r1,#0]
                  |L6.68|
;;;674        while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000044  e5910010          LDR      r0,[r1,#0x10]
000048  e3100001          TST      r0,#1
;;;675        outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00004c  15812010          STRNE    r2,[r1,#0x10]
000050  0afffffb          BEQ      |L6.68|
;;;676    }
000054  e8bd8010          POP      {r4,pc}
;;;677    
                          ENDP

                  |L6.88|
                          DCD      0xcc430040
                  |L6.92|
                          DCD      0xb000b000
                  |L6.96|
                          DCD      ||.data||

                          AREA ||i.ge2dClip_SetClip||, CODE, READONLY, ALIGN=2

                  ge2dClip_SetClip PROC
;;;1209     */
;;;1210   void ge2dClip_SetClip(int x1, int y1, int x2, int y2)
000000  e92d4010          PUSH     {r4,lr}
;;;1211   {
;;;1212   
;;;1213   #ifdef DEBUG
;;;1214       sysprintf("set_clip(): (%d,%d)-(%d,%d)\n", x1, y1, x2, y2);
;;;1215   #endif
;;;1216   
;;;1217       if ((x1>=0) && (y1>=0) && (x2>=0) && (y2>=0)) {
;;;1218           if ((x2 > x1) && (y2 > y1)) {
;;;1219               _ClipEnable = TRUE;
000004  e59fc050          LDR      r12,|L7.92|
000008  e3500000          CMP      r0,#0                 ;1217
00000c  a3510000          CMPGE    r1,#0                 ;1217
000010  e3a04000          MOV      r4,#0                 ;1211
000014  ba00000e          BLT      |L7.84|
000018  e3520000          CMP      r2,#0                 ;1217
00001c  a3530000          CMPGE    r3,#0                 ;1217
000020  ba00000b          BLT      |L7.84|
000024  e1520000          CMP      r2,r0                 ;1218
000028  c1530001          CMPGT    r3,r1                 ;1218
00002c  da000008          BLE      |L7.84|
000030  e3a04001          MOV      r4,#1
;;;1220               /* hardware clipper not includes last pixel */
;;;1221               x2++;
;;;1222               y2++;
;;;1223               _ClipTL = (UINT32)((y1 << 16) | x1);
000034  e1800801          ORR      r0,r0,r1,LSL #16
000038  e5cc4002          STRB     r4,[r12,#2]           ;1219  ; _ClipEnable
00003c  e2822001          ADD      r2,r2,#1
000040  e2833001          ADD      r3,r3,#1
000044  e58c00ec          STR      r0,[r12,#0xec]  ; _ClipTL
;;;1224               _ClipBR = (UINT32)((y2 << 16) | x2);
000048  e1820803          ORR      r0,r2,r3,LSL #16
00004c  e58c00f0          STR      r0,[r12,#0xf0]  ; _ClipBR
;;;1225           } else {
;;;1226               _ClipEnable = FALSE;
;;;1227           }
;;;1228       } else {
;;;1229           _ClipEnable = FALSE;
;;;1230       }
;;;1231   }
000050  e8bd8010          POP      {r4,pc}
                  |L7.84|
000054  e5cc4002          STRB     r4,[r12,#2]           ;1229  ; _ClipEnable
000058  e8bd8010          POP      {r4,pc}
;;;1232   
                          ENDP

                  |L7.92|
                          DCD      ||.data||

                          AREA ||i.ge2dClip_SetClipMode||, CODE, READONLY, ALIGN=2

                  ge2dClip_SetClipMode PROC
;;;1239     */
;;;1240   void ge2dClip_SetClipMode(int opt)
000000  e59f100c          LDR      r1,|L8.20|
;;;1241   {
;;;1242       _OutsideClip = (opt==0) ? FALSE : TRUE;
000004  e3500000          CMP      r0,#0
000008  13a00001          MOVNE    r0,#1
00000c  e5c10003          STRB     r0,[r1,#3]  ; _OutsideClip
;;;1243   
;;;1244       if (_OutsideClip) {
;;;1245   #ifdef DEBUG
;;;1246           sysprintf("set_clip_mode(): OUTSIDE\n");
;;;1247   #endif
;;;1248       } else {
;;;1249   #ifdef DEBUG
;;;1250           sysprintf("set_clip_mode(): INSIDE\n");
;;;1251   #endif
;;;1252       }
;;;1253   }
000010  e12fff1e          BX       lr
;;;1254   
                          ENDP

                  |L8.20|
                          DCD      ||.data||

                          AREA ||i.ge2dColorExpansionBlt||, CODE, READONLY, ALIGN=2

                  ge2dColorExpansionBlt PROC
;;;2552     */
;;;2553   void ge2dColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2554   {
000004  e1a08001          MOV      r8,r1
000008  e1a09000          MOV      r9,r0
00000c  e28d1028          ADD      r1,sp,#0x28
000010  e8910811          LDM      r1,{r0,r4,r11}
000014  e59da034          LDR      r10,[sp,#0x34]
000018  e1a07003          MOV      r7,r3
00001c  e1a05002          MOV      r5,r2
;;;2555       UINT32 cmd32, dest_pitch, src_pitch, pitch, dest_start, dest_dimension;
;;;2556       UINT32 fore_color32, back_color32;
;;;2557   
;;;2558       fore_color32 = make_color(fore_color);
000020  ebfffffe          BL       make_color
000024  e1a06000          MOV      r6,r0
;;;2559       back_color32 = make_color(back_color);
000028  e1a00004          MOV      r0,r4
00002c  ebfffffe          BL       make_color
;;;2560   
;;;2561       cmd32 = 0xcc430080;
000030  e59f408c          LDR      r4,|L9.196|
;;;2562       if (opt==MODE_TRANSPARENT) {
;;;2563           cmd32 |= 0x00004000; // mono transparency
;;;2564       }
;;;2565   
;;;2566       outpw(REG_GE2D_CTL, cmd32);
000034  e59fc08c          LDR      r12,|L9.200|
000038  e35b0001          CMP      r11,#1                ;2562
00003c  02844901          ADDEQ    r4,r4,#0x4000         ;2563
000040  e58c4020          STR      r4,[r12,#0x20]
;;;2567   
;;;2568       outpw(REG_GE2D_FGCOLR, fore_color32);
000044  e58c6028          STR      r6,[r12,#0x28]
;;;2569       outpw(REG_GE2D_BGCOLR, back_color32);
000048  e58c0024          STR      r0,[r12,#0x24]
;;;2570   
;;;2571       dest_pitch = GFX_WIDTH; // pitch in pixels
00004c  e59f1078          LDR      r1,|L9.204|
000050  e1d100bc          LDRH     r0,[r1,#0xc]  ; GFX_WIDTH
;;;2572       src_pitch = width; // pitch in pixels
;;;2573   
;;;2574       pitch = (dest_pitch << 16) | src_pitch;
000054  e1850800          ORR      r0,r5,r0,LSL #16
;;;2575       outpw(REG_GE2D_SDPITCH, pitch);
000058  e58c0038          STR      r0,[r12,#0x38]
;;;2576   
;;;2577       outpw(REG_GE2D_XYSORG, (int)buf);
00005c  e58ca004          STR      r10,[r12,#4]
;;;2578       outpw(REG_GE2D_SRCSPA, 0); // always start from (0,0)
000060  e3a00000          MOV      r0,#0
000064  e58c003c          STR      r0,[r12,#0x3c]
;;;2579   
;;;2580       dest_start = y << 16 | x;
000068  e1890808          ORR      r0,r9,r8,LSL #16
;;;2581       outpw(REG_GE2D_DSTSPA, dest_start);
00006c  e58c0040          STR      r0,[r12,#0x40]
;;;2582   
;;;2583       dest_dimension = height << 16 | width;
000070  e1850807          ORR      r0,r5,r7,LSL #16
;;;2584       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000074  e58c0044          STR      r0,[r12,#0x44]
;;;2585   
;;;2586       if (_ClipEnable) {
000078  e5d10002          LDRB     r0,[r1,#2]  ; _ClipEnable
00007c  e3500000          CMP      r0,#0
000080  0a000008          BEQ      |L9.168|
;;;2587           cmd32 |= 0x00000200;
;;;2588           if (_OutsideClip) {
000084  e5d12003          LDRB     r2,[r1,#3]  ; _OutsideClip
000088  e3840c02          ORR      r0,r4,#0x200          ;2587
00008c  e3520000          CMP      r2,#0
;;;2589               cmd32 |= 0x00000100;
000090  13800c01          ORRNE    r0,r0,#0x100
;;;2590           }
;;;2591           outpw(REG_GE2D_CTL, cmd32);
000094  e58c0020          STR      r0,[r12,#0x20]
;;;2592           outpw(REG_GE2D_CLPBTL, _ClipTL);
000098  e59100ec          LDR      r0,[r1,#0xec]  ; _ClipTL
00009c  e58c0048          STR      r0,[r12,#0x48]
;;;2593           outpw(REG_GE2D_CLPBBR, _ClipBR);
0000a0  e59100f0          LDR      r0,[r1,#0xf0]  ; _ClipBR
0000a4  e58c004c          STR      r0,[r12,#0x4c]
                  |L9.168|
;;;2594       }
;;;2595   
;;;2596       outpw(REG_GE2D_TRG, 1);
0000a8  e3a01001          MOV      r1,#1
0000ac  e58c1000          STR      r1,[r12,#0]
                  |L9.176|
;;;2597       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000b0  e59c0010          LDR      r0,[r12,#0x10]
0000b4  e3100001          TST      r0,#1
;;;2598       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000b8  158c1010          STRNE    r1,[r12,#0x10]
0000bc  0afffffb          BEQ      |L9.176|
;;;2599   }
0000c0  e8bd9ff0          POP      {r4-r12,pc}
;;;2600   
                          ENDP

                  |L9.196|
                          DCD      0xcc430080
                  |L9.200|
                          DCD      0xb000b000
                  |L9.204|
                          DCD      ||.data||

                          AREA ||i.ge2dDrawFrame||, CODE, READONLY, ALIGN=2

                  ge2dDrawFrame PROC
;;;1266     */
;;;1267   void ge2dDrawFrame(int x1, int y1, int x2, int y2, int color, int opt)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1268   {
000004  e1a06000          MOV      r6,r0
;;;1269       UINT32 dest_pitch, dest_start, dest_dimension;
;;;1270       UINT32 color32;
;;;1271   
;;;1272   #ifdef DEBUG
;;;1273       sysprintf("draw_frame():\n");
;;;1274       sysprintf("(%d,%d)-(%d,%d)\n", x1, y1, x2, y2);
;;;1275       sysprintf("color=0x%x opt=%d\n", color, opt);
;;;1276   #endif
;;;1277   
;;;1278       /*
;;;1279       ** The opt==1 case must be specially handled.
;;;1280       */
;;;1281   
;;;1282       if (opt==0) {
;;;1283           outpw(REG_GE2D_CTL, 0xcccb0000); // rectangle
000008  e59d001c          LDR      r0,[sp,#0x1c]
00000c  e59f4074          LDR      r4,|L10.136|
000010  e3500000          CMP      r0,#0                 ;1282
000014  059f0070          LDREQ    r0,|L10.140|
;;;1284       } else {
;;;1285           outpw(REG_GE2D_CTL, 0xcccf0000); // diagonal
000018  159f0070          LDRNE    r0,|L10.144|
00001c  e1a05001          MOV      r5,r1                 ;1268
000020  e59d1018          LDR      r1,[sp,#0x18]         ;1283
000024  e1a07003          MOV      r7,r3                 ;1268
000028  e1a08002          MOV      r8,r2                 ;1268
00002c  e5840020          STR      r0,[r4,#0x20]
;;;1286       }
;;;1287   
;;;1288   #ifdef DEBUG
;;;1289       sysprintf("(%d,%d)-(%d,%d)\n", x1, y1, x2, y2);
;;;1290   #endif
;;;1291   
;;;1292       color32 = make_color(color);
000030  e1a00001          MOV      r0,r1
000034  ebfffffe          BL       make_color
;;;1293       outpw(REG_GE2D_FGCOLR, color32);
000038  e5840028          STR      r0,[r4,#0x28]
;;;1294   
;;;1295       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
00003c  e59f0050          LDR      r0,|L10.148|
000040  e1d000bc          LDRH     r0,[r0,#0xc]  ; GFX_WIDTH
000044  e1a00800          LSL      r0,r0,#16
;;;1296       outpw(REG_GE2D_SDPITCH, dest_pitch);
000048  e5840038          STR      r0,[r4,#0x38]
;;;1297   
;;;1298       dest_start = y1 << 16 | x1;
00004c  e1860805          ORR      r0,r6,r5,LSL #16
;;;1299       outpw(REG_GE2D_DSTSPA, dest_start);
000050  e5840040          STR      r0,[r4,#0x40]
;;;1300   
;;;1301       dest_dimension = (y2-y1) << 16 | (x2-x1);
000054  e0480006          SUB      r0,r8,r6
000058  e0471005          SUB      r1,r7,r5
00005c  e1800801          ORR      r0,r0,r1,LSL #16
;;;1302       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000060  e5840044          STR      r0,[r4,#0x44]
;;;1303   
;;;1304       outpw(REG_GE2D_MISCTL, inpw(REG_GE2D_MISCTL)); // address caculation
000064  e594005c          LDR      r0,[r4,#0x5c]
000068  e584005c          STR      r0,[r4,#0x5c]
;;;1305   
;;;1306       outpw(REG_GE2D_TRG, 1);
00006c  e3a01001          MOV      r1,#1
000070  e5841000          STR      r1,[r4,#0]
                  |L10.116|
;;;1307   
;;;1308       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000074  e5940010          LDR      r0,[r4,#0x10]
000078  e3100001          TST      r0,#1
;;;1309   
;;;1310       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00007c  15841010          STRNE    r1,[r4,#0x10]
000080  0afffffb          BEQ      |L10.116|
;;;1311   }
000084  e8bd81f0          POP      {r4-r8,pc}
;;;1312   
                          ENDP

                  |L10.136|
                          DCD      0xb000b000
                  |L10.140|
                          DCD      0xcccb0000
                  |L10.144|
                          DCD      0xcccf0000
                  |L10.148|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_ColorPattern||, CODE, READONLY, ALIGN=2

                  ge2dFill_ColorPattern PROC
;;;1678     */
;;;1679   void ge2dFill_ColorPattern(int dx, int dy, int width, int height)
000000  e92d4030          PUSH     {r4,r5,lr}
;;;1680   {
;;;1681       UINT32 cmd32;
;;;1682       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1683   
;;;1684   #ifdef DEBUG
;;;1685       sysprintf("color_pattern_fill()\n");
;;;1686       sysprintf("(%d,%d)-(%d,%d)\n", dx, dy, dx+width-1, dy+height-1);
;;;1687       sysprintf("pattern offset (%d,%d)\n", dx%8, dy%8);
;;;1688   #endif
;;;1689   
;;;1690       cmd32 = 0xf0430000;
000004  e59f4070          LDR      r4,|L11.124|
;;;1691       outpw(REG_GE2D_CTL, cmd32);
000008  e59fc070          LDR      r12,|L11.128|
00000c  e58c4020          STR      r4,[r12,#0x20]
;;;1692   
;;;1693       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000010  e59f506c          LDR      r5,|L11.132|
000014  e1d540bc          LDRH     r4,[r5,#0xc]  ; GFX_WIDTH
000018  e1a04804          LSL      r4,r4,#16
;;;1694       outpw(REG_GE2D_SDPITCH, dest_pitch);
00001c  e58c4038          STR      r4,[r12,#0x38]
;;;1695   
;;;1696       dest_start = dy << 16 | dx;
000020  e1800801          ORR      r0,r0,r1,LSL #16
;;;1697       outpw(REG_GE2D_DSTSPA, dest_start);
000024  e58c0040          STR      r0,[r12,#0x40]
;;;1698   
;;;1699       dest_dimension = height << 16 | width;
000028  e1820803          ORR      r0,r2,r3,LSL #16
;;;1700       outpw(REG_GE2D_RTGLSZ, dest_dimension);
00002c  e58c0044          STR      r0,[r12,#0x44]
;;;1701   
;;;1702       if (_ClipEnable) {
000030  e5d50002          LDRB     r0,[r5,#2]  ; _ClipEnable
000034  e3500000          CMP      r0,#0
000038  0a000008          BEQ      |L11.96|
;;;1703           cmd32 |= 0x00000200;
;;;1704           if (_OutsideClip) {
00003c  e5d51003          LDRB     r1,[r5,#3]  ; _OutsideClip
000040  e59f0040          LDR      r0,|L11.136|
000044  e3510000          CMP      r1,#0
;;;1705               cmd32 |= 0x00000100;
000048  12800c01          ADDNE    r0,r0,#0x100
;;;1706           }
;;;1707           outpw(REG_GE2D_CTL, cmd32);
00004c  e58c0020          STR      r0,[r12,#0x20]
;;;1708           outpw(REG_GE2D_CLPBTL, _ClipTL);
000050  e59500ec          LDR      r0,[r5,#0xec]  ; _ClipTL
000054  e58c0048          STR      r0,[r12,#0x48]
;;;1709           outpw(REG_GE2D_CLPBBR, _ClipBR);
000058  e59500f0          LDR      r0,[r5,#0xf0]  ; _ClipBR
00005c  e58c004c          STR      r0,[r12,#0x4c]
                  |L11.96|
;;;1710       }
;;;1711   
;;;1712       outpw(REG_GE2D_TRG, 1);
000060  e3a01001          MOV      r1,#1
000064  e58c1000          STR      r1,[r12,#0]
                  |L11.104|
;;;1713       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000068  e59c0010          LDR      r0,[r12,#0x10]
00006c  e3100001          TST      r0,#1
;;;1714       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000070  158c1010          STRNE    r1,[r12,#0x10]
000074  0afffffb          BEQ      |L11.104|
;;;1715   }
000078  e8bd8030          POP      {r4,r5,pc}
;;;1716   
                          ENDP

                  |L11.124|
                          DCD      0xf0430000
                  |L11.128|
                          DCD      0xb000b000
                  |L11.132|
                          DCD      ||.data||
                  |L11.136|
                          DCD      0xf0430200

                          AREA ||i.ge2dFill_ColorPatternROP||, CODE, READONLY, ALIGN=2

                  ge2dFill_ColorPatternROP PROC
;;;1774     */
;;;1775   void ge2dFill_ColorPatternROP(int sx, int sy, int width, int height, int rop)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1776   {
;;;1777       UINT32 cmd32;
;;;1778       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1779   
;;;1780   #ifdef DEBUG
;;;1781       sysprintf("color_pattern_fill()\n");
;;;1782       sysprintf("(%d,%d)-(%d,%d)\n", sx, sy, sx+width-1, sy+height-1);
;;;1783       sysprintf("pattern offset (%d,%d)\n", sx%8, sy%8);
;;;1784   #endif
;;;1785   
;;;1786       cmd32 = 0x00430000 | (rop<<24);
000004  e59dc010          LDR      r12,[sp,#0x10]
000008  e3a04843          MOV      r4,#0x430000
00000c  e1844c0c          ORR      r4,r4,r12,LSL #24
;;;1787       outpw(REG_GE2D_CTL, cmd32);
000010  e59fc06c          LDR      r12,|L12.132|
000014  e58c4020          STR      r4,[r12,#0x20]
;;;1788   
;;;1789       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000018  e59f6068          LDR      r6,|L12.136|
00001c  e1d650bc          LDRH     r5,[r6,#0xc]  ; GFX_WIDTH
000020  e1a05805          LSL      r5,r5,#16
;;;1790       outpw(REG_GE2D_SDPITCH, dest_pitch);
000024  e58c5038          STR      r5,[r12,#0x38]
;;;1791   
;;;1792       dest_start = sy << 16 | sx;
000028  e1800801          ORR      r0,r0,r1,LSL #16
;;;1793       outpw(REG_GE2D_DSTSPA, dest_start);
00002c  e58c0040          STR      r0,[r12,#0x40]
;;;1794   
;;;1795       dest_dimension = height << 16 | width;
000030  e1820803          ORR      r0,r2,r3,LSL #16
;;;1796       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000034  e58c0044          STR      r0,[r12,#0x44]
;;;1797   
;;;1798       if (_ClipEnable) {
000038  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
00003c  e3500000          CMP      r0,#0
000040  0a000008          BEQ      |L12.104|
;;;1799           cmd32 |= 0x00000200;
;;;1800           if (_OutsideClip) {
000044  e5d61003          LDRB     r1,[r6,#3]  ; _OutsideClip
000048  e3840c02          ORR      r0,r4,#0x200          ;1799
00004c  e3510000          CMP      r1,#0
;;;1801               cmd32 |= 0x00000100;
000050  13800c01          ORRNE    r0,r0,#0x100
;;;1802           }
;;;1803           outpw(REG_GE2D_CTL, cmd32);
000054  e58c0020          STR      r0,[r12,#0x20]
;;;1804           outpw(REG_GE2D_CLPBTL, _ClipTL);
000058  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
00005c  e58c0048          STR      r0,[r12,#0x48]
;;;1805           outpw(REG_GE2D_CLPBBR, _ClipBR);
000060  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000064  e58c004c          STR      r0,[r12,#0x4c]
                  |L12.104|
;;;1806       }
;;;1807   
;;;1808       outpw(REG_GE2D_TRG, 1);
000068  e3a01001          MOV      r1,#1
00006c  e58c1000          STR      r1,[r12,#0]
                  |L12.112|
;;;1809       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000070  e59c0010          LDR      r0,[r12,#0x10]
000074  e3100001          TST      r0,#1
;;;1810       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000078  158c1010          STRNE    r1,[r12,#0x10]
00007c  0afffffb          BEQ      |L12.112|
;;;1811   }
000080  e8bd8070          POP      {r4-r6,pc}
;;;1812   
                          ENDP

                  |L12.132|
                          DCD      0xb000b000
                  |L12.136|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_MonoPattern||, CODE, READONLY, ALIGN=2

                  ge2dFill_MonoPattern PROC
;;;1725     */
;;;1726   void ge2dFill_MonoPattern(int dx, int dy, int width, int height, int opt)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1727   {
;;;1728       UINT32 cmd32;
;;;1729       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1730   
;;;1731   #ifdef DEBUG
;;;1732       sysprintf("mono_pattern_fill()\n");
;;;1733       sysprintf("(%d,%d)-(%d,%d)\n", dx, dy, dx+width-1, dy+height-1);
;;;1734   #endif
;;;1735   
;;;1736       cmd32 = 0xf0430010;
000004  e59d4010          LDR      r4,[sp,#0x10]
000008  e59fc078          LDR      r12,|L13.136|
;;;1737       if (opt==MODE_TRANSPARENT) {
00000c  e3540001          CMP      r4,#1
;;;1738           cmd32 |= 0x00006000;
;;;1739       }
;;;1740       outpw(REG_GE2D_CTL, cmd32);
000010  e59f4074          LDR      r4,|L13.140|
000014  028cca06          ADDEQ    r12,r12,#0x6000       ;1738
000018  e584c020          STR      r12,[r4,#0x20]
;;;1741   
;;;1742       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
00001c  e59f606c          LDR      r6,|L13.144|
000020  e1d650bc          LDRH     r5,[r6,#0xc]  ; GFX_WIDTH
000024  e1a05805          LSL      r5,r5,#16
;;;1743       outpw(REG_GE2D_SDPITCH, dest_pitch);
000028  e5845038          STR      r5,[r4,#0x38]
;;;1744   
;;;1745       dest_start = dy << 16 | dx;
00002c  e1800801          ORR      r0,r0,r1,LSL #16
;;;1746       outpw(REG_GE2D_DSTSPA, dest_start);
000030  e5840040          STR      r0,[r4,#0x40]
;;;1747   
;;;1748       dest_dimension = height << 16 | width;
000034  e1820803          ORR      r0,r2,r3,LSL #16
;;;1749       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000038  e5840044          STR      r0,[r4,#0x44]
;;;1750   
;;;1751       if (_ClipEnable) {
00003c  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
000040  e3500000          CMP      r0,#0
000044  0a000008          BEQ      |L13.108|
;;;1752           cmd32 |= 0x00000200;
;;;1753           if (_OutsideClip) {
000048  e5d61003          LDRB     r1,[r6,#3]  ; _OutsideClip
00004c  e38c0c02          ORR      r0,r12,#0x200         ;1752
000050  e3510000          CMP      r1,#0
;;;1754               cmd32 |= 0x00000100;
000054  13800c01          ORRNE    r0,r0,#0x100
;;;1755           }
;;;1756           outpw(REG_GE2D_CTL, cmd32);
000058  e5840020          STR      r0,[r4,#0x20]
;;;1757           outpw(REG_GE2D_CLPBTL, _ClipTL);
00005c  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
000060  e5840048          STR      r0,[r4,#0x48]
;;;1758           outpw(REG_GE2D_CLPBBR, _ClipBR);
000064  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000068  e584004c          STR      r0,[r4,#0x4c]
                  |L13.108|
;;;1759       }
;;;1760   
;;;1761       outpw(REG_GE2D_TRG, 1);
00006c  e3a01001          MOV      r1,#1
000070  e5841000          STR      r1,[r4,#0]
                  |L13.116|
;;;1762       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000074  e5940010          LDR      r0,[r4,#0x10]
000078  e3100001          TST      r0,#1
;;;1763       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00007c  15841010          STRNE    r1,[r4,#0x10]
000080  0afffffb          BEQ      |L13.116|
;;;1764   }
000084  e8bd8070          POP      {r4-r6,pc}
;;;1765   
                          ENDP

                  |L13.136|
                          DCD      0xf0430010
                  |L13.140|
                          DCD      0xb000b000
                  |L13.144|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_MonoPatternROP||, CODE, READONLY, ALIGN=2

                  ge2dFill_MonoPatternROP PROC
;;;1822     */
;;;1823   void ge2dFill_MonoPatternROP(int sx, int sy, int width, int height, int rop, int opt)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1824   {
;;;1825       UINT32 cmd32;
;;;1826       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1827   
;;;1828   #ifdef DEBUG
;;;1829       sysprintf("mono_pattern_fill()\n");
;;;1830       sysprintf("(%d,%d)-(%d,%d)\n", sx, sy, sx+width-1, sy+height-1);
;;;1831   #endif
;;;1832   
;;;1833       cmd32 = 0x00430010 | (rop<<24);
000004  e59d4014          LDR      r4,[sp,#0x14]
000008  e59dc010          LDR      r12,[sp,#0x10]
00000c  e59f507c          LDR      r5,|L14.144|
;;;1834       if (opt==MODE_TRANSPARENT) {
000010  e3540001          CMP      r4,#1
;;;1835           cmd32 |= 0x00006000;
;;;1836       }
;;;1837       outpw(REG_GE2D_CTL, cmd32);
000014  e59f4078          LDR      r4,|L14.148|
000018  e185cc0c          ORR      r12,r5,r12,LSL #24    ;1833
00001c  038cca06          ORREQ    r12,r12,#0x6000       ;1835
000020  e584c020          STR      r12,[r4,#0x20]
;;;1838   
;;;1839       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000024  e59f606c          LDR      r6,|L14.152|
000028  e1d650bc          LDRH     r5,[r6,#0xc]  ; GFX_WIDTH
00002c  e1a05805          LSL      r5,r5,#16
;;;1840       outpw(REG_GE2D_SDPITCH, dest_pitch);
000030  e5845038          STR      r5,[r4,#0x38]
;;;1841   
;;;1842       dest_start = sy << 16 | sx;
000034  e1800801          ORR      r0,r0,r1,LSL #16
;;;1843       outpw(REG_GE2D_DSTSPA, dest_start);
000038  e5840040          STR      r0,[r4,#0x40]
;;;1844   
;;;1845       dest_dimension = height << 16 | width;
00003c  e1820803          ORR      r0,r2,r3,LSL #16
;;;1846       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000040  e5840044          STR      r0,[r4,#0x44]
;;;1847   
;;;1848       if (_ClipEnable) {
000044  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
000048  e3500000          CMP      r0,#0
00004c  0a000008          BEQ      |L14.116|
;;;1849           cmd32 |= 0x00000200;
;;;1850           if (_OutsideClip) {
000050  e5d61003          LDRB     r1,[r6,#3]  ; _OutsideClip
000054  e38c0c02          ORR      r0,r12,#0x200         ;1849
000058  e3510000          CMP      r1,#0
;;;1851               cmd32 |= 0x00000100;
00005c  13800c01          ORRNE    r0,r0,#0x100
;;;1852           }
;;;1853           outpw(REG_GE2D_CTL, cmd32);
000060  e5840020          STR      r0,[r4,#0x20]
;;;1854           outpw(REG_GE2D_CLPBTL, _ClipTL);
000064  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
000068  e5840048          STR      r0,[r4,#0x48]
;;;1855           outpw(REG_GE2D_CLPBBR, _ClipBR);
00006c  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000070  e584004c          STR      r0,[r4,#0x4c]
                  |L14.116|
;;;1856       }
;;;1857   
;;;1858       outpw(REG_GE2D_TRG, 1);
000074  e3a01001          MOV      r1,#1
000078  e5841000          STR      r1,[r4,#0]
                  |L14.124|
;;;1859   
;;;1860       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
00007c  e5940010          LDR      r0,[r4,#0x10]
000080  e3100001          TST      r0,#1
;;;1861   
;;;1862       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000084  15841010          STRNE    r1,[r4,#0x10]
000088  0afffffb          BEQ      |L14.124|
;;;1863   }
00008c  e8bd8070          POP      {r4-r6,pc}
;;;1864   
                          ENDP

                  |L14.144|
                          DCD      0x00430010
                  |L14.148|
                          DCD      0xb000b000
                  |L14.152|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_Solid||, CODE, READONLY, ALIGN=2

                  ge2dFill_Solid PROC
;;;1519     */
;;;1520   void ge2dFill_Solid(int dx, int dy, int width, int height, int color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1521   {
000004  e1a08000          MOV      r8,r0
000008  e59d0018          LDR      r0,[sp,#0x18]
00000c  e1a05003          MOV      r5,r3
000010  e1a06002          MOV      r6,r2
000014  e1a07001          MOV      r7,r1
;;;1522       UINT32 cmd32, color32;
;;;1523       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1524   
;;;1525   #ifdef DEBUG
;;;1526       sysprintf("solid_fill()\n");
;;;1527       sysprintf("(%d,%d)-(%d,%d)\n", dx, dy, dx+width-1, dy+height-1);
;;;1528       sysprintf("color=0x%x\n", color);
;;;1529   #endif
;;;1530   
;;;1531       color32 = make_color(color);
000018  ebfffffe          BL       make_color
;;;1532       cmd32 = 0xcc430060;
00001c  e59fc078          LDR      r12,|L15.156|
;;;1533       outpw(REG_GE2D_CTL, cmd32);
000020  e59f4078          LDR      r4,|L15.160|
000024  e584c020          STR      r12,[r4,#0x20]
;;;1534       outpw(REG_GE2D_FGCOLR, color32); // fill with foreground color
000028  e5840028          STR      r0,[r4,#0x28]
;;;1535   
;;;1536       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
00002c  e59f1070          LDR      r1,|L15.164|
000030  e1d100bc          LDRH     r0,[r1,#0xc]  ; GFX_WIDTH
000034  e1a00800          LSL      r0,r0,#16
;;;1537       outpw(REG_GE2D_SDPITCH, dest_pitch);
000038  e5840038          STR      r0,[r4,#0x38]
;;;1538   
;;;1539       dest_start = dy << 16 | dx;
00003c  e1880807          ORR      r0,r8,r7,LSL #16
;;;1540       outpw(REG_GE2D_DSTSPA, dest_start);
000040  e5840040          STR      r0,[r4,#0x40]
;;;1541   
;;;1542       dest_dimension = height << 16 | width;
000044  e1860805          ORR      r0,r6,r5,LSL #16
;;;1543       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000048  e5840044          STR      r0,[r4,#0x44]
;;;1544   
;;;1545       if (_ClipEnable) {
00004c  e5d10002          LDRB     r0,[r1,#2]  ; _ClipEnable
000050  e3500000          CMP      r0,#0
000054  0a000008          BEQ      |L15.124|
;;;1546           cmd32 |= 0x00000200;
;;;1547           if (_OutsideClip) {
000058  e5d10003          LDRB     r0,[r1,#3]  ; _OutsideClip
00005c  e28ccc02          ADD      r12,r12,#0x200        ;1546
000060  e3500000          CMP      r0,#0
;;;1548               cmd32 |= 0x00000100;
000064  118ccba4          ORRNE    r12,r12,r4,LSR #23
;;;1549           }
;;;1550           outpw(REG_GE2D_CTL, cmd32);
000068  e584c020          STR      r12,[r4,#0x20]
;;;1551           outpw(REG_GE2D_CLPBTL, _ClipTL);
00006c  e59100ec          LDR      r0,[r1,#0xec]  ; _ClipTL
000070  e5840048          STR      r0,[r4,#0x48]
;;;1552           outpw(REG_GE2D_CLPBBR, _ClipBR);
000074  e59100f0          LDR      r0,[r1,#0xf0]  ; _ClipBR
000078  e584004c          STR      r0,[r4,#0x4c]
                  |L15.124|
;;;1553       }
;;;1554   
;;;1555       outpw(REG_GE2D_CTL, cmd32);
00007c  e584c020          STR      r12,[r4,#0x20]
;;;1556   
;;;1557       outpw(REG_GE2D_TRG, 1);
000080  e3a01001          MOV      r1,#1
000084  e5841000          STR      r1,[r4,#0]
                  |L15.136|
;;;1558   
;;;1559       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000088  e5940010          LDR      r0,[r4,#0x10]
00008c  e3100001          TST      r0,#1
;;;1560   
;;;1561       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000090  15841010          STRNE    r1,[r4,#0x10]
000094  0afffffb          BEQ      |L15.136|
;;;1562   }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;1563   
                          ENDP

                  |L15.156|
                          DCD      0xcc430060
                  |L15.160|
                          DCD      0xb000b000
                  |L15.164|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_SolidBackground||, CODE, READONLY, ALIGN=2

                  ge2dFill_SolidBackground PROC
;;;1624     */
;;;1625   void ge2dFill_SolidBackground(int dx, int dy, int width, int height, int color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1626   {
000004  e1a08000          MOV      r8,r0
000008  e59d0018          LDR      r0,[sp,#0x18]
00000c  e1a05003          MOV      r5,r3
000010  e1a06002          MOV      r6,r2
000014  e1a07001          MOV      r7,r1
;;;1627       UINT32 cmd32, color32;
;;;1628       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1629   
;;;1630   #ifdef DEBUG
;;;1631       sysprintf("solid_fill_back()\n");
;;;1632       sysprintf("(%d,%d)-(%d,%d)\n", dx, dy, dx+width-1,dy+height-1);
;;;1633       sysprintf("color=0x%x\n", color);
;;;1634   #endif
;;;1635   
;;;1636       color32 = make_color(color);
000018  ebfffffe          BL       make_color
;;;1637   
;;;1638       cmd32 = 0xcc430040;
00001c  e59fc078          LDR      r12,|L16.156|
;;;1639       outpw(REG_GE2D_CTL, cmd32);
000020  e59f4078          LDR      r4,|L16.160|
000024  e584c020          STR      r12,[r4,#0x20]
;;;1640       outpw(REG_GE2D_BGCOLR, color32); // fill with foreground color
000028  e5840024          STR      r0,[r4,#0x24]
;;;1641   
;;;1642       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
00002c  e59f1070          LDR      r1,|L16.164|
000030  e1d100bc          LDRH     r0,[r1,#0xc]  ; GFX_WIDTH
000034  e1a00800          LSL      r0,r0,#16
;;;1643       outpw(REG_GE2D_SDPITCH, dest_pitch);
000038  e5840038          STR      r0,[r4,#0x38]
;;;1644   
;;;1645       dest_start = dy << 16 | dx;
00003c  e1880807          ORR      r0,r8,r7,LSL #16
;;;1646       outpw(REG_GE2D_DSTSPA, dest_start);
000040  e5840040          STR      r0,[r4,#0x40]
;;;1647   
;;;1648       dest_dimension = height << 16 | width;
000044  e1860805          ORR      r0,r6,r5,LSL #16
;;;1649       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000048  e5840044          STR      r0,[r4,#0x44]
;;;1650   
;;;1651       if (_ClipEnable) {
00004c  e5d10002          LDRB     r0,[r1,#2]  ; _ClipEnable
000050  e3500000          CMP      r0,#0
000054  0a000008          BEQ      |L16.124|
;;;1652           cmd32 |= 0x00000200;
;;;1653           if (_OutsideClip) {
000058  e5d10003          LDRB     r0,[r1,#3]  ; _OutsideClip
00005c  e28ccc02          ADD      r12,r12,#0x200        ;1652
000060  e3500000          CMP      r0,#0
;;;1654               cmd32 |= 0x00000100;
000064  128ccc01          ADDNE    r12,r12,#0x100
;;;1655           }
;;;1656           outpw(REG_GE2D_CTL, cmd32);
000068  e584c020          STR      r12,[r4,#0x20]
;;;1657           outpw(REG_GE2D_CLPBTL, _ClipTL);
00006c  e59100ec          LDR      r0,[r1,#0xec]  ; _ClipTL
000070  e5840048          STR      r0,[r4,#0x48]
;;;1658           outpw(REG_GE2D_CLPBBR, _ClipBR);
000074  e59100f0          LDR      r0,[r1,#0xf0]  ; _ClipBR
000078  e584004c          STR      r0,[r4,#0x4c]
                  |L16.124|
;;;1659       }
;;;1660   
;;;1661       outpw(REG_GE2D_CTL, cmd32);
00007c  e584c020          STR      r12,[r4,#0x20]
;;;1662   
;;;1663       outpw(REG_GE2D_TRG, 1);
000080  e3a01001          MOV      r1,#1
000084  e5841000          STR      r1,[r4,#0]
                  |L16.136|
;;;1664   
;;;1665       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000088  e5940010          LDR      r0,[r4,#0x10]
00008c  e3100001          TST      r0,#1
;;;1666   
;;;1667       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000090  15841010          STRNE    r1,[r4,#0x10]
000094  0afffffb          BEQ      |L16.136|
;;;1668   }
000098  e8bd81f0          POP      {r4-r8,pc}
;;;1669   
                          ENDP

                  |L16.156|
                          DCD      0xcc430040
                  |L16.160|
                          DCD      0xb000b000
                  |L16.164|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_Solid_RGB565||, CODE, READONLY, ALIGN=2

                  ge2dFill_Solid_RGB565 PROC
;;;1572     */
;;;1573   void ge2dFill_Solid_RGB565(int dx, int dy, int width, int height, int color)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1574   {
;;;1575       UINT32 cmd32;
;;;1576       UINT32 dest_start, dest_pitch, dest_dimension;
;;;1577   
;;;1578   #ifdef DEBUG
;;;1579       sysprintf("solid_fill()\n");
;;;1580       sysprintf("(%d,%d)-(%d,%d)\n", dx, dy, dx+width-1, dy+height-1);
;;;1581       sysprintf("color=0x%x\n", color);
;;;1582   #endif
;;;1583   
;;;1584       cmd32 = 0xcc430060;
000004  e59fc07c          LDR      r12,|L17.136|
;;;1585       outpw(REG_GE2D_CTL, cmd32);
000008  e59f407c          LDR      r4,|L17.140|
00000c  e59d5010          LDR      r5,[sp,#0x10]         ;1584
000010  e584c020          STR      r12,[r4,#0x20]
;;;1586       outpw(REG_GE2D_FGCOLR, color); // fill with foreground color
000014  e5845028          STR      r5,[r4,#0x28]
;;;1587   
;;;1588       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000018  e59f6070          LDR      r6,|L17.144|
00001c  e1d650bc          LDRH     r5,[r6,#0xc]  ; GFX_WIDTH
000020  e1a05805          LSL      r5,r5,#16
;;;1589       outpw(REG_GE2D_SDPITCH, dest_pitch);
000024  e5845038          STR      r5,[r4,#0x38]
;;;1590   
;;;1591       dest_start = dy << 16 | dx;
000028  e1800801          ORR      r0,r0,r1,LSL #16
;;;1592       outpw(REG_GE2D_DSTSPA, dest_start);
00002c  e5840040          STR      r0,[r4,#0x40]
;;;1593   
;;;1594       dest_dimension = height << 16 | width;
000030  e1820803          ORR      r0,r2,r3,LSL #16
;;;1595       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000034  e5840044          STR      r0,[r4,#0x44]
;;;1596   
;;;1597       if (_ClipEnable) {
000038  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
00003c  e3500000          CMP      r0,#0
000040  0a000008          BEQ      |L17.104|
;;;1598           cmd32 |= 0x00000200;
;;;1599           if (_OutsideClip) {
000044  e5d60003          LDRB     r0,[r6,#3]  ; _OutsideClip
000048  e28ccc02          ADD      r12,r12,#0x200        ;1598
00004c  e3500000          CMP      r0,#0
;;;1600               cmd32 |= 0x00000100;
000050  118ccba4          ORRNE    r12,r12,r4,LSR #23
;;;1601           }
;;;1602           outpw(REG_GE2D_CTL, cmd32);
000054  e584c020          STR      r12,[r4,#0x20]
;;;1603           outpw(REG_GE2D_CLPBTL, _ClipTL);
000058  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
00005c  e5840048          STR      r0,[r4,#0x48]
;;;1604           outpw(REG_GE2D_CLPBBR, _ClipBR);
000060  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000064  e584004c          STR      r0,[r4,#0x4c]
                  |L17.104|
;;;1605       }
;;;1606   
;;;1607       outpw(REG_GE2D_CTL, cmd32);
000068  e584c020          STR      r12,[r4,#0x20]
;;;1608   
;;;1609       outpw(REG_GE2D_TRG, 1);
00006c  e3a01001          MOV      r1,#1
000070  e5841000          STR      r1,[r4,#0]
                  |L17.116|
;;;1610   
;;;1611       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000074  e5940010          LDR      r0,[r4,#0x10]
000078  e3100001          TST      r0,#1
;;;1612   
;;;1613       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00007c  15841010          STRNE    r1,[r4,#0x10]
000080  0afffffb          BEQ      |L17.116|
;;;1614   }
000084  e8bd8070          POP      {r4-r6,pc}
;;;1615   
                          ENDP

                  |L17.136|
                          DCD      0xcc430060
                  |L17.140|
                          DCD      0xb000b000
                  |L17.144|
                          DCD      ||.data||

                          AREA ||i.ge2dFill_TileBlt||, CODE, READONLY, ALIGN=2

                  ge2dFill_TileBlt PROC
;;;1876     */
;;;1877   void ge2dFill_TileBlt(int srcx, int srcy, int destx, int desty, int width, int height, int x_count, int y_count)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1878   {
000004  e59d4024          LDR      r4,[sp,#0x24]
000008  e59dc028          LDR      r12,[sp,#0x28]
;;;1879       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;1880       UINT32 tile_ctl;
;;;1881   
;;;1882   #ifdef DEBUG
;;;1883       sysprintf("tile_blt_image()\n");
;;;1884       sysprintf("(%d,%d)=>(%d,%d)\n", srcx, srcy, destx, desty);
;;;1885       sysprintf("width=%d height=%d\n", width, height);
;;;1886       sysprintf("%dx%d grids\n", x_count, y_count);
;;;1887   #endif
;;;1888   
;;;1889       if (x_count > 0) x_count--;
00000c  e3540000          CMP      r4,#0
;;;1890       if (y_count > 0) y_count--;
;;;1891   
;;;1892       cmd32 = 0xcc430400; // b10 is the tile control
000010  e59f6094          LDR      r6,|L18.172|
;;;1893   
;;;1894       outpw(REG_GE2D_CTL, cmd32);
000014  e59f5094          LDR      r5,|L18.176|
000018  c2444001          SUBGT    r4,r4,#1              ;1889
00001c  e59d8020          LDR      r8,[sp,#0x20]         ;1889
000020  e59d901c          LDR      r9,[sp,#0x1c]         ;1889
000024  e35c0000          CMP      r12,#0                ;1890
000028  c24cc001          SUBGT    r12,r12,#1            ;1890
00002c  e5856020          STR      r6,[r5,#0x20]
;;;1895   
;;;1896       pitch = GFX_WIDTH << 16 | GFX_WIDTH; // pitch in pixel
000030  e59f707c          LDR      r7,|L18.180|
000034  e597600c          LDR      r6,[r7,#0xc]  ; GFX_WIDTH
000038  e1866806          ORR      r6,r6,r6,LSL #16
;;;1897       outpw(REG_GE2D_SDPITCH, pitch);
00003c  e5856038          STR      r6,[r5,#0x38]
;;;1898   
;;;1899       src_start = srcy << 16 | srcx;           // redundancy ??
000040  e1800801          ORR      r0,r0,r1,LSL #16
;;;1900       outpw(REG_GE2D_SRCSPA, src_start);  // redundancy ??
000044  e585003c          STR      r0,[r5,#0x3c]
;;;1901   
;;;1902       dest_start = desty << 16 | destx;
000048  e1820803          ORR      r0,r2,r3,LSL #16
;;;1903       outpw(REG_GE2D_DSTSPA, dest_start);
00004c  e5850040          STR      r0,[r5,#0x40]
;;;1904   
;;;1905       dimension = height << 16 | width;
000050  e1890808          ORR      r0,r9,r8,LSL #16
;;;1906       outpw(REG_GE2D_RTGLSZ, dimension);
000054  e5850044          STR      r0,[r5,#0x44]
;;;1907   
;;;1908       if (_ClipEnable) {
000058  e5d70002          LDRB     r0,[r7,#2]  ; _ClipEnable
00005c  e3500000          CMP      r0,#0
000060  0a000008          BEQ      |L18.136|
;;;1909           cmd32 |= 0x00000200;
;;;1910           if (_OutsideClip) {
000064  e5d71003          LDRB     r1,[r7,#3]  ; _OutsideClip
000068  e59f0048          LDR      r0,|L18.184|
00006c  e3510000          CMP      r1,#0
;;;1911               cmd32 |= 0x00000100;
000070  12800c01          ADDNE    r0,r0,#0x100
;;;1912           }
;;;1913           outpw(REG_GE2D_CTL, cmd32);
000074  e5850020          STR      r0,[r5,#0x20]
;;;1914           outpw(REG_GE2D_CLPBTL, _ClipTL);
000078  e59700ec          LDR      r0,[r7,#0xec]  ; _ClipTL
00007c  e5850048          STR      r0,[r5,#0x48]
;;;1915           outpw(REG_GE2D_CLPBBR, _ClipBR);
000080  e59700f0          LDR      r0,[r7,#0xf0]  ; _ClipBR
000084  e585004c          STR      r0,[r5,#0x4c]
                  |L18.136|
;;;1916       }
;;;1917   
;;;1918       tile_ctl = (y_count << 8) | (x_count);
000088  e184040c          ORR      r0,r4,r12,LSL #8
;;;1919       outpw(REG_GE2D_TCNTVHSF, tile_ctl);
00008c  e5850008          STR      r0,[r5,#8]
;;;1920   
;;;1921       outpw(REG_GE2D_TRG, 1);
000090  e3a01001          MOV      r1,#1
000094  e5851000          STR      r1,[r5,#0]
                  |L18.152|
;;;1922       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000098  e5950010          LDR      r0,[r5,#0x10]
00009c  e3100001          TST      r0,#1
;;;1923       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000a0  15851010          STRNE    r1,[r5,#0x10]
0000a4  0afffffb          BEQ      |L18.152|
;;;1924   }
0000a8  e8bd83f0          POP      {r4-r9,pc}
;;;1925   
                          ENDP

                  |L18.172|
                          DCD      0xcc430400
                  |L18.176|
                          DCD      0xb000b000
                  |L18.180|
                          DCD      ||.data||
                  |L18.184|
                          DCD      0xcc430600

                          AREA ||i.ge2dFont_PutChar||, CODE, READONLY, ALIGN=2

                  ge2dFont_PutChar PROC
;;;2853     */
;;;2854   void ge2dFont_PutChar(int x, int y, char asc_code, int fore_color, int back_color, int draw_mode, int font_id)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2855   {
000004  e24dda01          SUB      sp,sp,#0x1000
000008  e24dd004          SUB      sp,sp,#4
00000c  e1a06000          MOV      r6,r0
000010  e28d0a01          ADD      r0,sp,#0x1000
000014  e5b0a028          LDR      r10,[r0,#0x28]!
000018  e5909004          LDR      r9,[r0,#4]
00001c  e5907008          LDR      r7,[r0,#8]
000020  e1a04002          MOV      r4,r2
000024  e1a05001          MOV      r5,r1
;;;2856       int cmd32, dest_pitch, src_pitch, pitch, dest_start, dest_dimension;
;;;2857       UINT32 width, height;
;;;2858       UINT32 fore_color32, back_color32;
;;;2859       UINT8 *fptr;
;;;2860       UINT8 *temp_buf[32*32], *ptr8;
;;;2861       int idx;
;;;2862   
;;;2863       fore_color32 = make_color(fore_color);
000028  e1a00003          MOV      r0,r3
00002c  ebfffffe          BL       make_color
000030  e1a08000          MOV      r8,r0
;;;2864       back_color32 = make_color(back_color);
000034  e1a0000a          MOV      r0,r10
000038  ebfffffe          BL       make_color
00003c  e1a01000          MOV      r1,r0
;;;2865   
;;;2866       cmd32 = 0xcc430080;
000040  e59f00ec          LDR      r0,|L19.308|
;;;2867   
;;;2868       if (draw_mode==MODE_TRANSPARENT) {
000044  e3590001          CMP      r9,#1
;;;2869           cmd32 |= 0x00004000; // mono transparency
;;;2870       }
;;;2871   
;;;2872       outpw(REG_GE2D_CTL, cmd32);
000048  e59f90e8          LDR      r9,|L19.312|
00004c  02800901          ADDEQ    r0,r0,#0x4000         ;2869
000050  e5890020          STR      r0,[r9,#0x20]
;;;2873   
;;;2874       outpw(REG_GE2D_FGCOLR, fore_color32);
000054  e5898028          STR      r8,[r9,#0x28]
;;;2875       outpw(REG_GE2D_BGCOLR, back_color32);
000058  e5891024          STR      r1,[r9,#0x24]
;;;2876   
;;;2877       if (font_id==F8x16) {
00005c  e3570001          CMP      r7,#1
000060  e1a0800d          MOV      r8,sp                 ;2860
000064  e3a0c000          MOV      r12,#0                ;2860
000068  0a000021          BEQ      |L19.244|
;;;2878           fptr = (UINT8 *)&FontData16[asc_code][0];
;;;2879           src_pitch = 32;
;;;2880           width = 32;
;;;2881           height = 16;
;;;2882   
;;;2883           ptr8 = (UINT8 *)&temp_buf[0];
;;;2884           for (idx=0; idx<16; idx++) {
;;;2885               *ptr8++ = *fptr++;
;;;2886               *ptr8++ = 0;
;;;2887               *ptr8++ = 0;
;;;2888               *ptr8++ = 0;
;;;2889           }
;;;2890           fptr =  (UINT8 *)&temp_buf[0];
;;;2891       } else { /* F8x8 */
;;;2892           fptr = (UINT8 *)&FontData8[asc_code][0];
00006c  e59f00c8          LDR      r0,|L19.316|
;;;2893           src_pitch = 32;
000070  e3a07020          MOV      r7,#0x20
000074  e0800184          ADD      r0,r0,r4,LSL #3       ;2892
;;;2894           width = 32;
000078  e1a01007          MOV      r1,r7
;;;2895           height = 8;
00007c  e3a04008          MOV      r4,#8
;;;2896           ptr8 = (UINT8 *)&temp_buf[0];
000080  e1a03008          MOV      r3,r8
;;;2897           for (idx=0; idx<8; idx++) {
000084  e3a02000          MOV      r2,#0
                  |L19.136|
;;;2898               *ptr8++ = *fptr++;
000088  e4d0b001          LDRB     r11,[r0],#1
;;;2899               *ptr8++ = 0;
;;;2900               *ptr8++ = 0;
;;;2901               *ptr8++ = 0;
00008c  e2822001          ADD      r2,r2,#1
000090  e3520008          CMP      r2,#8                 ;2897
000094  e4c3b001          STRB     r11,[r3],#1           ;2898
000098  e4c3c001          STRB     r12,[r3],#1           ;2899
00009c  e4c3c001          STRB     r12,[r3],#1           ;2900
0000a0  e4c3c001          STRB     r12,[r3],#1
0000a4  bafffff7          BLT      |L19.136|
                  |L19.168|
;;;2902           }
;;;2903           fptr =  (UINT8 *)&temp_buf[0];
;;;2904       }
;;;2905   
;;;2906       dest_pitch = GFX_WIDTH; // pitch in pixels
0000a8  e59f0090          LDR      r0,|L19.320|
0000ac  e1d000bc          LDRH     r0,[r0,#0xc]  ; GFX_WIDTH
;;;2907   
;;;2908       pitch = (dest_pitch << 16) | src_pitch;
0000b0  e1870800          ORR      r0,r7,r0,LSL #16
;;;2909       outpw(REG_GE2D_SDPITCH, pitch);
0000b4  e5890038          STR      r0,[r9,#0x38]
;;;2910   
;;;2911       outpw(REG_GE2D_XYSORG, (int)fptr);
0000b8  e5898004          STR      r8,[r9,#4]
;;;2912       outpw(REG_GE2D_SRCSPA, 0); // always start from (0,0)
0000bc  e589c03c          STR      r12,[r9,#0x3c]
;;;2913   
;;;2914       dest_start = y << 16 | x;
0000c0  e1860805          ORR      r0,r6,r5,LSL #16
;;;2915       outpw(REG_GE2D_DSTSPA, dest_start);
0000c4  e5890040          STR      r0,[r9,#0x40]
;;;2916   
;;;2917       dest_dimension = height << 16 | width;
0000c8  e1810804          ORR      r0,r1,r4,LSL #16
;;;2918       outpw(REG_GE2D_RTGLSZ, dest_dimension);
0000cc  e5890044          STR      r0,[r9,#0x44]
;;;2919   
;;;2920       outpw(REG_GE2D_TRG, 1);
0000d0  e3a01001          MOV      r1,#1
0000d4  e5891000          STR      r1,[r9,#0]
                  |L19.216|
;;;2921       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000d8  e5990010          LDR      r0,[r9,#0x10]
0000dc  e3100001          TST      r0,#1
;;;2922       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000e0  15891010          STRNE    r1,[r9,#0x10]
0000e4  0afffffb          BEQ      |L19.216|
;;;2923   }
0000e8  e28dda01          ADD      sp,sp,#0x1000
0000ec  e28dd004          ADD      sp,sp,#4
0000f0  e8bd8ff0          POP      {r4-r11,pc}
                  |L19.244|
0000f4  e59f0048          LDR      r0,|L19.324|
0000f8  e3a07020          MOV      r7,#0x20              ;2879
0000fc  e0800204          ADD      r0,r0,r4,LSL #4       ;2878
000100  e1a01007          MOV      r1,r7                 ;2880
000104  e3a04010          MOV      r4,#0x10              ;2881
000108  e1a03008          MOV      r3,r8                 ;2883
00010c  e3a02000          MOV      r2,#0                 ;2884
                  |L19.272|
000110  e4d0b001          LDRB     r11,[r0],#1           ;2885
000114  e2822001          ADD      r2,r2,#1              ;2888
000118  e3520010          CMP      r2,#0x10              ;2884
00011c  e4c3b001          STRB     r11,[r3],#1           ;2885
000120  e4c3c001          STRB     r12,[r3],#1           ;2886
000124  e4c3c001          STRB     r12,[r3],#1           ;2887
000128  e4c3c001          STRB     r12,[r3],#1           ;2888
00012c  bafffff7          BLT      |L19.272|
000130  eaffffdc          B        |L19.168|
;;;2924   
                          ENDP

                  |L19.308|
                          DCD      0xcc430080
                  |L19.312|
                          DCD      0xb000b000
                  |L19.316|
                          DCD      ||.data||+0x128
                  |L19.320|
                          DCD      ||.data||
                  |L19.324|
                          DCD      ||.data||+0x928

                          AREA ||i.ge2dFont_PutString||, CODE, READONLY, ALIGN=2

                  ge2dFont_PutString PROC
;;;2935     */
;;;2936   void ge2dFont_PutString(int x, int y, char *str, int fore_color, int back_color, int draw_mode, int font_id)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2937   {
000004  e24dd00c          SUB      sp,sp,#0xc
;;;2938       char *ptr;
;;;2939       int idx, sx;
;;;2940   
;;;2941       ptr =	str;
;;;2942       sx = x;
;;;2943       for (idx=0; idx<strlen(str); idx++) {
000008  e59d7048          LDR      r7,[sp,#0x48]
00000c  e59d8044          LDR      r8,[sp,#0x44]
000010  e59d9040          LDR      r9,[sp,#0x40]
000014  e1a0b003          MOV      r11,r3                ;2937
000018  e1a0a002          MOV      r10,r2                ;2937
00001c  e1a06000          MOV      r6,r0                 ;2937
000020  e1a04002          MOV      r4,r2                 ;2941
000024  e3a05000          MOV      r5,#0
000028  ea000009          B        |L20.84|
                  |L20.44|
;;;2944           ge2dFont_PutChar(sx, y, *ptr++, fore_color, back_color, draw_mode, font_id);
00002c  e58d7008          STR      r7,[sp,#8]
000030  e58d8004          STR      r8,[sp,#4]
000034  e58d9000          STR      r9,[sp,#0]
000038  e4d42001          LDRB     r2,[r4],#1
00003c  e59d1010          LDR      r1,[sp,#0x10]
000040  e1a0300b          MOV      r3,r11
000044  e1a00006          MOV      r0,r6
000048  ebfffffe          BL       ge2dFont_PutChar
00004c  e2855001          ADD      r5,r5,#1
000050  e2866008          ADD      r6,r6,#8
                  |L20.84|
000054  e1a0000a          MOV      r0,r10                ;2943
000058  ebfffffe          BL       strlen
00005c  e1500005          CMP      r0,r5                 ;2943
000060  8afffff1          BHI      |L20.44|
;;;2945           sx += 8;	//char width
;;;2946       }
;;;2947   }
000064  e28dd01c          ADD      sp,sp,#0x1c
000068  e8bd8ff0          POP      {r4-r11,pc}
;;;2948   /*@}*/ /* end of group N9H30_GE2D_EXPORTED_FUNCTIONS */
                          ENDP


                          AREA ||i.ge2dHostBlt_Read||, CODE, READONLY, ALIGN=2

                  ge2dHostBlt_Read PROC
;;;1996     */
;;;1997   void ge2dHostBlt_Read(int x, int y, int width, int height, void *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1998   {
;;;1999       UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
;;;2000       int transfer_count, i, j;
;;;2001       UINT32 *ptr32;
;;;2002   
;;;2003   #ifdef DEBUG
;;;2004       sysprintf("host_read_blt()\n");
;;;2005       sysprintf("(%d,%d)-(%d,%d)\n", x, y, x+width-1, y+height-1);
;;;2006       sysprintf("width=%d height=%d\n", width, height);
;;;2007   #endif
;;;2008   
;;;2009       cmd32 = 0xcc430001;
000004  e59f50d4          LDR      r5,|L21.224|
;;;2010   
;;;2011       outpw(REG_GE2D_CTL, cmd32);
000008  e59f40d4          LDR      r4,|L21.228|
00000c  e59dc018          LDR      r12,[sp,#0x18]        ;2009
000010  e5845020          STR      r5,[r4,#0x20]
;;;2012   
;;;2013       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000014  e59f60cc          LDR      r6,|L21.232|
000018  e1d650bc          LDRH     r5,[r6,#0xc]  ; GFX_WIDTH
00001c  e1a05805          LSL      r5,r5,#16
;;;2014       outpw(REG_GE2D_SDPITCH, dest_pitch);
000020  e5845038          STR      r5,[r4,#0x38]
;;;2015   
;;;2016       dest_start = y << 16 | x;
000024  e1800801          ORR      r0,r0,r1,LSL #16
;;;2017       outpw(REG_GE2D_DSTSPA, dest_start);
000028  e5840040          STR      r0,[r4,#0x40]
;;;2018   
;;;2019       dest_dimension = height << 16 | width;
00002c  e1820803          ORR      r0,r2,r3,LSL #16
;;;2020       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000030  e5840044          STR      r0,[r4,#0x44]
;;;2021   
;;;2022       outpw(REG_GE2D_TRG, 1);
000034  e3a07001          MOV      r7,#1
000038  e5847000          STR      r7,[r4,#0]
;;;2023   
;;;2024       ptr32 = (UINT32 *)buf;
;;;2025       for (i=0; i<height; i++) {
00003c  e3a05000          MOV      r5,#0
000040  ea00001f          B        |L21.196|
                  |L21.68|
;;;2026           transfer_count = (width * (GFX_BPP/8) + 3) / 4; // 4-byte count
000044  e5960008          LDR      r0,[r6,#8]  ; GFX_BPP
000048  e1a001a0          LSR      r0,r0,#3
00004c  e0000092          MUL      r0,r2,r0
000050  e2800003          ADD      r0,r0,#3
000054  e1a00120          LSR      r0,r0,#2
                  |L21.88|
;;;2027   
;;;2028           while (transfer_count >= 8) {
000058  e3500008          CMP      r0,#8
00005c  ba00000a          BLT      |L21.140|
                  |L21.96|
;;;2029               while ((inpw(REG_GE2D_MISCTL) & 0x00000400)==0);
000060  e594105c          LDR      r1,[r4,#0x5c]
000064  e3110b01          TST      r1,#0x400
;;;2030               for (j=0; j<8; j++) {
000068  13a01000          MOVNE    r1,#0
00006c  0afffffb          BEQ      |L21.96|
                  |L21.112|
;;;2031                   *ptr32++ = inpw(REG_GE2D_GEHBDW0);
000070  e5948060          LDR      r8,[r4,#0x60]
000074  e2811001          ADD      r1,r1,#1
000078  e3510008          CMP      r1,#8                 ;2030
00007c  a2400008          SUBGE    r0,r0,#8              ;2030
000080  e48c8004          STR      r8,[r12],#4           ;2030
000084  aafffff3          BGE      |L21.88|
000088  eafffff8          B        |L21.112|
                  |L21.140|
;;;2032               }
;;;2033               transfer_count -= 8;
;;;2034           }
;;;2035   
;;;2036           if (transfer_count > 0) {
00008c  e3500000          CMP      r0,#0
000090  da00000a          BLE      |L21.192|
                  |L21.148|
;;;2037               while (((inpw(REG_GE2D_MISCTL) & 0x0000f000)>>12) != transfer_count);
000094  e594105c          LDR      r1,[r4,#0x5c]
000098  e2011a0f          AND      r1,r1,#0xf000
00009c  e1500621          CMP      r0,r1,LSR #12
;;;2038               for (j=0; j<transfer_count; j++) {
0000a0  03a01000          MOVEQ    r1,#0
0000a4  1afffffa          BNE      |L21.148|
0000a8  ea000002          B        |L21.184|
                  |L21.172|
;;;2039                   *ptr32++ = inpw(REG_GE2D_GEHBDW0);
0000ac  e5948060          LDR      r8,[r4,#0x60]
0000b0  e2811001          ADD      r1,r1,#1
0000b4  e48c8004          STR      r8,[r12],#4
                  |L21.184|
0000b8  e1510000          CMP      r1,r0                 ;2038
0000bc  bafffffa          BLT      |L21.172|
                  |L21.192|
0000c0  e2855001          ADD      r5,r5,#1              ;2038
                  |L21.196|
0000c4  e1550003          CMP      r5,r3                 ;2025
0000c8  baffffdd          BLT      |L21.68|
                  |L21.204|
;;;2040               }
;;;2041           }
;;;2042       }
;;;2043   
;;;2044       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000cc  e5940010          LDR      r0,[r4,#0x10]
0000d0  e3100001          TST      r0,#1
;;;2045   
;;;2046       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000d4  15847010          STRNE    r7,[r4,#0x10]
0000d8  0afffffb          BEQ      |L21.204|
;;;2047   }
0000dc  e8bd81f0          POP      {r4-r8,pc}
;;;2048   
                          ENDP

                  |L21.224|
                          DCD      0xcc430001
                  |L21.228|
                          DCD      0xb000b000
                  |L21.232|
                          DCD      ||.data||

                          AREA ||i.ge2dHostBlt_Sprite||, CODE, READONLY, ALIGN=2

                  ge2dHostBlt_Sprite PROC
;;;2057     */
;;;2058   void ge2dHostBlt_Sprite(int x, int y, int width, int height, void *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2059   {
;;;2060       UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
;;;2061       int transfer_count, i, j;
;;;2062       UINT32 *ptr32, data32, alpha;
;;;2063   
;;;2064   #ifdef DEBUG
;;;2065       sysprintf("host_sprite_blt()\n");
;;;2066       sysprintf("(%d,%d)-(%d,%d)\n", x, y, x+width-1, y+height-1);
;;;2067   #endif
;;;2068   
;;;2069       cmd32 = 0xcc430020;
000004  e59f4164          LDR      r4,|L22.368|
;;;2070   
;;;2071       outpw(REG_GE2D_CTL, cmd32);
000008  e59f5164          LDR      r5,|L22.372|
00000c  e59dc018          LDR      r12,[sp,#0x18]        ;2069
000010  e5854020          STR      r4,[r5,#0x20]
;;;2072   
;;;2073       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000014  e59f615c          LDR      r6,|L22.376|
000018  e1d670bc          LDRH     r7,[r6,#0xc]  ; GFX_WIDTH
00001c  e1a07807          LSL      r7,r7,#16
;;;2074       outpw(REG_GE2D_SDPITCH, dest_pitch);
000020  e5857038          STR      r7,[r5,#0x38]
;;;2075   
;;;2076       dest_start = y << 16 | x;
000024  e1800801          ORR      r0,r0,r1,LSL #16
;;;2077       outpw(REG_GE2D_DSTSPA, dest_start);
000028  e5850040          STR      r0,[r5,#0x40]
;;;2078   
;;;2079       dest_dimension = height << 16 | width;
00002c  e1820803          ORR      r0,r2,r3,LSL #16
;;;2080       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000030  e5850044          STR      r0,[r5,#0x44]
;;;2081   
;;;2082       if (_ClipEnable) {
000034  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
000038  e3500000          CMP      r0,#0
00003c  0a000008          BEQ      |L22.100|
;;;2083           cmd32 |= 0x00000200;
;;;2084           if (_OutsideClip) {
000040  e5d60003          LDRB     r0,[r6,#3]  ; _OutsideClip
000044  e2844c02          ADD      r4,r4,#0x200          ;2083
000048  e3500000          CMP      r0,#0
;;;2085               cmd32 |= 0x00000100;
00004c  12844c01          ADDNE    r4,r4,#0x100
;;;2086           }
;;;2087           outpw(REG_GE2D_CTL, cmd32);
000050  e5854020          STR      r4,[r5,#0x20]
;;;2088           outpw(REG_GE2D_CLPBTL, _ClipTL);
000054  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
000058  e5850048          STR      r0,[r5,#0x48]
;;;2089           outpw(REG_GE2D_CLPBBR, _ClipBR);
00005c  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000060  e585004c          STR      r0,[r5,#0x4c]
                  |L22.100|
;;;2090       }
;;;2091   
;;;2092       if (_DrawMode==MODE_TRANSPARENT) {
000064  e5d67000          LDRB     r7,[r6,#0]  ; _DrawMode
000068  e59f0108          LDR      r0,|L22.376|
;;;2093           cmd32 |= 0x00008000; // color transparency
;;;2094           outpw(REG_GE2D_CTL, cmd32);
;;;2095           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
;;;2096           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
00006c  e59010dc          LDR      r1,[r0,#0xdc]
000070  e59000e0          LDR      r0,[r0,#0xe0]
000074  e3570001          CMP      r7,#1                 ;2092
000078  03844902          ORREQ    r4,r4,#0x8000         ;2093
00007c  0a000002          BEQ      |L22.140|
;;;2097       } else if (_DrawMode==MODE_DEST_TRANSPARENT) {
000080  e3570002          CMP      r7,#2
;;;2098           cmd32 |= 0x00009000;
000084  03844a09          ORREQ    r4,r4,#0x9000
000088  1a000002          BNE      |L22.152|
                  |L22.140|
;;;2099           outpw(REG_GE2D_CTL, cmd32);
00008c  e5854020          STR      r4,[r5,#0x20]
;;;2100           outpw(REG_GE2D_TRNSCOLR, _ColorKey);
000090  e585102c          STR      r1,[r5,#0x2c]
;;;2101           outpw(REG_GE2D_TCMSK, _ColorKeyMask);
000094  e5850030          STR      r0,[r5,#0x30]
                  |L22.152|
;;;2102       }
;;;2103   
;;;2104       if (_EnableAlpha) {
000098  e5d60001          LDRB     r0,[r6,#1]  ; _EnableAlpha
00009c  e3500000          CMP      r0,#0
0000a0  0a000009          BEQ      |L22.204|
;;;2105           cmd32 |= 0x00200000;
0000a4  e3840602          ORR      r0,r4,#0x200000
;;;2106           outpw(REG_GE2D_CTL, cmd32);
0000a8  e5850020          STR      r0,[r5,#0x20]
;;;2107   
;;;2108           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000ac  e595005c          LDR      r0,[r5,#0x5c]
;;;2109           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
0000b0  e1d61eb8          LDRH     r1,[r6,#0xe8]  ; _AlphaKd
0000b4  e5d640e4          LDRB     r4,[r6,#0xe4]  ; _AlphaKs
0000b8  e1a00800          LSL      r0,r0,#16             ;2108
0000bc  e1a00820          LSR      r0,r0,#16             ;2108
0000c0  e1811404          ORR      r1,r1,r4,LSL #8
;;;2110           data32 |= (alpha << 16);
0000c4  e1800801          ORR      r0,r0,r1,LSL #16
;;;2111   
;;;2112           outpw(REG_GE2D_MISCTL, data32);
0000c8  e585005c          STR      r0,[r5,#0x5c]
                  |L22.204|
;;;2113       }
;;;2114   
;;;2115       outpw(REG_GE2D_TRG, 1);
0000cc  e3a08001          MOV      r8,#1
0000d0  e5858000          STR      r8,[r5,#0]
;;;2116   
;;;2117       ptr32 = (UINT32 *)buf;
;;;2118       for (i=0; i<height; i++) {
0000d4  e3a07000          MOV      r7,#0
0000d8  ea00001d          B        |L22.340|
                  |L22.220|
;;;2119           transfer_count = width * (GFX_BPP/8) / 4; // 4-byte count
0000dc  e5960008          LDR      r0,[r6,#8]  ; GFX_BPP
0000e0  e1a001a0          LSR      r0,r0,#3
0000e4  e0000092          MUL      r0,r2,r0
0000e8  e1a00120          LSR      r0,r0,#2
                  |L22.236|
;;;2120   
;;;2121           while (transfer_count > 8) {
0000ec  e3500008          CMP      r0,#8
0000f0  da00000a          BLE      |L22.288|
                  |L22.244|
;;;2122               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
0000f4  e595105c          LDR      r1,[r5,#0x5c]
0000f8  e3110b02          TST      r1,#0x800
;;;2123               for (j=0; j<8; j++) {
0000fc  13a01000          MOVNE    r1,#0
000100  0afffffb          BEQ      |L22.244|
                  |L22.260|
;;;2124                   data32 = *ptr32++;
;;;2125                   outpw(REG_GE2D_GEHBDW0, data32);
000104  e49c4004          LDR      r4,[r12],#4
000108  e5854060          STR      r4,[r5,#0x60]
00010c  e2811001          ADD      r1,r1,#1
000110  e3510008          CMP      r1,#8                 ;2123
000114  a2400008          SUBGE    r0,r0,#8              ;2123
000118  aafffff3          BGE      |L22.236|
00011c  eafffff8          B        |L22.260|
                  |L22.288|
;;;2126               }
;;;2127               transfer_count -= 8;
;;;2128           }
;;;2129   
;;;2130           if (transfer_count > 0) {
000120  e3500000          CMP      r0,#0
000124  da000009          BLE      |L22.336|
                  |L22.296|
;;;2131               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
000128  e595105c          LDR      r1,[r5,#0x5c]
00012c  e3110b02          TST      r1,#0x800
;;;2132               for (j=0; j<transfer_count; j++) {
000130  13a01000          MOVNE    r1,#0
000134  0afffffb          BEQ      |L22.296|
000138  ea000002          B        |L22.328|
                  |L22.316|
;;;2133                   data32 = *ptr32++;
;;;2134                   outpw(REG_GE2D_GEHBDW0, data32);
00013c  e49c4004          LDR      r4,[r12],#4
000140  e5854060          STR      r4,[r5,#0x60]
000144  e2811001          ADD      r1,r1,#1
                  |L22.328|
000148  e1510000          CMP      r1,r0                 ;2132
00014c  bafffffa          BLT      |L22.316|
                  |L22.336|
000150  e2877001          ADD      r7,r7,#1              ;2132
                  |L22.340|
000154  e1570003          CMP      r7,r3                 ;2118
000158  baffffdf          BLT      |L22.220|
                  |L22.348|
;;;2135               }
;;;2136           }
;;;2137       }
;;;2138   
;;;2139       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
00015c  e5950010          LDR      r0,[r5,#0x10]
000160  e3100001          TST      r0,#1
;;;2140   
;;;2141       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000164  15858010          STRNE    r8,[r5,#0x10]
000168  0afffffb          BEQ      |L22.348|
;;;2142   }
00016c  e8bd81f0          POP      {r4-r8,pc}
;;;2143   
                          ENDP

                  |L22.368|
                          DCD      0xcc430020
                  |L22.372|
                          DCD      0xb000b000
                  |L22.376|
                          DCD      ||.data||

                          AREA ||i.ge2dHostBlt_Write||, CODE, READONLY, ALIGN=2

                  ge2dHostBlt_Write PROC
;;;1934     */
;;;1935   void ge2dHostBlt_Write(int x, int y, int width, int height, void *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1936   {
;;;1937       UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
;;;1938       int transfer_count, i, j;
;;;1939       UINT32 *ptr32, data32;
;;;1940   
;;;1941   #ifdef DEBUG
;;;1942       sysprintf("host_write_blt()\n");
;;;1943       sysprintf("(%d,%d)-(%d,%d)\n", x, y, x+width-1, y+height-1);
;;;1944       sysprintf("width=%d height=%d\n", width, height);
;;;1945   #endif
;;;1946   
;;;1947       cmd32 = 0xcc430020;
000004  e59f40d0          LDR      r4,|L23.220|
;;;1948   
;;;1949       outpw(REG_GE2D_CTL, cmd32);
000008  e59f50d0          LDR      r5,|L23.224|
00000c  e59dc018          LDR      r12,[sp,#0x18]        ;1947
000010  e5854020          STR      r4,[r5,#0x20]
;;;1950   
;;;1951       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000014  e59f70c8          LDR      r7,|L23.228|
000018  e1d740bc          LDRH     r4,[r7,#0xc]  ; GFX_WIDTH
00001c  e1a04804          LSL      r4,r4,#16
;;;1952       outpw(REG_GE2D_SDPITCH, dest_pitch);
000020  e5854038          STR      r4,[r5,#0x38]
;;;1953   
;;;1954       dest_start = y << 16 | x;
000024  e1800801          ORR      r0,r0,r1,LSL #16
;;;1955       outpw(REG_GE2D_DSTSPA, dest_start);
000028  e5850040          STR      r0,[r5,#0x40]
;;;1956   
;;;1957       dest_dimension = height << 16 | width;
00002c  e1820803          ORR      r0,r2,r3,LSL #16
;;;1958       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000030  e5850044          STR      r0,[r5,#0x44]
;;;1959   
;;;1960       outpw(REG_GE2D_TRG, 1);
000034  e3a08001          MOV      r8,#1
000038  e5858000          STR      r8,[r5,#0]
;;;1961   
;;;1962       ptr32 = (UINT32 *)buf;
;;;1963       for (i=0; i<height; i++) { // 120
00003c  e3a06000          MOV      r6,#0
000040  ea00001e          B        |L23.192|
                  |L23.68|
;;;1964           transfer_count = (width * (GFX_BPP/8) + 3) / 4; // 4-byte count
000044  e5970008          LDR      r0,[r7,#8]  ; GFX_BPP
000048  e1a001a0          LSR      r0,r0,#3
00004c  e0000092          MUL      r0,r2,r0
000050  e2800003          ADD      r0,r0,#3
000054  e1a00120          LSR      r0,r0,#2
                  |L23.88|
;;;1965   
;;;1966           while (transfer_count >= 8) {
000058  e3500008          CMP      r0,#8
00005c  ba00000a          BLT      |L23.140|
                  |L23.96|
;;;1967               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
000060  e595105c          LDR      r1,[r5,#0x5c]
000064  e3110b02          TST      r1,#0x800
;;;1968               for (j=0; j<8; j++) {
000068  13a01000          MOVNE    r1,#0
00006c  0afffffb          BEQ      |L23.96|
                  |L23.112|
;;;1969                   data32 = *ptr32++;
;;;1970                   outpw(REG_GE2D_GEHBDW0, data32);
000070  e49c4004          LDR      r4,[r12],#4
000074  e5854060          STR      r4,[r5,#0x60]
000078  e2811001          ADD      r1,r1,#1
00007c  e3510008          CMP      r1,#8                 ;1968
000080  a2400008          SUBGE    r0,r0,#8              ;1968
000084  aafffff3          BGE      |L23.88|
000088  eafffff8          B        |L23.112|
                  |L23.140|
;;;1971               }
;;;1972               transfer_count -= 8;
;;;1973           }
;;;1974   
;;;1975           if (transfer_count > 0) {
00008c  e3500000          CMP      r0,#0
000090  da000009          BLE      |L23.188|
                  |L23.148|
;;;1976               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
000094  e595105c          LDR      r1,[r5,#0x5c]
000098  e3110b02          TST      r1,#0x800
;;;1977               for (j=0; j<transfer_count; j++) {
00009c  13a01000          MOVNE    r1,#0
0000a0  0afffffb          BEQ      |L23.148|
0000a4  ea000002          B        |L23.180|
                  |L23.168|
;;;1978                   data32 = *ptr32++;
;;;1979                   outpw(REG_GE2D_GEHBDW0, data32);
0000a8  e49c4004          LDR      r4,[r12],#4
0000ac  e5854060          STR      r4,[r5,#0x60]
0000b0  e2811001          ADD      r1,r1,#1
                  |L23.180|
0000b4  e1510000          CMP      r1,r0                 ;1977
0000b8  bafffffa          BLT      |L23.168|
                  |L23.188|
0000bc  e2866001          ADD      r6,r6,#1              ;1977
                  |L23.192|
0000c0  e1560003          CMP      r6,r3                 ;1963
0000c4  baffffde          BLT      |L23.68|
                  |L23.200|
;;;1980               }
;;;1981           }
;;;1982       }
;;;1983   
;;;1984       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000c8  e5950010          LDR      r0,[r5,#0x10]
0000cc  e3100001          TST      r0,#1
;;;1985       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000d0  15858010          STRNE    r8,[r5,#0x10]
0000d4  0afffffb          BEQ      |L23.200|
;;;1986   }
0000d8  e8bd81f0          POP      {r4-r8,pc}
;;;1987   
                          ENDP

                  |L23.220|
                          DCD      0xcc430020
                  |L23.224|
                          DCD      0xb000b000
                  |L23.228|
                          DCD      ||.data||

                          AREA ||i.ge2dHostColorExpansionBlt||, CODE, READONLY, ALIGN=2

                  ge2dHostColorExpansionBlt PROC
;;;2612     */
;;;2613   void ge2dHostColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2614   {
000004  e1a0a000          MOV      r10,r0
000008  e59d0028          LDR      r0,[sp,#0x28]
00000c  e59db02c          LDR      r11,[sp,#0x2c]
000010  e59d4034          LDR      r4,[sp,#0x34]
000014  e59d5030          LDR      r5,[sp,#0x30]
000018  e1a06003          MOV      r6,r3
00001c  e1a07002          MOV      r7,r2
000020  e1a09001          MOV      r9,r1
;;;2615       UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
;;;2616       UINT32 fore_color32, back_color32;
;;;2617       UINT32 *ptr32, data32;
;;;2618       int transfer_count, i, j;
;;;2619   
;;;2620       fore_color32 = make_color(fore_color);
000024  ebfffffe          BL       make_color
000028  e1a08000          MOV      r8,r0
;;;2621       back_color32 = make_color(back_color);
00002c  e1a0000b          MOV      r0,r11
000030  ebfffffe          BL       make_color
000034  e1a01000          MOV      r1,r0
;;;2622   
;;;2623       cmd32 = 0xcc4300a0;
000038  e59f00dc          LDR      r0,|L24.284|
;;;2624       if (opt==MODE_TRANSPARENT) {
00003c  e3550001          CMP      r5,#1
;;;2625           cmd32 |= 0x00004000; // mono transparency
;;;2626       }
;;;2627   
;;;2628       outpw(REG_GE2D_CTL, cmd32);
000040  e59f50d8          LDR      r5,|L24.288|
000044  02800901          ADDEQ    r0,r0,#0x4000         ;2625
000048  e5850020          STR      r0,[r5,#0x20]
;;;2629   
;;;2630       outpw(REG_GE2D_FGCOLR, fore_color32);
00004c  e5858028          STR      r8,[r5,#0x28]
;;;2631       outpw(REG_GE2D_BGCOLR, back_color32);
000050  e5851024          STR      r1,[r5,#0x24]
;;;2632   
;;;2633       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000054  e59f00c8          LDR      r0,|L24.292|
000058  e1d000bc          LDRH     r0,[r0,#0xc]  ; GFX_WIDTH
00005c  e1a00800          LSL      r0,r0,#16
;;;2634       outpw(REG_GE2D_SDPITCH, dest_pitch);
000060  e5850038          STR      r0,[r5,#0x38]
;;;2635   
;;;2636       dest_start = y << 16 | x;
000064  e18a0809          ORR      r0,r10,r9,LSL #16
;;;2637       outpw(REG_GE2D_DSTSPA, dest_start);
000068  e5850040          STR      r0,[r5,#0x40]
;;;2638       outpw(REG_GE2D_SRCSPA, dest_start);
00006c  e585003c          STR      r0,[r5,#0x3c]
;;;2639   
;;;2640       dest_dimension = height << 16 | width;
000070  e1870806          ORR      r0,r7,r6,LSL #16
;;;2641       outpw(REG_GE2D_RTGLSZ, dest_dimension);
000074  e5850044          STR      r0,[r5,#0x44]
;;;2642   
;;;2643       outpw(REG_GE2D_TRG, 1);
000078  e3a03001          MOV      r3,#1
00007c  e5853000          STR      r3,[r5,#0]
;;;2644   
;;;2645       ptr32 = (UINT32 *)buf;
;;;2646       for (i=0; i<height; i++) {
000080  e3a02000          MOV      r2,#0
000084  ea00001d          B        |L24.256|
                  |L24.136|
;;;2647           transfer_count = (width+31) / 32; // 32 pixels unit
000088  e287001f          ADD      r0,r7,#0x1f
00008c  e1a01fc0          ASR      r1,r0,#31
000090  e0800da1          ADD      r0,r0,r1,LSR #27
000094  e1a002c0          ASR      r0,r0,#5
                  |L24.152|
;;;2648   
;;;2649           while (transfer_count > 8) {
000098  e3500008          CMP      r0,#8
00009c  da00000a          BLE      |L24.204|
                  |L24.160|
;;;2650               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
0000a0  e595105c          LDR      r1,[r5,#0x5c]
0000a4  e3110b02          TST      r1,#0x800
;;;2651               for (j=0; j<8; j++) {
0000a8  13a01000          MOVNE    r1,#0
0000ac  0afffffb          BEQ      |L24.160|
                  |L24.176|
;;;2652                   data32 = *ptr32++;
;;;2653                   outpw(REG_GE2D_GEHBDW0, data32);
0000b0  e494c004          LDR      r12,[r4],#4
0000b4  e585c060          STR      r12,[r5,#0x60]
0000b8  e2811001          ADD      r1,r1,#1
0000bc  e3510008          CMP      r1,#8                 ;2651
0000c0  a2400008          SUBGE    r0,r0,#8              ;2651
0000c4  aafffff3          BGE      |L24.152|
0000c8  eafffff8          B        |L24.176|
                  |L24.204|
;;;2654               }
;;;2655               transfer_count -= 8;
;;;2656           }
;;;2657   
;;;2658           if (transfer_count > 0) {
0000cc  e3500000          CMP      r0,#0
0000d0  da000009          BLE      |L24.252|
                  |L24.212|
;;;2659               while ((inpw(REG_GE2D_MISCTL) & 0x00000800)==0); // check empty
0000d4  e595105c          LDR      r1,[r5,#0x5c]
0000d8  e3110b02          TST      r1,#0x800
;;;2660               for (j=0; j<transfer_count; j++) {
0000dc  13a01000          MOVNE    r1,#0
0000e0  0afffffb          BEQ      |L24.212|
0000e4  ea000002          B        |L24.244|
                  |L24.232|
;;;2661                   data32 = *ptr32++;
;;;2662                   outpw(REG_GE2D_GEHBDW0, data32);
0000e8  e494c004          LDR      r12,[r4],#4
0000ec  e585c060          STR      r12,[r5,#0x60]
0000f0  e2811001          ADD      r1,r1,#1
                  |L24.244|
0000f4  e1510000          CMP      r1,r0                 ;2660
0000f8  bafffffa          BLT      |L24.232|
                  |L24.252|
0000fc  e2822001          ADD      r2,r2,#1              ;2660
                  |L24.256|
000100  e1520006          CMP      r2,r6                 ;2646
000104  baffffdf          BLT      |L24.136|
                  |L24.264|
;;;2663               }
;;;2664           }
;;;2665       }
;;;2666   
;;;2667       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000108  e5950010          LDR      r0,[r5,#0x10]
00010c  e3100001          TST      r0,#1
;;;2668   
;;;2669       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000110  15853010          STRNE    r3,[r5,#0x10]
000114  0afffffb          BEQ      |L24.264|
;;;2670   }
000118  e8bd9ff0          POP      {r4-r12,pc}
;;;2671   
                          ENDP

                  |L24.284|
                          DCD      0xcc4300a0
                  |L24.288|
                          DCD      0xb000b000
                  |L24.292|
                          DCD      ||.data||

                          AREA ||i.ge2dInit||, CODE, READONLY, ALIGN=2

                  ge2dInit PROC
;;;715      */
;;;716    void ge2dInit(int bpp, int width, int height, void *destination)
000000  e92d4010          PUSH     {r4,lr}
;;;717    {
;;;718        UINT32 data32;
;;;719    
;;;720        GFX_BPP = bpp;
000004  e59f4140          LDR      r4,|L25.332|
;;;721        GFX_WIDTH = width;
;;;722        GFX_HEIGHT = height;
;;;723        GFX_PITCH = (GFX_WIDTH*(GFX_BPP/8));
;;;724        GFX_SIZE = (GFX_HEIGHT*GFX_PITCH);
;;;725    
;;;726        if(destination == NULL)
000008  e3530000          CMP      r3,#0
00000c  e284c008          ADD      r12,r4,#8             ;720
000010  e88c0007          STM      r12,{r0-r2}           ;720
000014  e1a001a0          LSR      r0,r0,#3              ;723
000018  e0010190          MUL      r1,r0,r1              ;723
00001c  e5841014          STR      r1,[r4,#0x14]         ;723  ; GFX_PITCH
000020  e0010192          MUL      r1,r2,r1              ;724
000024  e5841018          STR      r1,[r4,#0x18]  ; GFX_SIZE
;;;727            return;
;;;728    
;;;729        Orig_GFX_START_ADDR = GFX_START_ADDR = (void *)destination;
;;;730        if(GFX_Mem == 0)
;;;731        {
;;;732            /* Only allocate memory once. Avoid memory fragmentation if calling ge2DInit() and ge2dReset repeatedly */
;;;733            Orig_GFX_PAT_ADDR = GFX_PAT_ADDR = (void *)malloc((8*8*(GFX_BPP/8))*2);
;;;734            GFX_PAT_ADDR = (void *)shift_pointer((int)GFX_PAT_ADDR, (8*8*(GFX_BPP/8))*2);  // two times of boundary size
;;;735    
;;;736    
;;;737            Orig_MONO_SOURCE_ADDR = MONO_SOURCE_ADDR = (void *)malloc(GFX_SIZE+32);
;;;738            MONO_SOURCE_ADDR = (void *)shift_pointer((int)MONO_SOURCE_ADDR, 32);
;;;739            Orig_COLOR_SOURCE_ADDR = COLOR_SOURCE_ADDR = (void *)malloc(GFX_SIZE+32);
;;;740            COLOR_SOURCE_ADDR = (void *)shift_pointer((int)COLOR_SOURCE_ADDR, 32);
;;;741            Orig_CMODEL_START_ADDR = CMODEL_START_ADDR = (void *)malloc(GFX_SIZE+32);
;;;742            CMODEL_START_ADDR = (void *)shift_pointer((int)CMODEL_START_ADDR, 32);
;;;743            Orig_GFX_OFFSCREEN_ADDR = GFX_OFFSCREEN_ADDR = (void *)malloc(GFX_SIZE+32);
;;;744            GFX_OFFSCREEN_ADDR = (void *)shift_pointer((int)GFX_OFFSCREEN_ADDR, 32);
;;;745            GFX_Mem = 1;
;;;746        }
;;;747    #ifdef DEBUG
;;;748        sysprintf("init_GE()\n");
;;;749        sysprintf("screen width = %d\n", GFX_WIDTH);
;;;750        sysprintf("screen height = %d\n", GFX_HEIGHT);
;;;751        sysprintf("screen bpp = %d\n", GFX_BPP);
;;;752        sysprintf("screen size = 0x%x\n", GFX_SIZE);
;;;753    #endif
;;;754    
;;;755        outpw(REG_CLK_HCLKEN, inpw(REG_CLK_HCLKEN) | (1<<28));
;;;756    
;;;757        outpw(REG_GE2D_INTSTS, 0); // clear interrupt
;;;758        outpw(REG_GE2D_PATSA, (unsigned int)GFX_PAT_ADDR);
;;;759        outpw(REG_GE2D_CTL, 0); // disable interrupt
;;;760        outpw(REG_GE2D_XYDORG, (unsigned int)GFX_START_ADDR);
;;;761        outpw(REG_GE2D_XYSORG, (unsigned int)GFX_START_ADDR);
;;;762    
;;;763        outpw(REG_GE2D_WRPLNMSK, 0x00ffffff); // write plane mask
;;;764    
;;;765        data32 = GE_BPP_8; // default is 8 bpp
;;;766    
;;;767        if (GFX_BPP==16) {
;;;768            data32 |= GE_BPP_16;
;;;769        } else if (GFX_BPP==32) {
;;;770            data32 |= GE_BPP_32;
;;;771        }
;;;772    
;;;773        outpw(REG_GE2D_MISCTL, data32);
;;;774    }
000028  08bd8010          POPEQ    {r4,pc}
00002c  e5843020          STR      r3,[r4,#0x20]         ;729  ; GFX_START_ADDR
000030  e58430c4          STR      r3,[r4,#0xc4]         ;730  ; Orig_GFX_START_ADDR
000034  e5941004          LDR      r1,[r4,#4]            ;730  ; GFX_Mem
000038  e3510000          CMP      r1,#0                 ;730
00003c  1a00002a          BNE      |L25.236|
000040  e1a00380          LSL      r0,r0,#7              ;733
000044  ebfffffe          BL       malloc
000048  e58400c0          STR      r0,[r4,#0xc0]         ;733  ; GFX_PAT_ADDR
00004c  e58400d8          STR      r0,[r4,#0xd8]         ;734  ; Orig_GFX_PAT_ADDR
000050  e5941008          LDR      r1,[r4,#8]            ;734  ; GFX_BPP
000054  e1a011a1          LSR      r1,r1,#3              ;734
000058  e1a01381          LSL      r1,r1,#7              ;734
00005c  ebfffffe          BL       shift_pointer
000060  e58400c0          STR      r0,[r4,#0xc0]         ;737  ; GFX_PAT_ADDR
000064  e5940018          LDR      r0,[r4,#0x18]         ;737  ; GFX_SIZE
000068  e2800020          ADD      r0,r0,#0x20           ;737
00006c  ebfffffe          BL       malloc
000070  e5840040          STR      r0,[r4,#0x40]         ;737  ; MONO_SOURCE_ADDR
000074  e3a01020          MOV      r1,#0x20              ;738
000078  e58400c8          STR      r0,[r4,#0xc8]         ;738  ; Orig_MONO_SOURCE_ADDR
00007c  ebfffffe          BL       shift_pointer
000080  e5840040          STR      r0,[r4,#0x40]         ;739  ; MONO_SOURCE_ADDR
000084  e5940018          LDR      r0,[r4,#0x18]         ;739  ; GFX_SIZE
000088  e2800020          ADD      r0,r0,#0x20           ;739
00008c  ebfffffe          BL       malloc
000090  e5840060          STR      r0,[r4,#0x60]         ;739  ; COLOR_SOURCE_ADDR
000094  e3a01020          MOV      r1,#0x20              ;740
000098  e58400cc          STR      r0,[r4,#0xcc]         ;740  ; Orig_COLOR_SOURCE_ADDR
00009c  ebfffffe          BL       shift_pointer
0000a0  e5840060          STR      r0,[r4,#0x60]         ;741  ; COLOR_SOURCE_ADDR
0000a4  e5940018          LDR      r0,[r4,#0x18]         ;741  ; GFX_SIZE
0000a8  e2800020          ADD      r0,r0,#0x20           ;741
0000ac  ebfffffe          BL       malloc
0000b0  e5840080          STR      r0,[r4,#0x80]         ;741  ; CMODEL_START_ADDR
0000b4  e3a01020          MOV      r1,#0x20              ;742
0000b8  e58400d0          STR      r0,[r4,#0xd0]         ;742  ; Orig_CMODEL_START_ADDR
0000bc  ebfffffe          BL       shift_pointer
0000c0  e5840080          STR      r0,[r4,#0x80]         ;743  ; CMODEL_START_ADDR
0000c4  e5940018          LDR      r0,[r4,#0x18]         ;743  ; GFX_SIZE
0000c8  e2800020          ADD      r0,r0,#0x20           ;743
0000cc  ebfffffe          BL       malloc
0000d0  e58400a0          STR      r0,[r4,#0xa0]         ;743  ; GFX_OFFSCREEN_ADDR
0000d4  e3a01020          MOV      r1,#0x20              ;744
0000d8  e58400d4          STR      r0,[r4,#0xd4]         ;744  ; Orig_GFX_OFFSCREEN_ADDR
0000dc  ebfffffe          BL       shift_pointer
0000e0  e58400a0          STR      r0,[r4,#0xa0]         ;744  ; GFX_OFFSCREEN_ADDR
0000e4  e3a00001          MOV      r0,#1                 ;745
0000e8  e5840004          STR      r0,[r4,#4]            ;745  ; GFX_Mem
                  |L25.236|
0000ec  e3a0020b          MOV      r0,#0xb0000000        ;755
0000f0  e5901210          LDR      r1,[r0,#0x210]        ;755
0000f4  e3811201          ORR      r1,r1,#0x10000000     ;755
0000f8  e5801210          STR      r1,[r0,#0x210]        ;755
0000fc  e59f104c          LDR      r1,|L25.336|
000100  e3a00000          MOV      r0,#0                 ;757
000104  e5810010          STR      r0,[r1,#0x10]         ;757
000108  e59420c0          LDR      r2,[r4,#0xc0]         ;758  ; GFX_PAT_ADDR
00010c  e5812014          STR      r2,[r1,#0x14]         ;758
000110  e5810020          STR      r0,[r1,#0x20]         ;759
000114  e5940020          LDR      r0,[r4,#0x20]         ;760  ; GFX_START_ADDR
000118  e5810034          STR      r0,[r1,#0x34]         ;760
00011c  e5810004          STR      r0,[r1,#4]            ;761
000120  e3e004ff          MVN      r0,#0xff000000        ;763
000124  e5810058          STR      r0,[r1,#0x58]         ;763
000128  e5942008          LDR      r2,[r4,#8]            ;767  ; GFX_BPP
00012c  e3a00000          MOV      r0,#0                 ;765
000130  e3520010          CMP      r2,#0x10              ;767
000134  03a00010          MOVEQ    r0,#0x10              ;768
000138  0a000001          BEQ      |L25.324|
00013c  e3520020          CMP      r2,#0x20              ;769
000140  03a00020          MOVEQ    r0,#0x20              ;770
                  |L25.324|
000144  e581005c          STR      r0,[r1,#0x5c]         ;773
000148  e8bd8010          POP      {r4,pc}
;;;775    
                          ENDP

                  |L25.332|
                          DCD      ||.data||
                  |L25.336|
                          DCD      0xb000b000

                          AREA ||i.ge2dInitColorPattern||, CODE, READONLY, ALIGN=2

                  ge2dInitColorPattern PROC
;;;2741     */
;;;2742   void ge2dInitColorPattern(int patformat, void *patdata)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;2743   {
;;;2744       UINT8 *ptr_pat;
;;;2745       UINT8 *ptr8, r8, g8, b8;
;;;2746       UINT16 *ptr16, r16, g16, b16, g16_1, g16_2;
;;;2747       UINT32 *ptr32, r32, g32, b32, g32_1, g32_2;
;;;2748       int idx;
;;;2749   
;;;2750       ptr_pat = (UINT8 *)patdata;
;;;2751       if(patformat == RGB888) {
;;;2752           if (GFX_BPP==8) {
000004  e59fc248          LDR      r12,|L26.596|
000008  e3500003          CMP      r0,#3                 ;2751
00000c  e59c20c0          LDR      r2,[r12,#0xc0]        ;2751
000010  e59c3008          LDR      r3,[r12,#8]           ;2751
000014  0a000004          BEQ      |L26.44|
;;;2753               ptr8 = (UINT8 *)GFX_PAT_ADDR;
;;;2754               for (idx=0; idx<64; idx++) {
;;;2755                   b8 = (UINT8)(*ptr_pat++) & 0xc0; // 2 bits
;;;2756                   g8 = (UINT8)(*ptr_pat++) & 0xe0; // 3 bits
;;;2757                   r8 = (UINT8)(*ptr_pat++) & 0xe0; // 3 bits
;;;2758                   ptr_pat++;
;;;2759                   *ptr8++ = r8 | (g8>>3) | (b8>>6);
;;;2760               }
;;;2761           } else if (GFX_BPP==16) {
;;;2762               ptr16 = (UINT16 *)GFX_PAT_ADDR;
;;;2763               for (idx=0; idx<64; idx++) {
;;;2764                   b16 = (UINT16)(*ptr_pat++) & 0x000f8; // 5 bits
;;;2765                   g16 = (UINT16)(*ptr_pat++) & 0x000fc; // 6 bits
;;;2766                   r16 = (UINT16)(*ptr_pat++) & 0x000f8; // 5 bits
;;;2767                   ptr_pat++;
;;;2768                   *ptr16++ = (r16<<8) | (g16<<3) | (b16>>3);
;;;2769               }
;;;2770           } else if (GFX_BPP==32) {
;;;2771               ptr32 = (UINT32 *)GFX_PAT_ADDR;
;;;2772               for (idx=0; idx<64; idx++) {
;;;2773                   b32 = (UINT32)(*ptr_pat++);
;;;2774                   g32 = (UINT32)(*ptr_pat++);
;;;2775                   r32 = (UINT32)(*ptr_pat++);
;;;2776                   ptr_pat++;
;;;2777                   *ptr32++ = (r32<<16) | (g32<<8) | b32;
;;;2778               }
;;;2779           }
;;;2780       } else if(patformat == RGB565) {
000018  e3500002          CMP      r0,#2
00001c  0a000032          BEQ      |L26.236|
;;;2781           if (GFX_BPP==8) {
;;;2782               ptr8 = (UINT8 *)GFX_PAT_ADDR;
;;;2783   
;;;2784               for (idx=0; idx<64; idx++) {
;;;2785                   b8 = (UINT8)(*ptr_pat++) & 0x00018; // 2 bits
;;;2786                   g8 = (UINT8)(*ptr_pat) & 0x00007;  // 3 bits
;;;2787                   r8 = (UINT8)(*ptr_pat++) & 0x000e0;  // 3bits
;;;2788                   *ptr8++ = r8 | (g8<<2) | (b8>>3);
;;;2789               }
;;;2790           } else if (GFX_BPP==16) {
;;;2791               ptr16 = (UINT16 *)GFX_PAT_ADDR;
;;;2792   
;;;2793               for (idx=0; idx<64; idx++) {
;;;2794                   *ptr16++ = (*ptr_pat) | (*(ptr_pat+1)) << 8;
;;;2795                   ptr_pat+=2;
;;;2796               }
;;;2797           } else if (GFX_BPP==32) {
;;;2798               ptr32 = (UINT32 *)GFX_PAT_ADDR;
;;;2799   
;;;2800               for (idx=0; idx<64; idx++) {
;;;2801                   b32 = (UINT8)(*ptr_pat) & 0x1f;      // 5 bits
;;;2802                   g32_1 = (UINT8)(*ptr_pat++) & 0xe0;  // front 3 bits
;;;2803                   g32_2 = (UINT8)(*ptr_pat) & 0x07;    // back 3 bits
;;;2804                   g32 = ((g32_1>>5) | (g32_2<<3))<<2;
;;;2805                   r32 = (UINT8)(*ptr_pat++) & 0xf8;    // 5 bits
;;;2806                   *ptr32++ = 0<<24 | (r32<<16) | (g32<<8) | (b32<<3);
;;;2807               }
;;;2808           }
;;;2809       } else if(patformat == RGB332) {
000020  e3500001          CMP      r0,#1
000024  0a00005e          BEQ      |L26.420|
000028  ea000086          B        |L26.584|
                  |L26.44|
00002c  e3530008          CMP      r3,#8                 ;2752
000030  03a00000          MOVEQ    r0,#0                 ;2754
000034  0a000006          BEQ      |L26.84|
000038  e3530010          CMP      r3,#0x10              ;2761
00003c  03a00000          MOVEQ    r0,#0                 ;2763
000040  0a000010          BEQ      |L26.136|
000044  e3530020          CMP      r3,#0x20              ;2770
000048  03a00000          MOVEQ    r0,#0                 ;2772
00004c  0a00001b          BEQ      |L26.192|
000050  ea00007c          B        |L26.584|
                  |L26.84|
000054  e4d13001          LDRB     r3,[r1],#1            ;2755
000058  e2800001          ADD      r0,r0,#1              ;2759
00005c  e3500040          CMP      r0,#0x40              ;2754
000060  e20340c0          AND      r4,r3,#0xc0           ;2755
000064  e4d13001          LDRB     r3,[r1],#1            ;2756
000068  e4d15002          LDRB     r5,[r1],#2            ;2757
00006c  e20330e0          AND      r3,r3,#0xe0           ;2756
000070  e20550e0          AND      r5,r5,#0xe0           ;2757
000074  e18531a3          ORR      r3,r5,r3,LSR #3       ;2759
000078  e1833324          ORR      r3,r3,r4,LSR #6       ;2759
00007c  e4c23001          STRB     r3,[r2],#1            ;2759
000080  bafffff3          BLT      |L26.84|
000084  ea00006f          B        |L26.584|
                  |L26.136|
000088  e4d13001          LDRB     r3,[r1],#1            ;2764
00008c  e4d14001          LDRB     r4,[r1],#1            ;2765
000090  e4d15002          LDRB     r5,[r1],#2            ;2766
000094  e20330f8          AND      r3,r3,#0xf8           ;2764
000098  e20440fc          AND      r4,r4,#0xfc           ;2765
00009c  e20550f8          AND      r5,r5,#0xf8           ;2766
0000a0  e1a05405          LSL      r5,r5,#8              ;2768
0000a4  e1854184          ORR      r4,r5,r4,LSL #3       ;2768
0000a8  e18431a3          ORR      r3,r4,r3,LSR #3       ;2768
0000ac  e2800001          ADD      r0,r0,#1              ;2768
0000b0  e3500040          CMP      r0,#0x40              ;2763
0000b4  e0c230b2          STRH     r3,[r2],#2            ;2768
0000b8  bafffff2          BLT      |L26.136|
0000bc  ea000061          B        |L26.584|
                  |L26.192|
0000c0  e4d13001          LDRB     r3,[r1],#1            ;2773
0000c4  e4d14001          LDRB     r4,[r1],#1            ;2774
0000c8  e4d15002          LDRB     r5,[r1],#2            ;2775
0000cc  e2800001          ADD      r0,r0,#1              ;2777
0000d0  e3500040          CMP      r0,#0x40              ;2772
0000d4  e1a05805          LSL      r5,r5,#16             ;2777
0000d8  e1854404          ORR      r4,r5,r4,LSL #8       ;2777
0000dc  e1833004          ORR      r3,r3,r4              ;2777
0000e0  e4823004          STR      r3,[r2],#4            ;2772
0000e4  bafffff5          BLT      |L26.192|
0000e8  ea000056          B        |L26.584|
                  |L26.236|
0000ec  e3530008          CMP      r3,#8                 ;2781
0000f0  03a00000          MOVEQ    r0,#0                 ;2784
0000f4  0a000007          BEQ      |L26.280|
0000f8  e3530010          CMP      r3,#0x10              ;2790
0000fc  03a00000          MOVEQ    r0,#0                 ;2793
000100  0a000010          BEQ      |L26.328|
000104  e3530020          CMP      r3,#0x20              ;2797
000108  03a00000          MOVEQ    r0,#0                 ;2800
;;;2810           if (GFX_BPP==8) {
;;;2811               ptr8 = (UINT8 *)GFX_PAT_ADDR;
;;;2812   
;;;2813               for (idx=0; idx<64; idx++) {
;;;2814                   *ptr8++ = *ptr_pat;
;;;2815                   ptr_pat++;
;;;2816               }
;;;2817           } else if (GFX_BPP==16) {
;;;2818               ptr16 = (UINT16 *)GFX_PAT_ADDR;
;;;2819   
;;;2820               for (idx=0; idx<64; idx++) {
;;;2821                   r16 = (UINT8)(*ptr_pat) & 0xe0; // 3 bits
;;;2822                   g16_1 = (UINT8)(*ptr_pat) & 0x10;
;;;2823                   g16_2 = (UINT8)(*ptr_pat) & 0x0c;
;;;2824                   g16 = (g16_1>>2) | (g16_2>>2);
;;;2825                   b16 = (UINT8)(*ptr_pat++) & 0x3; // 2 bits
;;;2826                   *ptr16++ = (r16<<8) | (g16<<8) | (b16<<3);
;;;2827               }
;;;2828           } else if (GFX_BPP==32) {
;;;2829               ptr32 = (UINT32 *)GFX_PAT_ADDR;
;;;2830   
;;;2831               for (idx=0; idx<64; idx++) {
;;;2832                   r32 = (UINT8)(*ptr_pat) & 0xe0;  // 3 bits
;;;2833                   g32 = (UINT8)(*ptr_pat) & 0x1c;  // 3 bits
;;;2834                   b32 = (UINT8)(*ptr_pat++) & 0x3;  // 2 bits
;;;2835                   *ptr32++ = 0<<24 | (r32<<15) | (g32<<11) | (b32<<6);
;;;2836               }
;;;2837           }
;;;2838       }
;;;2839   
;;;2840       _PatternType = TYPE_COLOR;
;;;2841   }
00010c  03a07007          MOVEQ    r7,#7
000110  0a000014          BEQ      |L26.360|
000114  ea00004b          B        |L26.584|
                  |L26.280|
000118  e4d13001          LDRB     r3,[r1],#1            ;2785
00011c  e2800001          ADD      r0,r0,#1              ;2788
000120  e3500040          CMP      r0,#0x40              ;2784
000124  e2034018          AND      r4,r3,#0x18           ;2785
000128  e4d13001          LDRB     r3,[r1],#1            ;2786
00012c  e2035007          AND      r5,r3,#7              ;2786
000130  e20330e0          AND      r3,r3,#0xe0           ;2787
000134  e1833105          ORR      r3,r3,r5,LSL #2       ;2788
000138  e18331a4          ORR      r3,r3,r4,LSR #3       ;2788
00013c  e4c23001          STRB     r3,[r2],#1            ;2788
000140  bafffff4          BLT      |L26.280|
000144  ea00003f          B        |L26.584|
                  |L26.328|
000148  e4d13001          LDRB     r3,[r1],#1            ;2794
00014c  e4d14001          LDRB     r4,[r1],#1            ;2794
000150  e2800001          ADD      r0,r0,#1              ;2794
000154  e3500040          CMP      r0,#0x40              ;2793
000158  e1833404          ORR      r3,r3,r4,LSL #8       ;2794
00015c  e0c230b2          STRH     r3,[r2],#2            ;2794
000160  bafffff8          BLT      |L26.328|
000164  ea000037          B        |L26.584|
                  |L26.360|
000168  e4d13001          LDRB     r3,[r1],#1            ;2801
00016c  e4d14001          LDRB     r4,[r1],#1            ;2803
000170  e2800001          ADD      r0,r0,#1              ;2806
000174  e203501f          AND      r5,r3,#0x1f           ;2801
000178  e2046007          AND      r6,r4,#7              ;2803
00017c  e00732a3          AND      r3,r7,r3,LSR #5
000180  e20440f8          AND      r4,r4,#0xf8           ;2805
000184  e1833186          ORR      r3,r3,r6,LSL #3       ;2804
000188  e1a04804          LSL      r4,r4,#16             ;2806
00018c  e1843503          ORR      r3,r4,r3,LSL #10      ;2806
000190  e1833185          ORR      r3,r3,r5,LSL #3       ;2806
000194  e3500040          CMP      r0,#0x40              ;2800
000198  e4823004          STR      r3,[r2],#4            ;2800
00019c  bafffff1          BLT      |L26.360|
0001a0  ea000028          B        |L26.584|
                  |L26.420|
0001a4  e3530008          CMP      r3,#8                 ;2810
0001a8  03a00000          MOVEQ    r0,#0                 ;2813
0001ac  0a000006          BEQ      |L26.460|
0001b0  e3530010          CMP      r3,#0x10              ;2817
0001b4  03a03000          MOVEQ    r3,#0                 ;2820
0001b8  0a000009          BEQ      |L26.484|
0001bc  e3530020          CMP      r3,#0x20              ;2828
0001c0  03a00000          MOVEQ    r0,#0                 ;2831
0001c4  0a000014          BEQ      |L26.540|
0001c8  ea00001e          B        |L26.584|
                  |L26.460|
0001cc  e4d13001          LDRB     r3,[r1],#1            ;2814
0001d0  e2800001          ADD      r0,r0,#1              ;2814
0001d4  e3500040          CMP      r0,#0x40              ;2813
0001d8  e4c23001          STRB     r3,[r2],#1            ;2814
0001dc  bafffffa          BLT      |L26.460|
0001e0  ea000018          B        |L26.584|
                  |L26.484|
0001e4  e4d10001          LDRB     r0,[r1],#1            ;2821
0001e8  e2833001          ADD      r3,r3,#1              ;2826
0001ec  e3530040          CMP      r3,#0x40              ;2820
0001f0  e2005010          AND      r5,r0,#0x10           ;2822
0001f4  e200600c          AND      r6,r0,#0xc            ;2823
0001f8  e20040e0          AND      r4,r0,#0xe0           ;2821
0001fc  e1855006          ORR      r5,r5,r6              ;2824
000200  e1844125          ORR      r4,r4,r5,LSR #2       ;2826
000204  e2000003          AND      r0,r0,#3              ;2825
000208  e1a04404          LSL      r4,r4,#8              ;2826
00020c  e1840180          ORR      r0,r4,r0,LSL #3       ;2826
000210  e0c200b2          STRH     r0,[r2],#2            ;2826
000214  bafffff2          BLT      |L26.484|
000218  ea00000a          B        |L26.584|
                  |L26.540|
00021c  e4d13001          LDRB     r3,[r1],#1            ;2832
000220  e2800001          ADD      r0,r0,#1              ;2835
000224  e3500040          CMP      r0,#0x40              ;2831
000228  e20350e0          AND      r5,r3,#0xe0           ;2832
00022c  e203401c          AND      r4,r3,#0x1c           ;2833
000230  e1a05785          LSL      r5,r5,#15             ;2835
000234  e2033003          AND      r3,r3,#3              ;2834
000238  e1854584          ORR      r4,r5,r4,LSL #11      ;2835
00023c  e1843303          ORR      r3,r4,r3,LSL #6       ;2835
000240  e4823004          STR      r3,[r2],#4            ;2831
000244  bafffff4          BLT      |L26.540|
                  |L26.584|
000248  e3a00001          MOV      r0,#1                 ;2840
00024c  e58c00f4          STR      r0,[r12,#0xf4]        ;2840  ; _PatternType
000250  e8bd80f0          POP      {r4-r7,pc}
;;;2842   
                          ENDP

                  |L26.596|
                          DCD      ||.data||

                          AREA ||i.ge2dInitMonoInputPattern||, CODE, READONLY, ALIGN=2

                  ge2dInitMonoInputPattern PROC
;;;2707     */
;;;2708   void ge2dInitMonoInputPattern(UINT32 PatternA, UINT32 PatternB, int fore_color, int back_color)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;2709   {
;;;2710       UINT32 color32;
;;;2711   
;;;2712       /*
;;;2713       ** If hardware pattern definition is a little different from software.
;;;2714       ** Need to do the BYTE swap before programming the pattern registers.
;;;2715       */
;;;2716   
;;;2717       outpw(REG_GE2D_PTNA, PatternA);
000004  e59f4030          LDR      r4,|L27.60|
000008  e1a05003          MOV      r5,r3                 ;2709
00000c  e5840050          STR      r0,[r4,#0x50]
;;;2718       outpw(REG_GE2D_PTNB, PatternB);
000010  e5841054          STR      r1,[r4,#0x54]
;;;2719   
;;;2720       color32 = make_color(fore_color);
000014  e1a00002          MOV      r0,r2
000018  ebfffffe          BL       make_color
;;;2721       outpw(REG_GE2D_FGCOLR, color32);
00001c  e5840028          STR      r0,[r4,#0x28]
;;;2722   
;;;2723       color32 = make_color(back_color);
000020  e1a00005          MOV      r0,r5
000024  ebfffffe          BL       make_color
;;;2724       outpw(REG_GE2D_BGCOLR, color32);
000028  e5840024          STR      r0,[r4,#0x24]
;;;2725   
;;;2726       _PatternType = TYPE_MONO;
00002c  e59f100c          LDR      r1,|L27.64|
000030  e3a00000          MOV      r0,#0
000034  e58100f4          STR      r0,[r1,#0xf4]  ; _PatternType
;;;2727   }
000038  e8bd8070          POP      {r4-r6,pc}
;;;2728   
                          ENDP

                  |L27.60|
                          DCD      0xb000b000
                  |L27.64|
                          DCD      ||.data||

                          AREA ||i.ge2dInitMonoPattern||, CODE, READONLY, ALIGN=2

                  ge2dInitMonoPattern PROC
;;;2678     */
;;;2679   void ge2dInitMonoPattern(int opt, int fore_color, int back_color)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;2680   {
;;;2681       UINT32 color32;
;;;2682   
;;;2683       /*
;;;2684       ** If hardware pattern definition is a little different from software.
;;;2685       ** Need to do the BYTE swap before programming the pattern registers.
;;;2686       */
;;;2687   
;;;2688       outpw(REG_GE2D_PTNA, MonoPatternData[opt].PatternA);
000004  e59f3040          LDR      r3,|L28.76|
000008  e1a05002          MOV      r5,r2                 ;2680
00000c  e7932180          LDR      r2,[r3,r0,LSL #3]
000010  e59f4038          LDR      r4,|L28.80|
000014  e5842050          STR      r2,[r4,#0x50]
;;;2689       outpw(REG_GE2D_PTNB, MonoPatternData[opt].PatternB);
000018  e0830180          ADD      r0,r3,r0,LSL #3
00001c  e5900004          LDR      r0,[r0,#4]
000020  e5840054          STR      r0,[r4,#0x54]
;;;2690   
;;;2691       color32 = make_color(fore_color);
000024  e1a00001          MOV      r0,r1
000028  ebfffffe          BL       make_color
;;;2692       outpw(REG_GE2D_FGCOLR, color32);
00002c  e5840028          STR      r0,[r4,#0x28]
;;;2693   
;;;2694       color32 = make_color(back_color);
000030  e1a00005          MOV      r0,r5
000034  ebfffffe          BL       make_color
;;;2695       outpw(REG_GE2D_BGCOLR, color32);
000038  e5840024          STR      r0,[r4,#0x24]
;;;2696   
;;;2697       _PatternType = TYPE_MONO;
00003c  e59f1010          LDR      r1,|L28.84|
000040  e3a00000          MOV      r0,#0
000044  e58100f4          STR      r0,[r1,#0xf4]  ; _PatternType
;;;2698   }
000048  e8bd8070          POP      {r4-r6,pc}
;;;2699   
                          ENDP

                  |L28.76|
                          DCD      ||.data||+0xf8
                  |L28.80|
                          DCD      0xb000b000
                  |L28.84|
                          DCD      ||.data||

                          AREA ||i.ge2dLine_DrawSolidLine||, CODE, READONLY, ALIGN=2

                  ge2dLine_DrawSolidLine PROC
;;;1321     */
;;;1322   void ge2dLine_DrawSolidLine(int x1, int y1, int x2, int y2, int color)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1323   {
000004  e1a04001          MOV      r4,r1
000008  e1a05000          MOV      r5,r0
;;;1324       int abs_X, abs_Y, min, max;
;;;1325       UINT32 step_constant, initial_error, direction_code;
;;;1326       UINT32 cmd32, dest_pitch, dest_start;
;;;1327   
;;;1328   #ifdef DEBUG
;;;1329       sysprintf("draw_solid_line():\n");
;;;1330       sysprintf("(%d,%d)-(%d,%d)\n", x1, y1, x2, y2);
;;;1331       sysprintf("color=0x%x\n", color);
;;;1332   #endif
;;;1333   
;;;1334       abs_X = ABS(x2-x1);   //absolute value
00000c  e0421005          SUB      r1,r2,r5
000010  e3510000          CMP      r1,#0
000014  d0451002          SUBLE    r1,r5,r2
;;;1335       abs_Y = ABS(y2-y1);   //absolute value
000018  e0430004          SUB      r0,r3,r4
00001c  e3500000          CMP      r0,#0
000020  e59d7018          LDR      r7,[sp,#0x18]         ;1334
000024  d0440003          SUBLE    r0,r4,r3
;;;1336       if (abs_X > abs_Y) {  // X major
000028  e1510000          CMP      r1,r0
00002c  da000033          BLE      |L29.256|
;;;1337           max = abs_X;
;;;1338           min = abs_Y;
;;;1339   
;;;1340           step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
000030  e040c001          SUB      r12,r0,r1
000034  e1a0c88c          LSL      r12,r12,#17
000038  e18cc080          ORR      r12,r12,r0,LSL #1
;;;1341           initial_error = (((UINT32)(2*(min)-max)) << 16) | (UINT32)(max);
00003c  e0610080          RSB      r0,r1,r0,LSL #1
;;;1342   
;;;1343           if (x2 > x1) { // +X direction
000040  e1520005          CMP      r2,r5
000044  e1810800          ORR      r0,r1,r0,LSL #16      ;1341
000048  da000028          BLE      |L29.240|
;;;1344               if (y2 > y1) // +Y direction
00004c  e1530004          CMP      r3,r4
;;;1345                   direction_code = XpYpXl;
;;;1346               else // -Y direction
;;;1347                   direction_code = XpYmXl;
000050  d3a02004          MOVLE    r2,#4
000054  c3a02000          MOVGT    r2,#0                 ;1345
                  |L29.88|
;;;1348           } else { // -X direction
;;;1349               if (y2 > y1) // +Y direction
;;;1350                   direction_code = XmYpXl;
;;;1351               else // -Y direction
;;;1352                   direction_code = XmYmXl;
;;;1353           }
;;;1354       } else { // Y major
;;;1355           max = abs_Y;
;;;1356           min = abs_X;
;;;1357   
;;;1358           step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
;;;1359           initial_error = (((UINT32)(2*(min)-max)) << 16) | (UINT32)(max);
;;;1360   
;;;1361           if (x2 > x1) { // +X direction
;;;1362               if (y2 > y1) // +Y direction
;;;1363                   direction_code = XpYpYl;
;;;1364               else // -Y direction
;;;1365                   direction_code = XpYmYl;
;;;1366           } else { // -X direction
;;;1367               if (y2 > y1) // +Y direction
;;;1368                   direction_code = XmYpYl;
;;;1369               else // -Y direction
;;;1370                   direction_code = XmYmYl;
;;;1371           }
;;;1372       }
;;;1373   
;;;1374       outpw(REG_GE2D_BETSC, step_constant);
000058  e59f60dc          LDR      r6,|L29.316|
00005c  e586c018          STR      r12,[r6,#0x18]
;;;1375       outpw(REG_GE2D_BIEPC, initial_error);
000060  e586001c          STR      r0,[r6,#0x1c]
;;;1376   
;;;1377       cmd32 = 0x008b0000 | direction_code;
000064  e382888b          ORR      r8,r2,#0x8b0000
;;;1378   
;;;1379       outpw(REG_GE2D_CTL, cmd32);
000068  e5868020          STR      r8,[r6,#0x20]
;;;1380   
;;;1381       outpw(REG_GE2D_BGCOLR, make_color(color));
00006c  e1a00007          MOV      r0,r7
000070  ebfffffe          BL       make_color
000074  e5860024          STR      r0,[r6,#0x24]
;;;1382       outpw(REG_GE2D_FGCOLR, make_color(color));
000078  e1a00007          MOV      r0,r7
00007c  ebfffffe          BL       make_color
000080  e5860028          STR      r0,[r6,#0x28]
;;;1383   
;;;1384       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000084  e59f10b4          LDR      r1,|L29.320|
000088  e1d100bc          LDRH     r0,[r1,#0xc]  ; GFX_WIDTH
00008c  e1a00800          LSL      r0,r0,#16
;;;1385       outpw(REG_GE2D_SDPITCH, dest_pitch);
000090  e5860038          STR      r0,[r6,#0x38]
;;;1386   
;;;1387       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);
000094  e5910020          LDR      r0,[r1,#0x20]  ; GFX_START_ADDR
000098  e5860034          STR      r0,[r6,#0x34]
;;;1388   
;;;1389       dest_start = y1 << 16 | x1;
00009c  e1850804          ORR      r0,r5,r4,LSL #16
;;;1390       outpw(REG_GE2D_DSTSPA, dest_start);
0000a0  e5860040          STR      r0,[r6,#0x40]
;;;1391   
;;;1392       if (_ClipEnable) {
0000a4  e5d10002          LDRB     r0,[r1,#2]  ; _ClipEnable
0000a8  e3500000          CMP      r0,#0
0000ac  0a000008          BEQ      |L29.212|
;;;1393           cmd32 |= 0x00000200;
;;;1394           if (_OutsideClip) {
0000b0  e5d12003          LDRB     r2,[r1,#3]  ; _OutsideClip
0000b4  e3880c02          ORR      r0,r8,#0x200          ;1393
0000b8  e3520000          CMP      r2,#0
;;;1395               cmd32 |= 0x00000100;
0000bc  13800c01          ORRNE    r0,r0,#0x100
;;;1396           }
;;;1397           outpw(REG_GE2D_CTL, cmd32);
0000c0  e5860020          STR      r0,[r6,#0x20]
;;;1398           outpw(REG_GE2D_CLPBTL, _ClipTL);
0000c4  e59100ec          LDR      r0,[r1,#0xec]  ; _ClipTL
0000c8  e5860048          STR      r0,[r6,#0x48]
;;;1399           outpw(REG_GE2D_CLPBBR, _ClipBR);
0000cc  e59100f0          LDR      r0,[r1,#0xf0]  ; _ClipBR
0000d0  e586004c          STR      r0,[r6,#0x4c]
                  |L29.212|
;;;1400       }
;;;1401   
;;;1402       outpw(REG_GE2D_TRG, 1);
0000d4  e3a01001          MOV      r1,#1
0000d8  e5861000          STR      r1,[r6,#0]
                  |L29.220|
;;;1403   
;;;1404       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000dc  e5960010          LDR      r0,[r6,#0x10]
0000e0  e3100001          TST      r0,#1
;;;1405   
;;;1406       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000e4  15861010          STRNE    r1,[r6,#0x10]
0000e8  0afffffb          BEQ      |L29.220|
;;;1407   }
0000ec  e8bd81f0          POP      {r4-r8,pc}
                  |L29.240|
0000f0  e1530004          CMP      r3,r4                 ;1349
0000f4  c3a02008          MOVGT    r2,#8                 ;1350
0000f8  d3a0200c          MOVLE    r2,#0xc               ;1352
0000fc  eaffffd5          B        |L29.88|
                  |L29.256|
000100  e041c000          SUB      r12,r1,r0             ;1358
000104  e1a0c88c          LSL      r12,r12,#17           ;1358
000108  e18cc081          ORR      r12,r12,r1,LSL #1     ;1358
00010c  e0601081          RSB      r1,r0,r1,LSL #1       ;1359
000110  e1520005          CMP      r2,r5                 ;1361
000114  e1800801          ORR      r0,r0,r1,LSL #16      ;1359
000118  da000003          BLE      |L29.300|
00011c  e1530004          CMP      r3,r4                 ;1362
000120  d3a02006          MOVLE    r2,#6                 ;1365
000124  c3a02002          MOVGT    r2,#2                 ;1363
000128  eaffffca          B        |L29.88|
                  |L29.300|
00012c  e1530004          CMP      r3,r4                 ;1367
000130  c3a0200a          MOVGT    r2,#0xa               ;1368
000134  d3a0200e          MOVLE    r2,#0xe               ;1370
000138  eaffffc6          B        |L29.88|
;;;1408   
                          ENDP

                  |L29.316|
                          DCD      0xb000b000
                  |L29.320|
                          DCD      ||.data||

                          AREA ||i.ge2dLine_DrawStyledLine||, CODE, READONLY, ALIGN=2

                  ge2dLine_DrawStyledLine PROC
;;;1420     */
;;;1421   void ge2dLine_DrawStyledLine(int x1, int y1, int x2, int y2, int style, int fgcolor, int bkcolor, int draw_mode)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1422   {
000004  e1a05000          MOV      r5,r0
000008  e1a04001          MOV      r4,r1
00000c  e28d0020          ADD      r0,sp,#0x20
000010  e8901180          LDM      r0,{r7,r8,r12}
;;;1423       int abs_X, abs_Y, min, max;
;;;1424       UINT32 step_constant, initial_error, direction_code;
;;;1425       UINT32 cmd32, dest_pitch, dest_start;
;;;1426       UINT32 temp32, line_control_code;
;;;1427   
;;;1428       abs_X = ABS(x2-x1);
000014  e0421005          SUB      r1,r2,r5
000018  e3510000          CMP      r1,#0
00001c  d0451002          SUBLE    r1,r5,r2
;;;1429       abs_Y = ABS(y2-y1);
000020  e0430004          SUB      r0,r3,r4
000024  e3500000          CMP      r0,#0
000028  e59da02c          LDR      r10,[sp,#0x2c]        ;1422
00002c  d0440003          SUBLE    r0,r4,r3
;;;1430       if (abs_X > abs_Y) { // X major
000030  e1510000          CMP      r1,r0
000034  da00003a          BLE      |L30.292|
;;;1431           max = abs_X;
;;;1432           min = abs_Y;
;;;1433   
;;;1434           step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
000038  e0406001          SUB      r6,r0,r1
00003c  e1a06886          LSL      r6,r6,#17
000040  e1866080          ORR      r6,r6,r0,LSL #1
;;;1435           initial_error = (((UINT32)(2*min-max)) << 16) | (UINT32)(max);
000044  e0610080          RSB      r0,r1,r0,LSL #1
;;;1436   
;;;1437           if (x2 > x1) { // +X direction
000048  e1520005          CMP      r2,r5
00004c  e1810800          ORR      r0,r1,r0,LSL #16      ;1435
000050  da00002f          BLE      |L30.276|
;;;1438               if (y2 > y1) // +Y direction
000054  e1530004          CMP      r3,r4
;;;1439                   direction_code = XpYpXl;
;;;1440               else // -Y direction
;;;1441                   direction_code = XpYmXl;
000058  d3a02004          MOVLE    r2,#4
00005c  c3a02000          MOVGT    r2,#0                 ;1439
                  |L30.96|
;;;1442           } else { // -X direction
;;;1443               if (y2 > y1) // +Y direction
;;;1444                   direction_code = XmYpXl;
;;;1445               else // -Y direction
;;;1446                   direction_code = XmYmXl;
;;;1447           }
;;;1448       } else { // Y major
;;;1449           max = abs_Y;
;;;1450           min = abs_X;
;;;1451   
;;;1452           step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
;;;1453           initial_error = (((UINT32)(2*min-max)) << 16) | (UINT32)(max);
;;;1454   
;;;1455           if (x2 > x1) { // +X direction
;;;1456               if (y2 > y1) // +Y direction
;;;1457                   direction_code = XpYpYl;
;;;1458               else // -Y direction
;;;1459                   direction_code = XpYmYl;
;;;1460           } else { // -X direction
;;;1461               if (y2 > y1) // +Y direction
;;;1462                   direction_code = XmYpYl;
;;;1463               else // -Y direction
;;;1464                   direction_code = XmYmYl;
;;;1465           }
;;;1466       }
;;;1467   
;;;1468       outpw(REG_GE2D_BETSC, step_constant);
000060  e59f90f8          LDR      r9,|L30.352|
000064  e5896018          STR      r6,[r9,#0x18]
;;;1469       outpw(REG_GE2D_BIEPC, initial_error);
000068  e589001c          STR      r0,[r9,#0x1c]
;;;1470   
;;;1471       cmd32 = 0x009b0000 | direction_code; // styled line
;;;1472       if (draw_mode==MODE_TRANSPARENT) {
00006c  e35a0001          CMP      r10,#1
000070  e382689b          ORR      r6,r2,#0x9b0000       ;1471
;;;1473           cmd32 |= 0x00008000; // default is MODE_OPAQUE
000074  03866902          ORREQ    r6,r6,#0x8000
;;;1474       }
;;;1475       outpw(REG_GE2D_CTL, cmd32);
000078  e5896020          STR      r6,[r9,#0x20]
;;;1476   
;;;1477       outpw(REG_GE2D_BGCOLR, make_color(bkcolor));
00007c  e1a0000c          MOV      r0,r12
000080  ebfffffe          BL       make_color
000084  e5890024          STR      r0,[r9,#0x24]
;;;1478       outpw(REG_GE2D_FGCOLR, make_color(fgcolor));
000088  e1a00008          MOV      r0,r8
00008c  ebfffffe          BL       make_color
000090  e5890028          STR      r0,[r9,#0x28]
;;;1479   
;;;1480       dest_pitch = GFX_WIDTH << 16; // pitch in pixel
000094  e59f10c8          LDR      r1,|L30.356|
000098  e1d100bc          LDRH     r0,[r1,#0xc]  ; GFX_WIDTH
00009c  e1a00800          LSL      r0,r0,#16
;;;1481       outpw(REG_GE2D_SDPITCH, dest_pitch);
0000a0  e5890038          STR      r0,[r9,#0x38]
;;;1482   
;;;1483       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);
0000a4  e5910020          LDR      r0,[r1,#0x20]  ; GFX_START_ADDR
0000a8  e5890034          STR      r0,[r9,#0x34]
;;;1484   
;;;1485       dest_start = y1 << 16 | x1;
0000ac  e1850804          ORR      r0,r5,r4,LSL #16
;;;1486       outpw(REG_GE2D_DSTSPA, dest_start);
0000b0  e5890040          STR      r0,[r9,#0x40]
;;;1487   
;;;1488       if (_ClipEnable) {
0000b4  e5d10002          LDRB     r0,[r1,#2]  ; _ClipEnable
0000b8  e3500000          CMP      r0,#0
0000bc  0a000008          BEQ      |L30.228|
;;;1489           cmd32 |= 0x00000200;
;;;1490           if (_OutsideClip) {
0000c0  e5d12003          LDRB     r2,[r1,#3]  ; _OutsideClip
0000c4  e3860c02          ORR      r0,r6,#0x200          ;1489
0000c8  e3520000          CMP      r2,#0
;;;1491               cmd32 |= 0x00000100;
0000cc  13800c01          ORRNE    r0,r0,#0x100
;;;1492           }
;;;1493           outpw(REG_GE2D_CTL, cmd32);
0000d0  e5890020          STR      r0,[r9,#0x20]
;;;1494           outpw(REG_GE2D_CLPBTL, _ClipTL);
0000d4  e59100ec          LDR      r0,[r1,#0xec]  ; _ClipTL
0000d8  e5890048          STR      r0,[r9,#0x48]
;;;1495           outpw(REG_GE2D_CLPBBR, _ClipBR);
0000dc  e59100f0          LDR      r0,[r1,#0xf0]  ; _ClipBR
0000e0  e589004c          STR      r0,[r9,#0x4c]
                  |L30.228|
;;;1496       }
;;;1497   
;;;1498       line_control_code = style;
;;;1499       temp32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000e4  e599005c          LDR      r0,[r9,#0x5c]
0000e8  e1a00800          LSL      r0,r0,#16
0000ec  e1a00820          LSR      r0,r0,#16
;;;1500       temp32 = (line_control_code << 16) | temp32;
0000f0  e1800807          ORR      r0,r0,r7,LSL #16
;;;1501   
;;;1502       outpw(REG_GE2D_MISCTL, temp32); // address caculation
0000f4  e589005c          STR      r0,[r9,#0x5c]
;;;1503   
;;;1504       outpw(REG_GE2D_TRG, 1);
0000f8  e3a01001          MOV      r1,#1
0000fc  e5891000          STR      r1,[r9,#0]
                  |L30.256|
;;;1505   
;;;1506       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000100  e5990010          LDR      r0,[r9,#0x10]
000104  e3100001          TST      r0,#1
;;;1507   
;;;1508       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000108  15891010          STRNE    r1,[r9,#0x10]
00010c  0afffffb          BEQ      |L30.256|
;;;1509   }
000110  e8bd87f0          POP      {r4-r10,pc}
                  |L30.276|
000114  e1530004          CMP      r3,r4                 ;1443
000118  c3a02008          MOVGT    r2,#8                 ;1444
00011c  d3a0200c          MOVLE    r2,#0xc               ;1446
000120  eaffffce          B        |L30.96|
                  |L30.292|
000124  e0416000          SUB      r6,r1,r0              ;1452
000128  e1a06886          LSL      r6,r6,#17             ;1452
00012c  e1866081          ORR      r6,r6,r1,LSL #1       ;1452
000130  e0601081          RSB      r1,r0,r1,LSL #1       ;1453
000134  e1520005          CMP      r2,r5                 ;1455
000138  e1800801          ORR      r0,r0,r1,LSL #16      ;1453
00013c  da000003          BLE      |L30.336|
000140  e1530004          CMP      r3,r4                 ;1456
000144  d3a02006          MOVLE    r2,#6                 ;1459
000148  c3a02002          MOVGT    r2,#2                 ;1457
00014c  eaffffc3          B        |L30.96|
                  |L30.336|
000150  e1530004          CMP      r3,r4                 ;1461
000154  c3a0200a          MOVGT    r2,#0xa               ;1462
000158  d3a0200e          MOVLE    r2,#0xe               ;1464
00015c  eaffffbf          B        |L30.96|
;;;1510   
                          ENDP

                  |L30.352|
                          DCD      0xb000b000
                  |L30.356|
                          DCD      ||.data||

                          AREA ||i.ge2dReset||, CODE, READONLY, ALIGN=2

                  ge2dReset PROC
;;;780      */
;;;781    void ge2dReset(void)
000000  e59f001c          LDR      r0,|L31.36|
;;;782    {
;;;783        outpw(REG_GE2D_MISCTL, 0x40); // FIFO reset
000004  e3a01040          MOV      r1,#0x40
000008  e580105c          STR      r1,[r0,#0x5c]
;;;784        outpw(REG_GE2D_MISCTL, 0x00);
00000c  e3a01000          MOV      r1,#0
000010  e580105c          STR      r1,[r0,#0x5c]
;;;785    
;;;786        outpw(REG_GE2D_MISCTL, 0x80); // Engine reset
000014  e3a02080          MOV      r2,#0x80
000018  e580205c          STR      r2,[r0,#0x5c]
;;;787        outpw(REG_GE2D_MISCTL, 0x00);
00001c  e580105c          STR      r1,[r0,#0x5c]
;;;788    
;;;789    }
000020  e12fff1e          BX       lr
;;;790    
                          ENDP

                  |L31.36|
                          DCD      0xb000b000

                          AREA ||i.ge2dResetFIFO||, CODE, READONLY, ALIGN=2

                  ge2dResetFIFO PROC
;;;795      */
;;;796    void ge2dResetFIFO(void)
000000  e59f1014          LDR      r1,|L32.28|
;;;797    {
;;;798        UINT32 temp32;
;;;799    
;;;800        temp32 = inpw(REG_GE2D_MISCTL);
000004  e591005c          LDR      r0,[r1,#0x5c]
;;;801        temp32 |= 0x00000040;
000008  e3800040          ORR      r0,r0,#0x40
;;;802        outpw(REG_GE2D_MISCTL, temp32);
00000c  e581005c          STR      r0,[r1,#0x5c]
;;;803        temp32 &= 0xffffffbf;
000010  e3c00040          BIC      r0,r0,#0x40
;;;804        outpw(REG_GE2D_MISCTL, temp32);
000014  e581005c          STR      r0,[r1,#0x5c]
;;;805    }
000018  e12fff1e          BX       lr
;;;806    
                          ENDP

                  |L32.28|
                          DCD      0xb000b000

                          AREA ||i.ge2dRotation||, CODE, READONLY, ALIGN=2

                  ge2dRotation PROC
;;;2154     */
;;;2155   void ge2dRotation(int srcx, int srcy, int destx, int desty, int width, int height, int ctl)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2156   {
000004  e24dd014          SUB      sp,sp,#0x14
000008  e59d4048          LDR      r4,[sp,#0x48]
00000c  e59d704c          LDR      r7,[sp,#0x4c]
;;;2157       UINT32 cmd32, dest_start, src_start, dimension, pitch;
;;;2158       void *tmpscreen,*orig_dest_start00;
;;;2159   
;;;2160       tmpscreen = (void *)malloc(width*height*GFX_BPP/8);
000010  e59f60fc          LDR      r6,|L33.276|
000014  e0050794          MUL      r5,r4,r7
000018  e5960008          LDR      r0,[r6,#8]  ; GFX_BPP
00001c  e1a0b003          MOV      r11,r3                ;2156
000020  e0000095          MUL      r0,r5,r0
000024  e1a0a002          MOV      r10,r2                ;2156
000028  e1a001a0          LSR      r0,r0,#3
00002c  ebfffffe          BL       malloc
000030  e1a08000          MOV      r8,r0
;;;2161   
;;;2162   #ifdef DEBUG
;;;2163       sysprintf("rotation_image()\n");
;;;2164       sysprintf("(%d,%d)=>(%d,%d)\n", srcx, srcy, destx, desty);
;;;2165       sysprintf("width=%d height=%d\n", width, height);
;;;2166   #endif
;;;2167   
;;;2168       memset(tmpscreen,0,width*height*GFX_BPP/8);
000034  e5960008          LDR      r0,[r6,#8]  ; GFX_BPP
000038  e0000095          MUL      r0,r5,r0
00003c  e1a011a0          LSR      r1,r0,#3
000040  e1a00008          MOV      r0,r8
000044  ebfffffe          BL       __aeabi_memclr
;;;2169   
;;;2170       orig_dest_start00 = (void *)inpw(REG_GE2D_XYDORG);
000048  e59f50c8          LDR      r5,|L33.280|
00004c  e5959034          LDR      r9,[r5,#0x34]
;;;2171       outpw(REG_GE2D_XYDORG, (int)tmpscreen);   //captured photo to another position
000050  e5858034          STR      r8,[r5,#0x34]
;;;2172       outpw(REG_GE2D_XYSORG, (int)GFX_START_ADDR);
000054  e5960020          LDR      r0,[r6,#0x20]  ; GFX_START_ADDR
000058  e5850004          STR      r0,[r5,#4]
;;;2173   
;;;2174       ge2dBitblt_SourceToDestination(srcx,srcy,0,0,width,height,GFX_WIDTH,width);
00005c  e596000c          LDR      r0,[r6,#0xc]  ; GFX_WIDTH
000060  e3a03000          MOV      r3,#0
000064  e58d0008          STR      r0,[sp,#8]
000068  e88d0090          STM      sp,{r4,r7}
00006c  e59d0014          LDR      r0,[sp,#0x14]
000070  e59d1018          LDR      r1,[sp,#0x18]
000074  e1a02003          MOV      r2,r3
000078  e58d400c          STR      r4,[sp,#0xc]
00007c  ebfffffe          BL       ge2dBitblt_SourceToDestination
;;;2175   
;;;2176       src_start = dest_start = dimension = cmd32 = pitch = 0;
000080  e3a01000          MOV      r1,#0
;;;2177   
;;;2178       outpw(REG_GE2D_XYDORG, (int)orig_dest_start00);
000084  e5859034          STR      r9,[r5,#0x34]
;;;2179       outpw(REG_GE2D_XYSORG, (int)tmpscreen);
000088  e5858004          STR      r8,[r5,#4]
;;;2180   
;;;2181       pitch = GFX_WIDTH << 16 | width;
00008c  e1d600bc          LDRH     r0,[r6,#0xc]  ; GFX_WIDTH
000090  e1840800          ORR      r0,r4,r0,LSL #16
;;;2182       outpw(REG_GE2D_SDPITCH, pitch);
000094  e5850038          STR      r0,[r5,#0x38]
;;;2183   
;;;2184       src_start = 0 << 16 | 0;  // captured photo at (0,0) position
;;;2185       outpw(REG_GE2D_SRCSPA, src_start);
000098  e585103c          STR      r1,[r5,#0x3c]
;;;2186   
;;;2187       dest_start = desty << 16 | destx;
00009c  e18a080b          ORR      r0,r10,r11,LSL #16
;;;2188       outpw(REG_GE2D_DSTSPA, dest_start);
0000a0  e5850040          STR      r0,[r5,#0x40]
;;;2189   
;;;2190       dimension = height << 16 | width;
0000a4  e1840807          ORR      r0,r4,r7,LSL #16
;;;2191       outpw(REG_GE2D_RTGLSZ, dimension);
0000a8  e5850044          STR      r0,[r5,#0x44]
;;;2192   
;;;2193       cmd32 = 0xcc030000 | (ctl << 1);
0000ac  e59d0050          LDR      r0,[sp,#0x50]
0000b0  e59f1064          LDR      r1,|L33.284|
0000b4  e1810080          ORR      r0,r1,r0,LSL #1
;;;2194   
;;;2195       if (_ClipEnable) {
0000b8  e5d61002          LDRB     r1,[r6,#2]  ; _ClipEnable
0000bc  e3510000          CMP      r1,#0
0000c0  0a000008          BEQ      |L33.232|
;;;2196           cmd32 |= 0x00000200;
;;;2197           if (_OutsideClip) {
0000c4  e5d61003          LDRB     r1,[r6,#3]  ; _OutsideClip
0000c8  e3800c02          ORR      r0,r0,#0x200          ;2196
0000cc  e3510000          CMP      r1,#0
;;;2198               cmd32 |= 0x00000100;
0000d0  13800c01          ORRNE    r0,r0,#0x100
;;;2199           }
;;;2200           outpw(REG_GE2D_CTL, cmd32);
0000d4  e5850020          STR      r0,[r5,#0x20]
;;;2201           outpw(REG_GE2D_CLPBTL, _ClipTL);
0000d8  e59610ec          LDR      r1,[r6,#0xec]  ; _ClipTL
0000dc  e5851048          STR      r1,[r5,#0x48]
;;;2202           outpw(REG_GE2D_CLPBBR, _ClipBR);
0000e0  e59610f0          LDR      r1,[r6,#0xf0]  ; _ClipBR
0000e4  e585104c          STR      r1,[r5,#0x4c]
                  |L33.232|
;;;2203       }
;;;2204   
;;;2205       /* set rotation reference point xy register, then nothing happened */
;;;2206       outpw(REG_GE2D_CTL, cmd32);
0000e8  e5850020          STR      r0,[r5,#0x20]
;;;2207   
;;;2208       outpw(REG_GE2D_TRG, 1);
0000ec  e3a01001          MOV      r1,#1
0000f0  e5851000          STR      r1,[r5,#0]
                  |L33.244|
;;;2209       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000f4  e5950010          LDR      r0,[r5,#0x10]
0000f8  e3100001          TST      r0,#1
0000fc  0afffffc          BEQ      |L33.244|
;;;2210       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000100  e5851010          STR      r1,[r5,#0x10]
;;;2211   
;;;2212       free(tmpscreen);
000104  e1a00008          MOV      r0,r8
000108  e28dd024          ADD      sp,sp,#0x24
00010c  e8bd4ff0          POP      {r4-r11,lr}
000110  eafffffe          B        free
;;;2213   }
;;;2214   
                          ENDP

                  |L33.276|
                          DCD      ||.data||
                  |L33.280|
                          DCD      0xb000b000
                  |L33.284|
                          DCD      0xcc030000

                          AREA ||i.ge2dSetDestinationOriginStarting||, CODE, READONLY, ALIGN=2

                  ge2dSetDestinationOriginStarting PROC
;;;702      */
;;;703    void ge2dSetDestinationOriginStarting(void *ptr)
000000  e59f1004          LDR      r1,|L34.12|
;;;704    {
;;;705        outpw(REG_GE2D_XYDORG, (int)ptr);
000004  e5810034          STR      r0,[r1,#0x34]
;;;706    }
000008  e12fff1e          BX       lr
;;;707    
                          ENDP

                  |L34.12|
                          DCD      0xb000b000

                          AREA ||i.ge2dSetSourceOriginStarting||, CODE, READONLY, ALIGN=2

                  ge2dSetSourceOriginStarting PROC
;;;692      */
;;;693    void ge2dSetSourceOriginStarting(void *ptr)
000000  e59f1004          LDR      r1,|L35.12|
;;;694    {
;;;695        outpw(REG_GE2D_XYSORG, (int)ptr);
000004  e5810004          STR      r0,[r1,#4]
;;;696    }
000008  e12fff1e          BX       lr
;;;697    
                          ENDP

                  |L35.12|
                          DCD      0xb000b000

                          AREA ||i.ge2dSetWriteMask||, CODE, READONLY, ALIGN=2

                  ge2dSetWriteMask PROC
;;;682      */
;;;683    void ge2dSetWriteMask(int mask)
000000  e92d4010          PUSH     {r4,lr}
;;;684    {
;;;685        outpw(REG_GE2D_WRPLNMSK, make_color(mask));
000004  ebfffffe          BL       make_color
000008  e59f1004          LDR      r1,|L36.20|
00000c  e5810058          STR      r0,[r1,#0x58]
;;;686    }
000010  e8bd8010          POP      {r4,pc}
;;;687    
                          ENDP

                  |L36.20|
                          DCD      0xb000b000

                          AREA ||i.ge2dSpriteBlt_Screen||, CODE, READONLY, ALIGN=2

                  ge2dSpriteBlt_Screen PROC
;;;2223     */
;;;2224   void ge2dSpriteBlt_Screen(int destx, int desty, int sprite_width, int sprite_height, void *buf)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2225   {
;;;2226       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;2227       UINT32 data32, alpha;
;;;2228   
;;;2229   #ifdef DEBUG
;;;2230       sysprintf("screen_sprite_blt():\n");
;;;2231       sysprintf("x=%d y=%d width=%d height=%d\n", destx, desty, sprite_width, sprite_height);
;;;2232   #endif
;;;2233   
;;;2234       cmd32 = 0xcc430000;
000004  e59fc0dc          LDR      r12,|L37.232|
;;;2235   
;;;2236       outpw(REG_GE2D_CTL, cmd32);
000008  e59f50dc          LDR      r5,|L37.236|
00000c  e59d7018          LDR      r7,[sp,#0x18]         ;2234
000010  e585c020          STR      r12,[r5,#0x20]
;;;2237   
;;;2238       pitch = GFX_WIDTH << 16 | sprite_width; // pitch in pixel
000014  e59f60d4          LDR      r6,|L37.240|
000018  e1d640bc          LDRH     r4,[r6,#0xc]  ; GFX_WIDTH
00001c  e1824804          ORR      r4,r2,r4,LSL #16
;;;2239       outpw(REG_GE2D_SDPITCH, pitch);
000020  e5854038          STR      r4,[r5,#0x38]
;;;2240   
;;;2241       src_start = 0; // start from (0,0) of sprite
000024  e3a04000          MOV      r4,#0
;;;2242       outpw(REG_GE2D_SRCSPA, src_start);
000028  e585403c          STR      r4,[r5,#0x3c]
;;;2243   
;;;2244       dest_start = desty << 16 | destx;
00002c  e1800801          ORR      r0,r0,r1,LSL #16
;;;2245       outpw(REG_GE2D_DSTSPA, dest_start);
000030  e5850040          STR      r0,[r5,#0x40]
;;;2246   
;;;2247       dimension = sprite_height << 16 | sprite_width;
000034  e1820803          ORR      r0,r2,r3,LSL #16
;;;2248       outpw(REG_GE2D_RTGLSZ, dimension);
000038  e5850044          STR      r0,[r5,#0x44]
;;;2249   
;;;2250       outpw(REG_GE2D_XYSORG, (UINT32)buf);
00003c  e5857004          STR      r7,[r5,#4]
;;;2251       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);
000040  e5960020          LDR      r0,[r6,#0x20]  ; GFX_START_ADDR
000044  e5850034          STR      r0,[r5,#0x34]
;;;2252   
;;;2253       if (_ClipEnable) {
000048  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
00004c  e3500000          CMP      r0,#0
000050  0a000008          BEQ      |L37.120|
;;;2254           cmd32 |= 0x00000200;
;;;2255           if (_OutsideClip) {
000054  e5d60003          LDRB     r0,[r6,#3]  ; _OutsideClip
000058  e28ccc02          ADD      r12,r12,#0x200        ;2254
00005c  e3500000          CMP      r0,#0
;;;2256               cmd32 |= 0x00000100;
000060  128ccc01          ADDNE    r12,r12,#0x100
;;;2257           }
;;;2258           outpw(REG_GE2D_CTL, cmd32);
000064  e585c020          STR      r12,[r5,#0x20]
;;;2259           outpw(REG_GE2D_CLPBTL, _ClipTL);
000068  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
00006c  e5850048          STR      r0,[r5,#0x48]
;;;2260           outpw(REG_GE2D_CLPBBR, _ClipBR);
000070  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000074  e585004c          STR      r0,[r5,#0x4c]
                  |L37.120|
;;;2261       }
;;;2262   
;;;2263       //
;;;2264       // default source color transparent is ON
;;;2265       //
;;;2266   
;;;2267       cmd32 |= 0x00008000; // color transparency
000078  e38c4902          ORR      r4,r12,#0x8000
;;;2268       outpw(REG_GE2D_CTL, cmd32);
00007c  e5854020          STR      r4,[r5,#0x20]
;;;2269       outpw(REG_GE2D_TRNSCOLR, make_color(COLOR_KEY));
000080  e3a004ff          MOV      r0,#0xff000000
000084  ebfffffe          BL       make_color
000088  e585002c          STR      r0,[r5,#0x2c]
;;;2270       outpw(REG_GE2D_TCMSK, 0xffffff);
00008c  e3e004ff          MVN      r0,#0xff000000
000090  e5850030          STR      r0,[r5,#0x30]
;;;2271   
;;;2272       if (_EnableAlpha) {
000094  e5d60001          LDRB     r0,[r6,#1]  ; _EnableAlpha
000098  e3500000          CMP      r0,#0
00009c  0a000009          BEQ      |L37.200|
;;;2273           cmd32 |= 0x00200000;
0000a0  e3844602          ORR      r4,r4,#0x200000
;;;2274           outpw(REG_GE2D_CTL, cmd32);
0000a4  e5854020          STR      r4,[r5,#0x20]
;;;2275   
;;;2276           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000a8  e595005c          LDR      r0,[r5,#0x5c]
;;;2277           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
0000ac  e1d61eb8          LDRH     r1,[r6,#0xe8]  ; _AlphaKd
0000b0  e5d620e4          LDRB     r2,[r6,#0xe4]  ; _AlphaKs
0000b4  e1a00800          LSL      r0,r0,#16             ;2276
0000b8  e1a00820          LSR      r0,r0,#16             ;2276
0000bc  e1811402          ORR      r1,r1,r2,LSL #8
;;;2278           data32 |= (alpha << 16);
0000c0  e1800801          ORR      r0,r0,r1,LSL #16
;;;2279   
;;;2280           outpw(REG_GE2D_MISCTL, data32);
0000c4  e585005c          STR      r0,[r5,#0x5c]
                  |L37.200|
;;;2281       }
;;;2282   
;;;2283       outpw(REG_GE2D_CTL, cmd32);
0000c8  e5854020          STR      r4,[r5,#0x20]
;;;2284   
;;;2285       outpw(REG_GE2D_TRG, 1);
0000cc  e3a01001          MOV      r1,#1
0000d0  e5851000          STR      r1,[r5,#0]
                  |L37.212|
;;;2286       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000d4  e5950010          LDR      r0,[r5,#0x10]
0000d8  e3100001          TST      r0,#1
;;;2287       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000dc  15851010          STRNE    r1,[r5,#0x10]
0000e0  0afffffb          BEQ      |L37.212|
;;;2288   }
0000e4  e8bd81f0          POP      {r4-r8,pc}
;;;2289   
                          ENDP

                  |L37.232|
                          DCD      0xcc430000
                  |L37.236|
                          DCD      0xb000b000
                  |L37.240|
                          DCD      ||.data||

                          AREA ||i.ge2dSpriteBlt_ScreenRop||, CODE, READONLY, ALIGN=2

                  ge2dSpriteBlt_ScreenRop PROC
;;;2378     */
;;;2379   void ge2dSpriteBlt_ScreenRop(int x, int y, int sprite_width, int sprite_height, void *buf, int rop)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2380   {
;;;2381       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;2382       UINT32 data32, alpha;
;;;2383   
;;;2384   #ifdef DEBUG
;;;2385       sysprintf("screen_sprite_rop_blt():\n");
;;;2386       sysprintf("x=%d y=%d width=%d height=%d\n", x, y, sprite_width, sprite_height);
;;;2387       sysprintf("rop=0x%x\n", rop);
;;;2388   #endif
;;;2389   
;;;2390       cmd32 = 0x00430000 | (rop << 24);
;;;2391   
;;;2392       if (_PatternType==TYPE_MONO) {
000004  e59f7100          LDR      r7,|L38.268|
000008  e59d601c          LDR      r6,[sp,#0x1c]         ;2390
00000c  e59740f4          LDR      r4,[r7,#0xf4]  ; _PatternType
000010  e3a0c843          MOV      r12,#0x430000         ;2390
;;;2393           cmd32 |= 0x00000010; // default is TYPE_COLOR
;;;2394       }
;;;2395   
;;;2396       outpw(REG_GE2D_CTL, cmd32);
000014  e59f50f4          LDR      r5,|L38.272|
000018  e3540000          CMP      r4,#0                 ;2392
00001c  e18ccc06          ORR      r12,r12,r6,LSL #24    ;2390
000020  e59d8018          LDR      r8,[sp,#0x18]         ;2392
000024  038cc010          ORREQ    r12,r12,#0x10         ;2393
000028  e585c020          STR      r12,[r5,#0x20]
;;;2397   
;;;2398       pitch = GFX_WIDTH << 16 | sprite_width; // pitch in pixel
00002c  e1d740bc          LDRH     r4,[r7,#0xc]  ; GFX_WIDTH
000030  e1824804          ORR      r4,r2,r4,LSL #16
;;;2399       outpw(REG_GE2D_SDPITCH, pitch);
000034  e5854038          STR      r4,[r5,#0x38]
;;;2400   
;;;2401       src_start = 0; // start from (0,0) of sprite
000038  e3a04000          MOV      r4,#0
;;;2402       outpw(REG_GE2D_SRCSPA, src_start);
00003c  e585403c          STR      r4,[r5,#0x3c]
;;;2403   
;;;2404       dest_start = y << 16 | x;
000040  e1800801          ORR      r0,r0,r1,LSL #16
;;;2405       outpw(REG_GE2D_DSTSPA, dest_start);
000044  e5850040          STR      r0,[r5,#0x40]
;;;2406   
;;;2407       dimension = sprite_height << 16 | sprite_width;
000048  e1820803          ORR      r0,r2,r3,LSL #16
;;;2408       outpw(REG_GE2D_RTGLSZ, dimension);
00004c  e5850044          STR      r0,[r5,#0x44]
;;;2409   
;;;2410       outpw(REG_GE2D_XYSORG, (UINT32)buf);
000050  e5858004          STR      r8,[r5,#4]
;;;2411       outpw(REG_GE2D_XYDORG,(int) GFX_START_ADDR);  //smf
000054  e5970020          LDR      r0,[r7,#0x20]  ; GFX_START_ADDR
000058  e5850034          STR      r0,[r5,#0x34]
;;;2412   
;;;2413       if (_ClipEnable) {
00005c  e5d70002          LDRB     r0,[r7,#2]  ; _ClipEnable
000060  e3500000          CMP      r0,#0
000064  0a000008          BEQ      |L38.140|
;;;2414           cmd32 |= 0x00000200;
;;;2415           if (_OutsideClip) {
000068  e5d70003          LDRB     r0,[r7,#3]  ; _OutsideClip
00006c  e38ccc02          ORR      r12,r12,#0x200        ;2414
000070  e3500000          CMP      r0,#0
;;;2416               cmd32 |= 0x00000100;
000074  138ccc01          ORRNE    r12,r12,#0x100
;;;2417           }
;;;2418           outpw(REG_GE2D_CTL, cmd32);
000078  e585c020          STR      r12,[r5,#0x20]
;;;2419           outpw(REG_GE2D_CLPBTL, _ClipTL);
00007c  e59700ec          LDR      r0,[r7,#0xec]  ; _ClipTL
000080  e5850048          STR      r0,[r5,#0x48]
;;;2420           outpw(REG_GE2D_CLPBBR, _ClipBR);
000084  e59700f0          LDR      r0,[r7,#0xf0]  ; _ClipBR
000088  e585004c          STR      r0,[r5,#0x4c]
                  |L38.140|
;;;2421       }
;;;2422   
;;;2423       //
;;;2424       // default source color transparent is ON
;;;2425       //
;;;2426       cmd32 |= 0x00008000; // color transparency
00008c  e38c4902          ORR      r4,r12,#0x8000
;;;2427       outpw(REG_GE2D_CTL, cmd32);
000090  e5854020          STR      r4,[r5,#0x20]
;;;2428       outpw(REG_GE2D_TRNSCOLR, make_color(COLOR_KEY));
000094  e3a004ff          MOV      r0,#0xff000000
000098  ebfffffe          BL       make_color
00009c  e585002c          STR      r0,[r5,#0x2c]
;;;2429       outpw(REG_GE2D_TCMSK, 0xffffff);
0000a0  e3e004ff          MVN      r0,#0xff000000
0000a4  e5850030          STR      r0,[r5,#0x30]
;;;2430   
;;;2431       if (_EnableAlpha) {
0000a8  e5d70001          LDRB     r0,[r7,#1]  ; _EnableAlpha
0000ac  e3500000          CMP      r0,#0
0000b0  0a000009          BEQ      |L38.220|
;;;2432           cmd32 |= 0x00200000;
0000b4  e3844602          ORR      r4,r4,#0x200000
;;;2433           outpw(REG_GE2D_CTL, cmd32);
0000b8  e5854020          STR      r4,[r5,#0x20]
;;;2434   
;;;2435           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000bc  e595005c          LDR      r0,[r5,#0x5c]
;;;2436           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
0000c0  e1d71eb8          LDRH     r1,[r7,#0xe8]  ; _AlphaKd
0000c4  e5d720e4          LDRB     r2,[r7,#0xe4]  ; _AlphaKs
0000c8  e1a00800          LSL      r0,r0,#16             ;2435
0000cc  e1a00820          LSR      r0,r0,#16             ;2435
0000d0  e1811402          ORR      r1,r1,r2,LSL #8
;;;2437           data32 |= (alpha << 16);
0000d4  e1800801          ORR      r0,r0,r1,LSL #16
;;;2438   
;;;2439           outpw(REG_GE2D_MISCTL, data32);
0000d8  e585005c          STR      r0,[r5,#0x5c]
                  |L38.220|
;;;2440       }
;;;2441   
;;;2442       if ((rop==0x00) || (rop==0xff)) {
0000dc  e3560000          CMP      r6,#0
0000e0  135600ff          CMPNE    r6,#0xff
;;;2443           cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
0000e4  03c40a0f          BICEQ    r0,r4,#0xf000
0000e8  03800a09          ORREQ    r0,r0,#0x9000
;;;2444           outpw(REG_GE2D_CTL, cmd32);
0000ec  05850020          STREQ    r0,[r5,#0x20]
;;;2445       }
;;;2446   
;;;2447       outpw(REG_GE2D_TRG, 1);
0000f0  e3a01001          MOV      r1,#1
0000f4  e5851000          STR      r1,[r5,#0]
                  |L38.248|
;;;2448       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000f8  e5950010          LDR      r0,[r5,#0x10]
0000fc  e3100001          TST      r0,#1
;;;2449       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
000100  15851010          STRNE    r1,[r5,#0x10]
000104  0afffffb          BEQ      |L38.248|
;;;2450   }
000108  e8bd81f0          POP      {r4-r8,pc}
;;;2451   
                          ENDP

                  |L38.268|
                          DCD      ||.data||
                  |L38.272|
                          DCD      0xb000b000

                          AREA ||i.ge2dSpriteBltx_Screen||, CODE, READONLY, ALIGN=2

                  ge2dSpriteBltx_Screen PROC
;;;2303     */
;;;2304   void ge2dSpriteBltx_Screen(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2305   {
;;;2306       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;2307       UINT32 data32, alpha;
;;;2308   
;;;2309   #ifdef DEBUG
;;;2310       sysprintf("screen_sprite_bltx(): (%d,%d)\n", x, y);
;;;2311       sysprintf("sprite width=%d height=%d\n", sprite_width, sprite_height);
;;;2312       sysprintf("x=%d y=%d width=%d height=%d\n", sprite_sx, sprite_sy, width, height);
;;;2313   #endif
;;;2314   
;;;2315       cmd32 = 0xcc430000;
000004  e59fc0e4          LDR      r12,|L39.240|
;;;2316   
;;;2317       outpw(REG_GE2D_CTL, cmd32);
000008  e59f40e4          LDR      r4,|L39.244|
00000c  e59d5028          LDR      r5,[sp,#0x28]         ;2315
000010  e59d7024          LDR      r7,[sp,#0x24]         ;2315
000014  e59d8020          LDR      r8,[sp,#0x20]         ;2315
000018  e59d9030          LDR      r9,[sp,#0x30]         ;2315
00001c  e584c020          STR      r12,[r4,#0x20]
;;;2318   
;;;2319       pitch = GFX_WIDTH << 16 | sprite_width; // pitch in pixel
000020  e59f60d0          LDR      r6,|L39.248|
000024  e1d6a0bc          LDRH     r10,[r6,#0xc]  ; GFX_WIDTH
000028  e185580a          ORR      r5,r5,r10,LSL #16
;;;2320       outpw(REG_GE2D_SDPITCH, pitch);
00002c  e5845038          STR      r5,[r4,#0x38]
;;;2321   
;;;2322       outpw(REG_GE2D_XYSORG, (UINT32)buf);
000030  e5849004          STR      r9,[r4,#4]
;;;2323       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);
000034  e5965020          LDR      r5,[r6,#0x20]  ; GFX_START_ADDR
000038  e5845034          STR      r5,[r4,#0x34]
;;;2324   
;;;2325       src_start = sprite_sy << 16 | sprite_sx;
00003c  e1822803          ORR      r2,r2,r3,LSL #16
;;;2326       outpw(REG_GE2D_SRCSPA, src_start);
000040  e584203c          STR      r2,[r4,#0x3c]
;;;2327   
;;;2328       dest_start = y << 16 | x;
000044  e1800801          ORR      r0,r0,r1,LSL #16
;;;2329       outpw(REG_GE2D_DSTSPA, dest_start);
000048  e5840040          STR      r0,[r4,#0x40]
;;;2330   
;;;2331       dimension = height << 16 | width;
00004c  e1880807          ORR      r0,r8,r7,LSL #16
;;;2332       outpw(REG_GE2D_RTGLSZ, dimension);
000050  e5840044          STR      r0,[r4,#0x44]
;;;2333   
;;;2334       if (_ClipEnable) {
000054  e5d60002          LDRB     r0,[r6,#2]  ; _ClipEnable
000058  e3500000          CMP      r0,#0
00005c  0a000008          BEQ      |L39.132|
;;;2335           cmd32 |= 0x00000200;
;;;2336           if (_OutsideClip) {
000060  e5d60003          LDRB     r0,[r6,#3]  ; _OutsideClip
000064  e28ccc02          ADD      r12,r12,#0x200        ;2335
000068  e3500000          CMP      r0,#0
;;;2337               cmd32 |= 0x00000100;
00006c  128ccc01          ADDNE    r12,r12,#0x100
;;;2338           }
;;;2339           outpw(REG_GE2D_CTL, cmd32);
000070  e584c020          STR      r12,[r4,#0x20]
;;;2340           outpw(REG_GE2D_CLPBTL, _ClipTL);
000074  e59600ec          LDR      r0,[r6,#0xec]  ; _ClipTL
000078  e5840048          STR      r0,[r4,#0x48]
;;;2341           outpw(REG_GE2D_CLPBBR, _ClipBR);
00007c  e59600f0          LDR      r0,[r6,#0xf0]  ; _ClipBR
000080  e584004c          STR      r0,[r4,#0x4c]
                  |L39.132|
;;;2342       }
;;;2343   
;;;2344       //
;;;2345       // default source color transparent is ON
;;;2346       //
;;;2347       cmd32 |= 0x00008000; // color transparency
000084  e38c5902          ORR      r5,r12,#0x8000
;;;2348       outpw(REG_GE2D_CTL, cmd32);
000088  e5845020          STR      r5,[r4,#0x20]
;;;2349       outpw(REG_GE2D_TRNSCOLR, make_color(COLOR_KEY));
00008c  e3a004ff          MOV      r0,#0xff000000
000090  ebfffffe          BL       make_color
000094  e584002c          STR      r0,[r4,#0x2c]
;;;2350       outpw(REG_GE2D_TCMSK, 0xffffff);
000098  e3e004ff          MVN      r0,#0xff000000
00009c  e5840030          STR      r0,[r4,#0x30]
;;;2351   
;;;2352       if (_EnableAlpha) {
0000a0  e5d60001          LDRB     r0,[r6,#1]  ; _EnableAlpha
0000a4  e3500000          CMP      r0,#0
0000a8  0a000009          BEQ      |L39.212|
;;;2353           cmd32 |= 0x00200000;
0000ac  e3850602          ORR      r0,r5,#0x200000
;;;2354           outpw(REG_GE2D_CTL, cmd32);
0000b0  e5840020          STR      r0,[r4,#0x20]
;;;2355   
;;;2356           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000b4  e594005c          LDR      r0,[r4,#0x5c]
;;;2357           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
0000b8  e1d61eb8          LDRH     r1,[r6,#0xe8]  ; _AlphaKd
0000bc  e5d620e4          LDRB     r2,[r6,#0xe4]  ; _AlphaKs
0000c0  e1a00800          LSL      r0,r0,#16             ;2356
0000c4  e1a00820          LSR      r0,r0,#16             ;2356
0000c8  e1811402          ORR      r1,r1,r2,LSL #8
;;;2358           data32 |= (alpha << 16);
0000cc  e1800801          ORR      r0,r0,r1,LSL #16
;;;2359   
;;;2360           outpw(REG_GE2D_MISCTL, data32);
0000d0  e584005c          STR      r0,[r4,#0x5c]
                  |L39.212|
;;;2361       }
;;;2362   
;;;2363       outpw(REG_GE2D_TRG, 1);
0000d4  e3a01001          MOV      r1,#1
0000d8  e5841000          STR      r1,[r4,#0]
                  |L39.220|
;;;2364       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
0000dc  e5940010          LDR      r0,[r4,#0x10]
0000e0  e3100001          TST      r0,#1
;;;2365       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
0000e4  15841010          STRNE    r1,[r4,#0x10]
0000e8  0afffffb          BEQ      |L39.220|
;;;2366   }
0000ec  e8bd87f0          POP      {r4-r10,pc}
;;;2367   
                          ENDP

                  |L39.240|
                          DCD      0xcc430000
                  |L39.244|
                          DCD      0xb000b000
                  |L39.248|
                          DCD      ||.data||

                          AREA ||i.ge2dSpriteBltx_ScreenRop||, CODE, READONLY, ALIGN=2

                  ge2dSpriteBltx_ScreenRop PROC
;;;2466     */
;;;2467   void ge2dSpriteBltx_ScreenRop(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf, int rop)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;2468   {
;;;2469       UINT32 cmd32, pitch, dest_start, src_start, dimension;
;;;2470       UINT32 data32, alpha;
;;;2471   
;;;2472   #ifdef DEBUG
;;;2473       sysprintf("screen_sprite_rop_bltx():\n");
;;;2474       sysprintf("x=%d y=%d width=%d height=%d\n", x, y, sprite_width, sprite_height);
;;;2475       sysprintf("rop=0x%x\n", rop);
;;;2476   #endif
;;;2477   
;;;2478       cmd32 = 0x00430000 | (rop << 24);
;;;2479   
;;;2480       if (_PatternType==TYPE_MONO) {
000004  e59f710c          LDR      r7,|L40.280|
000008  e59d603c          LDR      r6,[sp,#0x3c]         ;2478
00000c  e59750f4          LDR      r5,[r7,#0xf4]  ; _PatternType
000010  e3a0c843          MOV      r12,#0x430000         ;2478
000014  e3550000          CMP      r5,#0
;;;2481           cmd32 |= 0x00000010; // default is TYPE_COLOR
;;;2482       }
;;;2483   
;;;2484       outpw(REG_GE2D_CTL, cmd32);
000018  e59f50fc          LDR      r5,|L40.284|
00001c  e18ccc06          ORR      r12,r12,r6,LSL #24    ;2478
000020  e59d4030          LDR      r4,[sp,#0x30]         ;2480
000024  e59d9038          LDR      r9,[sp,#0x38]         ;2480
000028  e59da02c          LDR      r10,[sp,#0x2c]        ;2480
00002c  e59db028          LDR      r11,[sp,#0x28]        ;2480
000030  038cc010          ORREQ    r12,r12,#0x10         ;2481
000034  e585c020          STR      r12,[r5,#0x20]
;;;2485   
;;;2486       pitch = GFX_WIDTH << 16 | sprite_width; // pitch in pixel
000038  e1d780bc          LDRH     r8,[r7,#0xc]  ; GFX_WIDTH
00003c  e1844808          ORR      r4,r4,r8,LSL #16
;;;2487       outpw(REG_GE2D_SDPITCH, pitch);
000040  e5854038          STR      r4,[r5,#0x38]
;;;2488   
;;;2489       src_start = sprite_sy << 16 | sprite_sx;
000044  e1822803          ORR      r2,r2,r3,LSL #16
;;;2490       outpw(REG_GE2D_SRCSPA, src_start);
000048  e585203c          STR      r2,[r5,#0x3c]
;;;2491   
;;;2492       dest_start = y << 16 | x;
00004c  e1800801          ORR      r0,r0,r1,LSL #16
;;;2493       outpw(REG_GE2D_DSTSPA, dest_start);
000050  e5850040          STR      r0,[r5,#0x40]
;;;2494   
;;;2495       dimension = height << 16 | width;
000054  e18b080a          ORR      r0,r11,r10,LSL #16
;;;2496       outpw(REG_GE2D_RTGLSZ, dimension);
000058  e5850044          STR      r0,[r5,#0x44]
;;;2497   
;;;2498       outpw(REG_GE2D_XYSORG, (UINT32)buf);
00005c  e5859004          STR      r9,[r5,#4]
;;;2499       outpw(REG_GE2D_XYDORG, (int)GFX_START_ADDR);  //smf
000060  e5970020          LDR      r0,[r7,#0x20]  ; GFX_START_ADDR
000064  e5850034          STR      r0,[r5,#0x34]
;;;2500   
;;;2501       if (_ClipEnable) {
000068  e5d70002          LDRB     r0,[r7,#2]  ; _ClipEnable
00006c  e3500000          CMP      r0,#0
000070  0a000008          BEQ      |L40.152|
;;;2502           cmd32 |= 0x00000200;
;;;2503           if (_OutsideClip) {
000074  e5d70003          LDRB     r0,[r7,#3]  ; _OutsideClip
000078  e38ccc02          ORR      r12,r12,#0x200        ;2502
00007c  e3500000          CMP      r0,#0
;;;2504               cmd32 |= 0x00000100;
000080  138ccc01          ORRNE    r12,r12,#0x100
;;;2505           }
;;;2506           outpw(REG_GE2D_CTL, cmd32);
000084  e585c020          STR      r12,[r5,#0x20]
;;;2507           outpw(REG_GE2D_CLPBTL, _ClipTL);
000088  e59700ec          LDR      r0,[r7,#0xec]  ; _ClipTL
00008c  e5850048          STR      r0,[r5,#0x48]
;;;2508           outpw(REG_GE2D_CLPBBR, _ClipBR);
000090  e59700f0          LDR      r0,[r7,#0xf0]  ; _ClipBR
000094  e585004c          STR      r0,[r5,#0x4c]
                  |L40.152|
;;;2509       }
;;;2510   
;;;2511       //
;;;2512       // default source color transparent is ON
;;;2513       //
;;;2514       cmd32 |= 0x00008000; // color transparency
000098  e38c4902          ORR      r4,r12,#0x8000
;;;2515       outpw(REG_GE2D_CTL, cmd32);
00009c  e5854020          STR      r4,[r5,#0x20]
;;;2516       outpw(REG_GE2D_TRNSCOLR, make_color(COLOR_KEY));
0000a0  e3a004ff          MOV      r0,#0xff000000
0000a4  ebfffffe          BL       make_color
0000a8  e585002c          STR      r0,[r5,#0x2c]
;;;2517       outpw(REG_GE2D_TCMSK, 0xffffff);
0000ac  e3e004ff          MVN      r0,#0xff000000
0000b0  e5850030          STR      r0,[r5,#0x30]
;;;2518   
;;;2519       if (_EnableAlpha) {
0000b4  e5d70001          LDRB     r0,[r7,#1]  ; _EnableAlpha
0000b8  e3500000          CMP      r0,#0
0000bc  0a000009          BEQ      |L40.232|
;;;2520           cmd32 |= 0x00200000;
0000c0  e3844602          ORR      r4,r4,#0x200000
;;;2521           outpw(REG_GE2D_CTL, cmd32);
0000c4  e5854020          STR      r4,[r5,#0x20]
;;;2522   
;;;2523           data32 = inpw(REG_GE2D_MISCTL) & 0x0000ffff;
0000c8  e595005c          LDR      r0,[r5,#0x5c]
;;;2524           alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
0000cc  e1d71eb8          LDRH     r1,[r7,#0xe8]  ; _AlphaKd
0000d0  e5d720e4          LDRB     r2,[r7,#0xe4]  ; _AlphaKs
0000d4  e1a00800          LSL      r0,r0,#16             ;2523
0000d8  e1a00820          LSR      r0,r0,#16             ;2523
0000dc  e1811402          ORR      r1,r1,r2,LSL #8
;;;2525           data32 |= (alpha << 16);
0000e0  e1800801          ORR      r0,r0,r1,LSL #16
;;;2526   
;;;2527           outpw(REG_GE2D_MISCTL, data32);
0000e4  e585005c          STR      r0,[r5,#0x5c]
                  |L40.232|
;;;2528       }
;;;2529   
;;;2530       if ((rop==0x00) || (rop==0xff)) {
0000e8  e3560000          CMP      r6,#0
0000ec  135600ff          CMPNE    r6,#0xff
;;;2531           cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
0000f0  03c40a0f          BICEQ    r0,r4,#0xf000
0000f4  03800a09          ORREQ    r0,r0,#0x9000
;;;2532           outpw(REG_GE2D_CTL, cmd32);
0000f8  05850020          STREQ    r0,[r5,#0x20]
;;;2533       }
;;;2534   
;;;2535       outpw(REG_GE2D_TRG, 1);
0000fc  e3a01001          MOV      r1,#1
000100  e5851000          STR      r1,[r5,#0]
                  |L40.260|
;;;2536       while ((inpw(REG_GE2D_INTSTS)&0x01)==0); // wait for command complete
000104  e5950010          LDR      r0,[r5,#0x10]
000108  e3100001          TST      r0,#1
;;;2537       outpw(REG_GE2D_INTSTS, 1); // clear interrupt status
00010c  15851010          STRNE    r1,[r5,#0x10]
000110  0afffffb          BEQ      |L40.260|
;;;2538   }
000114  e8bd9ff0          POP      {r4-r12,pc}
;;;2539   
                          ENDP

                  |L40.280|
                          DCD      ||.data||
                  |L40.284|
                          DCD      0xb000b000

                          AREA ||i.make_color||, CODE, READONLY, ALIGN=2

                  make_color PROC
;;;630    
;;;631    static unsigned long make_color(int color)
000000  e59f104c          LDR      r1,|L41.84|
;;;632    {
;;;633        UINT32 r, g, b;
;;;634    
;;;635        if (GFX_BPP==8) {
000004  e5912008          LDR      r2,[r1,#8]  ; GFX_BPP
;;;636            r = (color & 0x00e00000) >> 16; // 3 bits
;;;637            g = (color & 0x0000e000) >> 11; // 3 bits
;;;638            b = (color & 0x000000c0) >> 6;  // 2 bits
000008  e1a01c00          LSL      r1,r0,#24
00000c  e3520008          CMP      r2,#8                 ;635
000010  0a000009          BEQ      |L41.60|
;;;639            return (r | g | b);
;;;640        } else if (GFX_BPP==16) {
000014  e3520010          CMP      r2,#0x10
;;;641            r = (color & 0x00f80000) >> 8; // 5 bits
;;;642            g = (color & 0x0000fc00) >> 5; // 6 bits
;;;643            b = (color & 0x000000f8) >> 3; // 5 bits
;;;644            return (r | g | b);
;;;645        } else return (UINT32)color;
;;;646    }
000018  112fff1e          BXNE     lr
00001c  e3a02b3e          MOV      r2,#0xf800            ;641
000020  e0022420          AND      r2,r2,r0,LSR #8       ;641
000024  e3a03e7e          MOV      r3,#0x7e0             ;642
000028  e00302a0          AND      r0,r3,r0,LSR #5       ;642
00002c  e1a01da1          LSR      r1,r1,#27             ;643
                  |L41.48|
000030  e1800002          ORR      r0,r0,r2              ;644
000034  e1800001          ORR      r0,r0,r1              ;644
000038  e12fff1e          BX       lr
                  |L41.60|
00003c  e3a020e0          MOV      r2,#0xe0              ;636
000040  e0022820          AND      r2,r2,r0,LSR #16      ;636
000044  e3a0301c          MOV      r3,#0x1c              ;637
000048  e00305a0          AND      r0,r3,r0,LSR #11      ;637
00004c  e1a01f21          LSR      r1,r1,#30             ;638
000050  eafffff6          B        |L41.48|
;;;647    /// @endcond /* HIDDEN_SYMBOLS */
                          ENDP

                  |L41.84|
                          DCD      ||.data||

                          AREA ||i.shift_pointer||, CODE, READONLY, ALIGN=2

                  shift_pointer PROC
;;;616    /* For align 32 */
;;;617    static unsigned int shift_pointer(int ptr, int align)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;618    {
000004  e1a05001          MOV      r5,r1
000008  e1a04000          MOV      r4,r0
;;;619        unsigned int pos;
;;;620        int remain;
;;;621        pos = ptr;
;;;622    
;;;623        if( (ptr%align)!=0) {
00000c  ebfffffe          BL       __aeabi_idivmod
000010  e3510000          CMP      r1,#0
;;;624            remain = ptr % align;
;;;625            ptr = ptr + (align - remain);
000014  10450001          SUBNE    r0,r5,r1
000018  10800004          ADDNE    r0,r0,r4
;;;626            return ptr;
;;;627        } else
;;;628            return pos;
00001c  01a00004          MOVEQ    r0,r4
;;;629    }
000020  e8bd8070          POP      {r4-r6,pc}
;;;630    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=5

                  _DrawMode
000000  00                DCB      0x00
                  _EnableAlpha
000001  00                DCB      0x00
                  _ClipEnable
000002  00                DCB      0x00
                  _OutsideClip
000003  00                DCB      0x00
                  GFX_Mem
                          DCD      0x00000000
                  GFX_BPP
                          DCD      0x00000000
                  GFX_WIDTH
                          DCD      0x00000000
                  GFX_HEIGHT
                          DCD      0x00000000
                  GFX_PITCH
                          DCD      0x00000000
                  GFX_SIZE
                          DCD      0x00000000
                          DCD      0x00000000
                  GFX_START_ADDR
                          DCD      0x00000000
                          %        28
                  MONO_SOURCE_ADDR
                          DCD      0x00000000
                          %        28
                  COLOR_SOURCE_ADDR
                          DCD      0x00000000
                          %        28
                  CMODEL_START_ADDR
                          DCD      0x00000000
                          %        28
                  GFX_OFFSCREEN_ADDR
                          DCD      0x00000000
                          %        28
                  GFX_PAT_ADDR
                          DCD      0x00000000
                  Orig_GFX_START_ADDR
                          DCD      0x00000000
                  Orig_MONO_SOURCE_ADDR
                          DCD      0x00000000
                  Orig_COLOR_SOURCE_ADDR
                          DCD      0x00000000
                  Orig_CMODEL_START_ADDR
                          DCD      0x00000000
                  Orig_GFX_OFFSCREEN_ADDR
                          DCD      0x00000000
                  Orig_GFX_PAT_ADDR
                          DCD      0x00000000
                  _ColorKey
                          DCD      0x00000000
                  _ColorKeyMask
                          DCD      0x00000000
                  _AlphaKs
                          DCD      0x00000000
                  _AlphaKd
                          DCD      0x00000000
                  _ClipTL
                          DCD      0x00000000
                  _ClipBR
                          DCD      0x00000000
                  _PatternType
                          DCD      0x00000000
                  MonoPatternData
                          DCD      0x00000000
                          DCD      0xff000000
                          DCD      0x08080808
                          DCD      0x08080808
                          DCD      0x80402010
                          DCD      0x08040201
                          DCD      0x01020408
                          DCD      0x10204080
                          DCD      0x08080808
                          DCD      0xff080808
                          DCD      0x81422418
                          DCD      0x18244281
                  FontData8
000128  00000000          DCB      0x00,0x00,0x00,0x00
00012c  00000000          DCB      0x00,0x00,0x00,0x00
000130  7e81a581          DCB      0x7e,0x81,0xa5,0x81
000134  bd99817e          DCB      0xbd,0x99,0x81,0x7e
000138  7effdbff          DCB      0x7e,0xff,0xdb,0xff
00013c  c3e7ff7e          DCB      0xc3,0xe7,0xff,0x7e
000140  6cfefefe          DCB      0x6c,0xfe,0xfe,0xfe
000144  7c381000          DCB      0x7c,0x38,0x10,0x00
000148  10387cfe          DCB      0x10,0x38,0x7c,0xfe
00014c  7c381000          DCB      0x7c,0x38,0x10,0x00
000150  387c38fe          DCB      0x38,0x7c,0x38,0xfe
000154  fe92107c          DCB      0xfe,0x92,0x10,0x7c
000158  0010387c          DCB      0x00,0x10,0x38,0x7c
00015c  fe7c387c          DCB      0xfe,0x7c,0x38,0x7c
000160  0000183c          DCB      0x00,0x00,0x18,0x3c
000164  3c180000          DCB      0x3c,0x18,0x00,0x00
000168  ffffe7c3          DCB      0xff,0xff,0xe7,0xc3
00016c  c3e7ffff          DCB      0xc3,0xe7,0xff,0xff
000170  003c6642          DCB      0x00,0x3c,0x66,0x42
000174  42663c00          DCB      0x42,0x66,0x3c,0x00
000178  ffc399bd          DCB      0xff,0xc3,0x99,0xbd
00017c  bd99c3ff          DCB      0xbd,0x99,0xc3,0xff
000180  0f070f7d          DCB      0x0f,0x07,0x0f,0x7d
000184  cccccc78          DCB      0xcc,0xcc,0xcc,0x78
000188  3c666666          DCB      0x3c,0x66,0x66,0x66
00018c  3c187e18          DCB      0x3c,0x18,0x7e,0x18
000190  3f333f30          DCB      0x3f,0x33,0x3f,0x30
000194  3070f0e0          DCB      0x30,0x70,0xf0,0xe0
000198  7f637f63          DCB      0x7f,0x63,0x7f,0x63
00019c  6367e6c0          DCB      0x63,0x67,0xe6,0xc0
0001a0  995a3ce7          DCB      0x99,0x5a,0x3c,0xe7
0001a4  e73c5a99          DCB      0xe7,0x3c,0x5a,0x99
0001a8  80e0f8fe          DCB      0x80,0xe0,0xf8,0xfe
0001ac  f8e08000          DCB      0xf8,0xe0,0x80,0x00
0001b0  020e3efe          DCB      0x02,0x0e,0x3e,0xfe
0001b4  3e0e0200          DCB      0x3e,0x0e,0x02,0x00
0001b8  183c7e18          DCB      0x18,0x3c,0x7e,0x18
0001bc  187e3c18          DCB      0x18,0x7e,0x3c,0x18
0001c0  66666666          DCB      0x66,0x66,0x66,0x66
0001c4  66006600          DCB      0x66,0x00,0x66,0x00
0001c8  7fdbdb7b          DCB      0x7f,0xdb,0xdb,0x7b
0001cc  1b1b1b00          DCB      0x1b,0x1b,0x1b,0x00
0001d0  3e63386c          DCB      0x3e,0x63,0x38,0x6c
0001d4  6c3886fc          DCB      0x6c,0x38,0x86,0xfc
0001d8  00000000          DCB      0x00,0x00,0x00,0x00
0001dc  7e7e7e00          DCB      0x7e,0x7e,0x7e,0x00
0001e0  183c7e18          DCB      0x18,0x3c,0x7e,0x18
0001e4  7e3c18ff          DCB      0x7e,0x3c,0x18,0xff
0001e8  183c7e18          DCB      0x18,0x3c,0x7e,0x18
0001ec  18181800          DCB      0x18,0x18,0x18,0x00
0001f0  18181818          DCB      0x18,0x18,0x18,0x18
0001f4  7e3c1800          DCB      0x7e,0x3c,0x18,0x00
0001f8  00180cfe          DCB      0x00,0x18,0x0c,0xfe
0001fc  0c180000          DCB      0x0c,0x18,0x00,0x00
000200  003060fe          DCB      0x00,0x30,0x60,0xfe
000204  60300000          DCB      0x60,0x30,0x00,0x00
000208  0000c0c0          DCB      0x00,0x00,0xc0,0xc0
00020c  c0fe0000          DCB      0xc0,0xfe,0x00,0x00
000210  002466ff          DCB      0x00,0x24,0x66,0xff
000214  66240000          DCB      0x66,0x24,0x00,0x00
000218  00183c7e          DCB      0x00,0x18,0x3c,0x7e
00021c  ffff0000          DCB      0xff,0xff,0x00,0x00
000220  00ffff7e          DCB      0x00,0xff,0xff,0x7e
000224  3c180000          DCB      0x3c,0x18,0x00,0x00
000228  00000000          DCB      0x00,0x00,0x00,0x00
00022c  00000000          DCB      0x00,0x00,0x00,0x00
000230  183c3c18          DCB      0x18,0x3c,0x3c,0x18
000234  18001800          DCB      0x18,0x00,0x18,0x00
000238  6c6c6c00          DCB      0x6c,0x6c,0x6c,0x00
00023c  00000000          DCB      0x00,0x00,0x00,0x00
000240  6c6cfe6c          DCB      0x6c,0x6c,0xfe,0x6c
000244  fe6c6c00          DCB      0xfe,0x6c,0x6c,0x00
000248  187ec07c          DCB      0x18,0x7e,0xc0,0x7c
00024c  06fc1800          DCB      0x06,0xfc,0x18,0x00
000250  00c6cc18          DCB      0x00,0xc6,0xcc,0x18
000254  3066c600          DCB      0x30,0x66,0xc6,0x00
000258  386c3876          DCB      0x38,0x6c,0x38,0x76
00025c  dccc7600          DCB      0xdc,0xcc,0x76,0x00
000260  30306000          DCB      0x30,0x30,0x60,0x00
000264  00000000          DCB      0x00,0x00,0x00,0x00
000268  18306060          DCB      0x18,0x30,0x60,0x60
00026c  60301800          DCB      0x60,0x30,0x18,0x00
000270  60301818          DCB      0x60,0x30,0x18,0x18
000274  18306000          DCB      0x18,0x30,0x60,0x00
000278  00663cff          DCB      0x00,0x66,0x3c,0xff
00027c  3c660000          DCB      0x3c,0x66,0x00,0x00
000280  0018187e          DCB      0x00,0x18,0x18,0x7e
000284  18180000          DCB      0x18,0x18,0x00,0x00
000288  00000000          DCB      0x00,0x00,0x00,0x00
00028c  00181830          DCB      0x00,0x18,0x18,0x30
000290  0000007e          DCB      0x00,0x00,0x00,0x7e
000294  00000000          DCB      0x00,0x00,0x00,0x00
000298  00000000          DCB      0x00,0x00,0x00,0x00
00029c  00181800          DCB      0x00,0x18,0x18,0x00
0002a0  060c1830          DCB      0x06,0x0c,0x18,0x30
0002a4  60c08000          DCB      0x60,0xc0,0x80,0x00
0002a8  7ccedef6          DCB      0x7c,0xce,0xde,0xf6
0002ac  e6c67c00          DCB      0xe6,0xc6,0x7c,0x00
0002b0  30703030          DCB      0x30,0x70,0x30,0x30
0002b4  3030fc00          DCB      0x30,0x30,0xfc,0x00
0002b8  78cc0c38          DCB      0x78,0xcc,0x0c,0x38
0002bc  60ccfc00          DCB      0x60,0xcc,0xfc,0x00
0002c0  78cc0c38          DCB      0x78,0xcc,0x0c,0x38
0002c4  0ccc7800          DCB      0x0c,0xcc,0x78,0x00
0002c8  1c3c6ccc          DCB      0x1c,0x3c,0x6c,0xcc
0002cc  fe0c1e00          DCB      0xfe,0x0c,0x1e,0x00
0002d0  fcc0f80c          DCB      0xfc,0xc0,0xf8,0x0c
0002d4  0ccc7800          DCB      0x0c,0xcc,0x78,0x00
0002d8  3860c0f8          DCB      0x38,0x60,0xc0,0xf8
0002dc  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0002e0  fccc0c18          DCB      0xfc,0xcc,0x0c,0x18
0002e4  30303000          DCB      0x30,0x30,0x30,0x00
0002e8  78cccc78          DCB      0x78,0xcc,0xcc,0x78
0002ec  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0002f0  78cccc7c          DCB      0x78,0xcc,0xcc,0x7c
0002f4  0c187000          DCB      0x0c,0x18,0x70,0x00
0002f8  00181800          DCB      0x00,0x18,0x18,0x00
0002fc  00181800          DCB      0x00,0x18,0x18,0x00
000300  00181800          DCB      0x00,0x18,0x18,0x00
000304  00181830          DCB      0x00,0x18,0x18,0x30
000308  183060c0          DCB      0x18,0x30,0x60,0xc0
00030c  60301800          DCB      0x60,0x30,0x18,0x00
000310  00007e00          DCB      0x00,0x00,0x7e,0x00
000314  7e000000          DCB      0x7e,0x00,0x00,0x00
000318  6030180c          DCB      0x60,0x30,0x18,0x0c
00031c  18306000          DCB      0x18,0x30,0x60,0x00
000320  3c660c18          DCB      0x3c,0x66,0x0c,0x18
000324  18001800          DCB      0x18,0x00,0x18,0x00
000328  7cc6dede          DCB      0x7c,0xc6,0xde,0xde
00032c  dcc07c00          DCB      0xdc,0xc0,0x7c,0x00
000330  3078cccc          DCB      0x30,0x78,0xcc,0xcc
000334  fccccc00          DCB      0xfc,0xcc,0xcc,0x00
000338  fc66667c          DCB      0xfc,0x66,0x66,0x7c
00033c  6666fc00          DCB      0x66,0x66,0xfc,0x00
000340  3c66c0c0          DCB      0x3c,0x66,0xc0,0xc0
000344  c0663c00          DCB      0xc0,0x66,0x3c,0x00
000348  f86c6666          DCB      0xf8,0x6c,0x66,0x66
00034c  666cf800          DCB      0x66,0x6c,0xf8,0x00
000350  fe626878          DCB      0xfe,0x62,0x68,0x78
000354  6862fe00          DCB      0x68,0x62,0xfe,0x00
000358  fe626878          DCB      0xfe,0x62,0x68,0x78
00035c  6860f000          DCB      0x68,0x60,0xf0,0x00
000360  3c66c0c0          DCB      0x3c,0x66,0xc0,0xc0
000364  ce663a00          DCB      0xce,0x66,0x3a,0x00
000368  ccccccfc          DCB      0xcc,0xcc,0xcc,0xfc
00036c  cccccc00          DCB      0xcc,0xcc,0xcc,0x00
000370  78303030          DCB      0x78,0x30,0x30,0x30
000374  30307800          DCB      0x30,0x30,0x78,0x00
000378  1e0c0c0c          DCB      0x1e,0x0c,0x0c,0x0c
00037c  cccc7800          DCB      0xcc,0xcc,0x78,0x00
000380  e6666c78          DCB      0xe6,0x66,0x6c,0x78
000384  6c66e600          DCB      0x6c,0x66,0xe6,0x00
000388  f0606060          DCB      0xf0,0x60,0x60,0x60
00038c  6266fe00          DCB      0x62,0x66,0xfe,0x00
000390  c6eefefe          DCB      0xc6,0xee,0xfe,0xfe
000394  d6c6c600          DCB      0xd6,0xc6,0xc6,0x00
000398  c6e6f6de          DCB      0xc6,0xe6,0xf6,0xde
00039c  cec6c600          DCB      0xce,0xc6,0xc6,0x00
0003a0  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
0003a4  c66c3800          DCB      0xc6,0x6c,0x38,0x00
0003a8  fc66667c          DCB      0xfc,0x66,0x66,0x7c
0003ac  6060f000          DCB      0x60,0x60,0xf0,0x00
0003b0  7cc6c6c6          DCB      0x7c,0xc6,0xc6,0xc6
0003b4  d67c0e00          DCB      0xd6,0x7c,0x0e,0x00
0003b8  fc66667c          DCB      0xfc,0x66,0x66,0x7c
0003bc  6c66e600          DCB      0x6c,0x66,0xe6,0x00
0003c0  7cc6e078          DCB      0x7c,0xc6,0xe0,0x78
0003c4  0ec67c00          DCB      0x0e,0xc6,0x7c,0x00
0003c8  fcb43030          DCB      0xfc,0xb4,0x30,0x30
0003cc  30307800          DCB      0x30,0x30,0x78,0x00
0003d0  cccccccc          DCB      0xcc,0xcc,0xcc,0xcc
0003d4  ccccfc00          DCB      0xcc,0xcc,0xfc,0x00
0003d8  cccccccc          DCB      0xcc,0xcc,0xcc,0xcc
0003dc  cc783000          DCB      0xcc,0x78,0x30,0x00
0003e0  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
0003e4  d6fe6c00          DCB      0xd6,0xfe,0x6c,0x00
0003e8  c6c66c38          DCB      0xc6,0xc6,0x6c,0x38
0003ec  6cc6c600          DCB      0x6c,0xc6,0xc6,0x00
0003f0  cccccc78          DCB      0xcc,0xcc,0xcc,0x78
0003f4  30307800          DCB      0x30,0x30,0x78,0x00
0003f8  fec68c18          DCB      0xfe,0xc6,0x8c,0x18
0003fc  3266fe00          DCB      0x32,0x66,0xfe,0x00
000400  78606060          DCB      0x78,0x60,0x60,0x60
000404  60607800          DCB      0x60,0x60,0x78,0x00
000408  c0603018          DCB      0xc0,0x60,0x30,0x18
00040c  0c060200          DCB      0x0c,0x06,0x02,0x00
000410  78181818          DCB      0x78,0x18,0x18,0x18
000414  18187800          DCB      0x18,0x18,0x78,0x00
000418  10386cc6          DCB      0x10,0x38,0x6c,0xc6
00041c  00000000          DCB      0x00,0x00,0x00,0x00
000420  00000000          DCB      0x00,0x00,0x00,0x00
000424  000000ff          DCB      0x00,0x00,0x00,0xff
000428  30301800          DCB      0x30,0x30,0x18,0x00
00042c  00000000          DCB      0x00,0x00,0x00,0x00
000430  0000780c          DCB      0x00,0x00,0x78,0x0c
000434  7ccc7600          DCB      0x7c,0xcc,0x76,0x00
000438  e060607c          DCB      0xe0,0x60,0x60,0x7c
00043c  6666dc00          DCB      0x66,0x66,0xdc,0x00
000440  000078cc          DCB      0x00,0x00,0x78,0xcc
000444  c0cc7800          DCB      0xc0,0xcc,0x78,0x00
000448  1c0c0c7c          DCB      0x1c,0x0c,0x0c,0x7c
00044c  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000450  000078cc          DCB      0x00,0x00,0x78,0xcc
000454  fcc07800          DCB      0xfc,0xc0,0x78,0x00
000458  386c64f0          DCB      0x38,0x6c,0x64,0xf0
00045c  6060f000          DCB      0x60,0x60,0xf0,0x00
000460  000076cc          DCB      0x00,0x00,0x76,0xcc
000464  cc7c0cf8          DCB      0xcc,0x7c,0x0c,0xf8
000468  e0606c76          DCB      0xe0,0x60,0x6c,0x76
00046c  6666e600          DCB      0x66,0x66,0xe6,0x00
000470  30007030          DCB      0x30,0x00,0x70,0x30
000474  30307800          DCB      0x30,0x30,0x78,0x00
000478  0c001c0c          DCB      0x0c,0x00,0x1c,0x0c
00047c  0ccccc78          DCB      0x0c,0xcc,0xcc,0x78
000480  e060666c          DCB      0xe0,0x60,0x66,0x6c
000484  786ce600          DCB      0x78,0x6c,0xe6,0x00
000488  70303030          DCB      0x70,0x30,0x30,0x30
00048c  30307800          DCB      0x30,0x30,0x78,0x00
000490  0000ccfe          DCB      0x00,0x00,0xcc,0xfe
000494  fed6d600          DCB      0xfe,0xd6,0xd6,0x00
000498  0000b8cc          DCB      0x00,0x00,0xb8,0xcc
00049c  cccccc00          DCB      0xcc,0xcc,0xcc,0x00
0004a0  000078cc          DCB      0x00,0x00,0x78,0xcc
0004a4  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0004a8  0000dc66          DCB      0x00,0x00,0xdc,0x66
0004ac  667c60f0          DCB      0x66,0x7c,0x60,0xf0
0004b0  000076cc          DCB      0x00,0x00,0x76,0xcc
0004b4  cc7c0c1e          DCB      0xcc,0x7c,0x0c,0x1e
0004b8  0000dc76          DCB      0x00,0x00,0xdc,0x76
0004bc  6260f000          DCB      0x62,0x60,0xf0,0x00
0004c0  00007cc0          DCB      0x00,0x00,0x7c,0xc0
0004c4  701cf800          DCB      0x70,0x1c,0xf8,0x00
0004c8  1030fc30          DCB      0x10,0x30,0xfc,0x30
0004cc  30341800          DCB      0x30,0x34,0x18,0x00
0004d0  0000cccc          DCB      0x00,0x00,0xcc,0xcc
0004d4  cccc7600          DCB      0xcc,0xcc,0x76,0x00
0004d8  0000cccc          DCB      0x00,0x00,0xcc,0xcc
0004dc  cc783000          DCB      0xcc,0x78,0x30,0x00
0004e0  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
0004e4  d6fe6c00          DCB      0xd6,0xfe,0x6c,0x00
0004e8  0000c66c          DCB      0x00,0x00,0xc6,0x6c
0004ec  386cc600          DCB      0x38,0x6c,0xc6,0x00
0004f0  0000cccc          DCB      0x00,0x00,0xcc,0xcc
0004f4  cc7c0cf8          DCB      0xcc,0x7c,0x0c,0xf8
0004f8  0000fc98          DCB      0x00,0x00,0xfc,0x98
0004fc  3064fc00          DCB      0x30,0x64,0xfc,0x00
000500  1c3030e0          DCB      0x1c,0x30,0x30,0xe0
000504  30301c00          DCB      0x30,0x30,0x1c,0x00
000508  18181800          DCB      0x18,0x18,0x18,0x00
00050c  18181800          DCB      0x18,0x18,0x18,0x00
000510  e030301c          DCB      0xe0,0x30,0x30,0x1c
000514  3030e000          DCB      0x30,0x30,0xe0,0x00
000518  76dc0000          DCB      0x76,0xdc,0x00,0x00
00051c  00000000          DCB      0x00,0x00,0x00,0x00
000520  0010386c          DCB      0x00,0x10,0x38,0x6c
000524  c6c6fe00          DCB      0xc6,0xc6,0xfe,0x00
000528  7cc6c0c6          DCB      0x7c,0xc6,0xc0,0xc6
00052c  7c0c067c          DCB      0x7c,0x0c,0x06,0x7c
000530  00cc00cc          DCB      0x00,0xcc,0x00,0xcc
000534  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000538  1c0078cc          DCB      0x1c,0x00,0x78,0xcc
00053c  fcc07800          DCB      0xfc,0xc0,0x78,0x00
000540  7e813c06          DCB      0x7e,0x81,0x3c,0x06
000544  3e663b00          DCB      0x3e,0x66,0x3b,0x00
000548  cc00780c          DCB      0xcc,0x00,0x78,0x0c
00054c  7ccc7600          DCB      0x7c,0xcc,0x76,0x00
000550  e000780c          DCB      0xe0,0x00,0x78,0x0c
000554  7ccc7600          DCB      0x7c,0xcc,0x76,0x00
000558  3030780c          DCB      0x30,0x30,0x78,0x0c
00055c  7ccc7600          DCB      0x7c,0xcc,0x76,0x00
000560  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000564  c0780c38          DCB      0xc0,0x78,0x0c,0x38
000568  7e813c66          DCB      0x7e,0x81,0x3c,0x66
00056c  7e603c00          DCB      0x7e,0x60,0x3c,0x00
000570  cc0078cc          DCB      0xcc,0x00,0x78,0xcc
000574  fcc07800          DCB      0xfc,0xc0,0x78,0x00
000578  e00078cc          DCB      0xe0,0x00,0x78,0xcc
00057c  fcc07800          DCB      0xfc,0xc0,0x78,0x00
000580  cc007030          DCB      0xcc,0x00,0x70,0x30
000584  30307800          DCB      0x30,0x30,0x78,0x00
000588  7c823818          DCB      0x7c,0x82,0x38,0x18
00058c  18183c00          DCB      0x18,0x18,0x3c,0x00
000590  e0007030          DCB      0xe0,0x00,0x70,0x30
000594  30307800          DCB      0x30,0x30,0x78,0x00
000598  c6107cc6          DCB      0xc6,0x10,0x7c,0xc6
00059c  fec6c600          DCB      0xfe,0xc6,0xc6,0x00
0005a0  30300078          DCB      0x30,0x30,0x00,0x78
0005a4  ccfccc00          DCB      0xcc,0xfc,0xcc,0x00
0005a8  1c00fc60          DCB      0x1c,0x00,0xfc,0x60
0005ac  7860fc00          DCB      0x78,0x60,0xfc,0x00
0005b0  00007f0c          DCB      0x00,0x00,0x7f,0x0c
0005b4  7fcc7f00          DCB      0x7f,0xcc,0x7f,0x00
0005b8  3e6cccfe          DCB      0x3e,0x6c,0xcc,0xfe
0005bc  ccccce00          DCB      0xcc,0xcc,0xce,0x00
0005c0  78840078          DCB      0x78,0x84,0x00,0x78
0005c4  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0005c8  00cc0078          DCB      0x00,0xcc,0x00,0x78
0005cc  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0005d0  00e00078          DCB      0x00,0xe0,0x00,0x78
0005d4  cccc7800          DCB      0xcc,0xcc,0x78,0x00
0005d8  788400cc          DCB      0x78,0x84,0x00,0xcc
0005dc  cccc7600          DCB      0xcc,0xcc,0x76,0x00
0005e0  00e000cc          DCB      0x00,0xe0,0x00,0xcc
0005e4  cccc7600          DCB      0xcc,0xcc,0x76,0x00
0005e8  00cc00cc          DCB      0x00,0xcc,0x00,0xcc
0005ec  cc7c0cf8          DCB      0xcc,0x7c,0x0c,0xf8
0005f0  c3183c66          DCB      0xc3,0x18,0x3c,0x66
0005f4  663c1800          DCB      0x66,0x3c,0x18,0x00
0005f8  cc00cccc          DCB      0xcc,0x00,0xcc,0xcc
0005fc  cccc7800          DCB      0xcc,0xcc,0x78,0x00
000600  18187ec0          DCB      0x18,0x18,0x7e,0xc0
000604  c07e1818          DCB      0xc0,0x7e,0x18,0x18
000608  386c64f0          DCB      0x38,0x6c,0x64,0xf0
00060c  60e6fc00          DCB      0x60,0xe6,0xfc,0x00
000610  cccc7830          DCB      0xcc,0xcc,0x78,0x30
000614  fc30fc30          DCB      0xfc,0x30,0xfc,0x30
000618  f8ccccfa          DCB      0xf8,0xcc,0xcc,0xfa
00061c  c6cfc6c3          DCB      0xc6,0xcf,0xc6,0xc3
000620  0e1b183c          DCB      0x0e,0x1b,0x18,0x3c
000624  1818d870          DCB      0x18,0x18,0xd8,0x70
000628  1c00780c          DCB      0x1c,0x00,0x78,0x0c
00062c  7ccc7600          DCB      0x7c,0xcc,0x76,0x00
000630  38007030          DCB      0x38,0x00,0x70,0x30
000634  30307800          DCB      0x30,0x30,0x78,0x00
000638  001c0078          DCB      0x00,0x1c,0x00,0x78
00063c  cccc7800          DCB      0xcc,0xcc,0x78,0x00
000640  001c00cc          DCB      0x00,0x1c,0x00,0xcc
000644  cccc7600          DCB      0xcc,0xcc,0x76,0x00
000648  00f800b8          DCB      0x00,0xf8,0x00,0xb8
00064c  cccccc00          DCB      0xcc,0xcc,0xcc,0x00
000650  fc00ccec          DCB      0xfc,0x00,0xcc,0xec
000654  fcdccc00          DCB      0xfc,0xdc,0xcc,0x00
000658  3c6c6c3e          DCB      0x3c,0x6c,0x6c,0x3e
00065c  007e0000          DCB      0x00,0x7e,0x00,0x00
000660  386c6c38          DCB      0x38,0x6c,0x6c,0x38
000664  007c0000          DCB      0x00,0x7c,0x00,0x00
000668  18001818          DCB      0x18,0x00,0x18,0x18
00066c  30663c00          DCB      0x30,0x66,0x3c,0x00
000670  000000fc          DCB      0x00,0x00,0x00,0xfc
000674  c0c00000          DCB      0xc0,0xc0,0x00,0x00
000678  000000fc          DCB      0x00,0x00,0x00,0xfc
00067c  0c0c0000          DCB      0x0c,0x0c,0x00,0x00
000680  c6ccd836          DCB      0xc6,0xcc,0xd8,0x36
000684  6bc2840f          DCB      0x6b,0xc2,0x84,0x0f
000688  c3c6ccdb          DCB      0xc3,0xc6,0xcc,0xdb
00068c  376dcf03          DCB      0x37,0x6d,0xcf,0x03
000690  18001818          DCB      0x18,0x00,0x18,0x18
000694  3c3c1800          DCB      0x3c,0x3c,0x18,0x00
000698  003366cc          DCB      0x00,0x33,0x66,0xcc
00069c  66330000          DCB      0x66,0x33,0x00,0x00
0006a0  00cc6633          DCB      0x00,0xcc,0x66,0x33
0006a4  66cc0000          DCB      0x66,0xcc,0x00,0x00
0006a8  22882288          DCB      0x22,0x88,0x22,0x88
0006ac  22882288          DCB      0x22,0x88,0x22,0x88
0006b0  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
0006b4  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
0006b8  dbf6db6f          DCB      0xdb,0xf6,0xdb,0x6f
0006bc  db7ed7ed          DCB      0xdb,0x7e,0xd7,0xed
0006c0  18181818          DCB      0x18,0x18,0x18,0x18
0006c4  18181818          DCB      0x18,0x18,0x18,0x18
0006c8  18181818          DCB      0x18,0x18,0x18,0x18
0006cc  f8181818          DCB      0xf8,0x18,0x18,0x18
0006d0  1818f818          DCB      0x18,0x18,0xf8,0x18
0006d4  f8181818          DCB      0xf8,0x18,0x18,0x18
0006d8  36363636          DCB      0x36,0x36,0x36,0x36
0006dc  f6363636          DCB      0xf6,0x36,0x36,0x36
0006e0  00000000          DCB      0x00,0x00,0x00,0x00
0006e4  fe363636          DCB      0xfe,0x36,0x36,0x36
0006e8  0000f818          DCB      0x00,0x00,0xf8,0x18
0006ec  f8181818          DCB      0xf8,0x18,0x18,0x18
0006f0  3636f606          DCB      0x36,0x36,0xf6,0x06
0006f4  f6363636          DCB      0xf6,0x36,0x36,0x36
0006f8  36363636          DCB      0x36,0x36,0x36,0x36
0006fc  36363636          DCB      0x36,0x36,0x36,0x36
000700  0000fe06          DCB      0x00,0x00,0xfe,0x06
000704  f6363636          DCB      0xf6,0x36,0x36,0x36
000708  3636f606          DCB      0x36,0x36,0xf6,0x06
00070c  fe000000          DCB      0xfe,0x00,0x00,0x00
000710  36363636          DCB      0x36,0x36,0x36,0x36
000714  fe000000          DCB      0xfe,0x00,0x00,0x00
000718  1818f818          DCB      0x18,0x18,0xf8,0x18
00071c  f8000000          DCB      0xf8,0x00,0x00,0x00
000720  00000000          DCB      0x00,0x00,0x00,0x00
000724  f8181818          DCB      0xf8,0x18,0x18,0x18
000728  18181818          DCB      0x18,0x18,0x18,0x18
00072c  1f000000          DCB      0x1f,0x00,0x00,0x00
000730  18181818          DCB      0x18,0x18,0x18,0x18
000734  ff000000          DCB      0xff,0x00,0x00,0x00
000738  00000000          DCB      0x00,0x00,0x00,0x00
00073c  ff181818          DCB      0xff,0x18,0x18,0x18
000740  18181818          DCB      0x18,0x18,0x18,0x18
000744  1f181818          DCB      0x1f,0x18,0x18,0x18
000748  00000000          DCB      0x00,0x00,0x00,0x00
00074c  ff000000          DCB      0xff,0x00,0x00,0x00
000750  18181818          DCB      0x18,0x18,0x18,0x18
000754  ff181818          DCB      0xff,0x18,0x18,0x18
000758  18181f18          DCB      0x18,0x18,0x1f,0x18
00075c  1f181818          DCB      0x1f,0x18,0x18,0x18
000760  36363636          DCB      0x36,0x36,0x36,0x36
000764  37363636          DCB      0x37,0x36,0x36,0x36
000768  36363730          DCB      0x36,0x36,0x37,0x30
00076c  3f000000          DCB      0x3f,0x00,0x00,0x00
000770  00003f30          DCB      0x00,0x00,0x3f,0x30
000774  37363636          DCB      0x37,0x36,0x36,0x36
000778  3636f700          DCB      0x36,0x36,0xf7,0x00
00077c  ff000000          DCB      0xff,0x00,0x00,0x00
000780  0000ff00          DCB      0x00,0x00,0xff,0x00
000784  f7363636          DCB      0xf7,0x36,0x36,0x36
000788  36363730          DCB      0x36,0x36,0x37,0x30
00078c  37363636          DCB      0x37,0x36,0x36,0x36
000790  0000ff00          DCB      0x00,0x00,0xff,0x00
000794  ff000000          DCB      0xff,0x00,0x00,0x00
000798  3636f700          DCB      0x36,0x36,0xf7,0x00
00079c  f7363636          DCB      0xf7,0x36,0x36,0x36
0007a0  1818ff00          DCB      0x18,0x18,0xff,0x00
0007a4  ff000000          DCB      0xff,0x00,0x00,0x00
0007a8  36363636          DCB      0x36,0x36,0x36,0x36
0007ac  ff000000          DCB      0xff,0x00,0x00,0x00
0007b0  0000ff00          DCB      0x00,0x00,0xff,0x00
0007b4  ff181818          DCB      0xff,0x18,0x18,0x18
0007b8  00000000          DCB      0x00,0x00,0x00,0x00
0007bc  ff363636          DCB      0xff,0x36,0x36,0x36
0007c0  36363636          DCB      0x36,0x36,0x36,0x36
0007c4  3f000000          DCB      0x3f,0x00,0x00,0x00
0007c8  18181f18          DCB      0x18,0x18,0x1f,0x18
0007cc  1f000000          DCB      0x1f,0x00,0x00,0x00
0007d0  00001f18          DCB      0x00,0x00,0x1f,0x18
0007d4  1f181818          DCB      0x1f,0x18,0x18,0x18
0007d8  00000000          DCB      0x00,0x00,0x00,0x00
0007dc  3f363636          DCB      0x3f,0x36,0x36,0x36
0007e0  36363636          DCB      0x36,0x36,0x36,0x36
0007e4  ff363636          DCB      0xff,0x36,0x36,0x36
0007e8  1818ff18          DCB      0x18,0x18,0xff,0x18
0007ec  ff181818          DCB      0xff,0x18,0x18,0x18
0007f0  18181818          DCB      0x18,0x18,0x18,0x18
0007f4  f8000000          DCB      0xf8,0x00,0x00,0x00
0007f8  00000000          DCB      0x00,0x00,0x00,0x00
0007fc  1f181818          DCB      0x1f,0x18,0x18,0x18
000800  ffffffff          DCB      0xff,0xff,0xff,0xff
000804  ffffffff          DCB      0xff,0xff,0xff,0xff
000808  00000000          DCB      0x00,0x00,0x00,0x00
00080c  ffffffff          DCB      0xff,0xff,0xff,0xff
000810  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
000814  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
000818  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00081c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
000820  ffffffff          DCB      0xff,0xff,0xff,0xff
000824  00000000          DCB      0x00,0x00,0x00,0x00
000828  000076dc          DCB      0x00,0x00,0x76,0xdc
00082c  c8dc7600          DCB      0xc8,0xdc,0x76,0x00
000830  0078ccf8          DCB      0x00,0x78,0xcc,0xf8
000834  ccf8c0c0          DCB      0xcc,0xf8,0xc0,0xc0
000838  00fcccc0          DCB      0x00,0xfc,0xcc,0xc0
00083c  c0c0c000          DCB      0xc0,0xc0,0xc0,0x00
000840  0000fe6c          DCB      0x00,0x00,0xfe,0x6c
000844  6c6c6c00          DCB      0x6c,0x6c,0x6c,0x00
000848  fccc6030          DCB      0xfc,0xcc,0x60,0x30
00084c  60ccfc00          DCB      0x60,0xcc,0xfc,0x00
000850  00007ed8          DCB      0x00,0x00,0x7e,0xd8
000854  d8d87000          DCB      0xd8,0xd8,0x70,0x00
000858  00666666          DCB      0x00,0x66,0x66,0x66
00085c  667c60c0          DCB      0x66,0x7c,0x60,0xc0
000860  0076dc18          DCB      0x00,0x76,0xdc,0x18
000864  18181800          DCB      0x18,0x18,0x18,0x00
000868  fc3078cc          DCB      0xfc,0x30,0x78,0xcc
00086c  cc7830fc          DCB      0xcc,0x78,0x30,0xfc
000870  386cc6fe          DCB      0x38,0x6c,0xc6,0xfe
000874  c66c3800          DCB      0xc6,0x6c,0x38,0x00
000878  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
00087c  6c6cee00          DCB      0x6c,0x6c,0xee,0x00
000880  1c30187c          DCB      0x1c,0x30,0x18,0x7c
000884  cccc7800          DCB      0xcc,0xcc,0x78,0x00
000888  00007edb          DCB      0x00,0x00,0x7e,0xdb
00088c  db7e0000          DCB      0xdb,0x7e,0x00,0x00
000890  060c7edb          DCB      0x06,0x0c,0x7e,0xdb
000894  db7e60c0          DCB      0xdb,0x7e,0x60,0xc0
000898  3860c0f8          DCB      0x38,0x60,0xc0,0xf8
00089c  c0603800          DCB      0xc0,0x60,0x38,0x00
0008a0  78cccccc          DCB      0x78,0xcc,0xcc,0xcc
0008a4  cccccc00          DCB      0xcc,0xcc,0xcc,0x00
0008a8  007e007e          DCB      0x00,0x7e,0x00,0x7e
0008ac  007e0000          DCB      0x00,0x7e,0x00,0x00
0008b0  18187e18          DCB      0x18,0x18,0x7e,0x18
0008b4  18007e00          DCB      0x18,0x00,0x7e,0x00
0008b8  60301830          DCB      0x60,0x30,0x18,0x30
0008bc  6000fc00          DCB      0x60,0x00,0xfc,0x00
0008c0  18306030          DCB      0x18,0x30,0x60,0x30
0008c4  1800fc00          DCB      0x18,0x00,0xfc,0x00
0008c8  0e1b1b18          DCB      0x0e,0x1b,0x1b,0x18
0008cc  18181818          DCB      0x18,0x18,0x18,0x18
0008d0  18181818          DCB      0x18,0x18,0x18,0x18
0008d4  18d8d870          DCB      0x18,0xd8,0xd8,0x70
0008d8  1818007e          DCB      0x18,0x18,0x00,0x7e
0008dc  00181800          DCB      0x00,0x18,0x18,0x00
0008e0  0076dc00          DCB      0x00,0x76,0xdc,0x00
0008e4  76dc0000          DCB      0x76,0xdc,0x00,0x00
0008e8  386c6c38          DCB      0x38,0x6c,0x6c,0x38
0008ec  00000000          DCB      0x00,0x00,0x00,0x00
0008f0  00000018          DCB      0x00,0x00,0x00,0x18
0008f4  18000000          DCB      0x18,0x00,0x00,0x00
0008f8  00000000          DCB      0x00,0x00,0x00,0x00
0008fc  18000000          DCB      0x18,0x00,0x00,0x00
000900  0f0c0c0c          DCB      0x0f,0x0c,0x0c,0x0c
000904  ec6c3c1c          DCB      0xec,0x6c,0x3c,0x1c
000908  586c6c6c          DCB      0x58,0x6c,0x6c,0x6c
00090c  6c000000          DCB      0x6c,0x00,0x00,0x00
000910  70983060          DCB      0x70,0x98,0x30,0x60
000914  f8000000          DCB      0xf8,0x00,0x00,0x00
000918  00003c3c          DCB      0x00,0x00,0x3c,0x3c
00091c  3c3c0000          DCB      0x3c,0x3c,0x00,0x00
000920  00000000          DCB      0x00,0x00,0x00,0x00
000924  00000000          DCB      0x00,0x00,0x00,0x00
                  FontData16
000928  00000000          DCB      0x00,0x00,0x00,0x00
00092c  00000000          DCB      0x00,0x00,0x00,0x00
000930  00000000          DCB      0x00,0x00,0x00,0x00
000934  00000000          DCB      0x00,0x00,0x00,0x00
000938  00007e81          DCB      0x00,0x00,0x7e,0x81
00093c  a58181bd          DCB      0xa5,0x81,0x81,0xbd
000940  9981817e          DCB      0x99,0x81,0x81,0x7e
000944  00000000          DCB      0x00,0x00,0x00,0x00
000948  00007eff          DCB      0x00,0x00,0x7e,0xff
00094c  dbffffc3          DCB      0xdb,0xff,0xff,0xc3
000950  e7ffff7e          DCB      0xe7,0xff,0xff,0x7e
000954  00000000          DCB      0x00,0x00,0x00,0x00
000958  00000000          DCB      0x00,0x00,0x00,0x00
00095c  6cfefefe          DCB      0x6c,0xfe,0xfe,0xfe
000960  fe7c3810          DCB      0xfe,0x7c,0x38,0x10
000964  00000000          DCB      0x00,0x00,0x00,0x00
000968  00000000          DCB      0x00,0x00,0x00,0x00
00096c  10387cfe          DCB      0x10,0x38,0x7c,0xfe
000970  7c381000          DCB      0x7c,0x38,0x10,0x00
000974  00000000          DCB      0x00,0x00,0x00,0x00
000978  00000018          DCB      0x00,0x00,0x00,0x18
00097c  3c3ce7e7          DCB      0x3c,0x3c,0xe7,0xe7
000980  e799183c          DCB      0xe7,0x99,0x18,0x3c
000984  00000000          DCB      0x00,0x00,0x00,0x00
000988  00000018          DCB      0x00,0x00,0x00,0x18
00098c  3c7effff          DCB      0x3c,0x7e,0xff,0xff
000990  7e18183c          DCB      0x7e,0x18,0x18,0x3c
000994  00000000          DCB      0x00,0x00,0x00,0x00
000998  00000000          DCB      0x00,0x00,0x00,0x00
00099c  0000183c          DCB      0x00,0x00,0x18,0x3c
0009a0  3c180000          DCB      0x3c,0x18,0x00,0x00
0009a4  00000000          DCB      0x00,0x00,0x00,0x00
0009a8  ffffffff          DCB      0xff,0xff,0xff,0xff
0009ac  ffffe7c3          DCB      0xff,0xff,0xe7,0xc3
0009b0  c3e7ffff          DCB      0xc3,0xe7,0xff,0xff
0009b4  ffffffff          DCB      0xff,0xff,0xff,0xff
0009b8  00000000          DCB      0x00,0x00,0x00,0x00
0009bc  003c6642          DCB      0x00,0x3c,0x66,0x42
0009c0  42663c00          DCB      0x42,0x66,0x3c,0x00
0009c4  00000000          DCB      0x00,0x00,0x00,0x00
0009c8  ffffffff          DCB      0xff,0xff,0xff,0xff
0009cc  ffc399bd          DCB      0xff,0xc3,0x99,0xbd
0009d0  bd99c3ff          DCB      0xbd,0x99,0xc3,0xff
0009d4  ffffffff          DCB      0xff,0xff,0xff,0xff
0009d8  00001e0e          DCB      0x00,0x00,0x1e,0x0e
0009dc  1a3278cc          DCB      0x1a,0x32,0x78,0xcc
0009e0  cccccc78          DCB      0xcc,0xcc,0xcc,0x78
0009e4  00000000          DCB      0x00,0x00,0x00,0x00
0009e8  00003c66          DCB      0x00,0x00,0x3c,0x66
0009ec  6666663c          DCB      0x66,0x66,0x66,0x3c
0009f0  187e1818          DCB      0x18,0x7e,0x18,0x18
0009f4  00000000          DCB      0x00,0x00,0x00,0x00
0009f8  00003f33          DCB      0x00,0x00,0x3f,0x33
0009fc  3f303030          DCB      0x3f,0x30,0x30,0x30
000a00  3070f0e0          DCB      0x30,0x70,0xf0,0xe0
000a04  00000000          DCB      0x00,0x00,0x00,0x00
000a08  00007f63          DCB      0x00,0x00,0x7f,0x63
000a0c  7f636363          DCB      0x7f,0x63,0x63,0x63
000a10  6367e7e6          DCB      0x63,0x67,0xe7,0xe6
000a14  c0000000          DCB      0xc0,0x00,0x00,0x00
000a18  00000018          DCB      0x00,0x00,0x00,0x18
000a1c  18db3ce7          DCB      0x18,0xdb,0x3c,0xe7
000a20  3cdb1818          DCB      0x3c,0xdb,0x18,0x18
000a24  00000000          DCB      0x00,0x00,0x00,0x00
000a28  0080c0e0          DCB      0x00,0x80,0xc0,0xe0
000a2c  f0f8fef8          DCB      0xf0,0xf8,0xfe,0xf8
000a30  f0e0c080          DCB      0xf0,0xe0,0xc0,0x80
000a34  00000000          DCB      0x00,0x00,0x00,0x00
000a38  0002060e          DCB      0x00,0x02,0x06,0x0e
000a3c  1e3efe3e          DCB      0x1e,0x3e,0xfe,0x3e
000a40  1e0e0602          DCB      0x1e,0x0e,0x06,0x02
000a44  00000000          DCB      0x00,0x00,0x00,0x00
000a48  0000183c          DCB      0x00,0x00,0x18,0x3c
000a4c  7e181818          DCB      0x7e,0x18,0x18,0x18
000a50  187e3c18          DCB      0x18,0x7e,0x3c,0x18
000a54  00000000          DCB      0x00,0x00,0x00,0x00
000a58  00006666          DCB      0x00,0x00,0x66,0x66
000a5c  66666666          DCB      0x66,0x66,0x66,0x66
000a60  66006666          DCB      0x66,0x00,0x66,0x66
000a64  00000000          DCB      0x00,0x00,0x00,0x00
000a68  00007fdb          DCB      0x00,0x00,0x7f,0xdb
000a6c  dbdb7b1b          DCB      0xdb,0xdb,0x7b,0x1b
000a70  1b1b1b1b          DCB      0x1b,0x1b,0x1b,0x1b
000a74  00000000          DCB      0x00,0x00,0x00,0x00
000a78  007cc660          DCB      0x00,0x7c,0xc6,0x60
000a7c  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
000a80  6c380cc6          DCB      0x6c,0x38,0x0c,0xc6
000a84  7c000000          DCB      0x7c,0x00,0x00,0x00
000a88  00000000          DCB      0x00,0x00,0x00,0x00
000a8c  00000000          DCB      0x00,0x00,0x00,0x00
000a90  fefefefe          DCB      0xfe,0xfe,0xfe,0xfe
000a94  00000000          DCB      0x00,0x00,0x00,0x00
000a98  0000183c          DCB      0x00,0x00,0x18,0x3c
000a9c  7e181818          DCB      0x7e,0x18,0x18,0x18
000aa0  187e3c18          DCB      0x18,0x7e,0x3c,0x18
000aa4  7e000000          DCB      0x7e,0x00,0x00,0x00
000aa8  0000183c          DCB      0x00,0x00,0x18,0x3c
000aac  7e181818          DCB      0x7e,0x18,0x18,0x18
000ab0  18181818          DCB      0x18,0x18,0x18,0x18
000ab4  00000000          DCB      0x00,0x00,0x00,0x00
000ab8  00001818          DCB      0x00,0x00,0x18,0x18
000abc  18181818          DCB      0x18,0x18,0x18,0x18
000ac0  187e3c18          DCB      0x18,0x7e,0x3c,0x18
000ac4  00000000          DCB      0x00,0x00,0x00,0x00
000ac8  00000000          DCB      0x00,0x00,0x00,0x00
000acc  00180cfe          DCB      0x00,0x18,0x0c,0xfe
000ad0  0c180000          DCB      0x0c,0x18,0x00,0x00
000ad4  00000000          DCB      0x00,0x00,0x00,0x00
000ad8  00000000          DCB      0x00,0x00,0x00,0x00
000adc  003060fe          DCB      0x00,0x30,0x60,0xfe
000ae0  60300000          DCB      0x60,0x30,0x00,0x00
000ae4  00000000          DCB      0x00,0x00,0x00,0x00
000ae8  00000000          DCB      0x00,0x00,0x00,0x00
000aec  00c0c0c0          DCB      0x00,0xc0,0xc0,0xc0
000af0  c0fe0000          DCB      0xc0,0xfe,0x00,0x00
000af4  00000000          DCB      0x00,0x00,0x00,0x00
000af8  00000000          DCB      0x00,0x00,0x00,0x00
000afc  00286cfe          DCB      0x00,0x28,0x6c,0xfe
000b00  6c280000          DCB      0x6c,0x28,0x00,0x00
000b04  00000000          DCB      0x00,0x00,0x00,0x00
000b08  00000000          DCB      0x00,0x00,0x00,0x00
000b0c  1038387c          DCB      0x10,0x38,0x38,0x7c
000b10  7cfefe00          DCB      0x7c,0xfe,0xfe,0x00
000b14  00000000          DCB      0x00,0x00,0x00,0x00
000b18  00000000          DCB      0x00,0x00,0x00,0x00
000b1c  fefe7c7c          DCB      0xfe,0xfe,0x7c,0x7c
000b20  38381000          DCB      0x38,0x38,0x10,0x00
000b24  00000000          DCB      0x00,0x00,0x00,0x00
000b28  00000000          DCB      0x00,0x00,0x00,0x00
000b2c  00000000          DCB      0x00,0x00,0x00,0x00
000b30  00000000          DCB      0x00,0x00,0x00,0x00
000b34  00000000          DCB      0x00,0x00,0x00,0x00
000b38  0000183c          DCB      0x00,0x00,0x18,0x3c
000b3c  3c3c1818          DCB      0x3c,0x3c,0x18,0x18
000b40  18001818          DCB      0x18,0x00,0x18,0x18
000b44  00000000          DCB      0x00,0x00,0x00,0x00
000b48  00666666          DCB      0x00,0x66,0x66,0x66
000b4c  24000000          DCB      0x24,0x00,0x00,0x00
000b50  00000000          DCB      0x00,0x00,0x00,0x00
000b54  00000000          DCB      0x00,0x00,0x00,0x00
000b58  0000006c          DCB      0x00,0x00,0x00,0x6c
000b5c  6cfe6c6c          DCB      0x6c,0xfe,0x6c,0x6c
000b60  6cfe6c6c          DCB      0x6c,0xfe,0x6c,0x6c
000b64  00000000          DCB      0x00,0x00,0x00,0x00
000b68  18187cc6          DCB      0x18,0x18,0x7c,0xc6
000b6c  c2c07c06          DCB      0xc2,0xc0,0x7c,0x06
000b70  86c67c18          DCB      0x86,0xc6,0x7c,0x18
000b74  18000000          DCB      0x18,0x00,0x00,0x00
000b78  00000000          DCB      0x00,0x00,0x00,0x00
000b7c  c2c60c18          DCB      0xc2,0xc6,0x0c,0x18
000b80  3060c686          DCB      0x30,0x60,0xc6,0x86
000b84  00000000          DCB      0x00,0x00,0x00,0x00
000b88  0000386c          DCB      0x00,0x00,0x38,0x6c
000b8c  6c3876dc          DCB      0x6c,0x38,0x76,0xdc
000b90  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
000b94  00000000          DCB      0x00,0x00,0x00,0x00
000b98  00303030          DCB      0x00,0x30,0x30,0x30
000b9c  60000000          DCB      0x60,0x00,0x00,0x00
000ba0  00000000          DCB      0x00,0x00,0x00,0x00
000ba4  00000000          DCB      0x00,0x00,0x00,0x00
000ba8  00000c18          DCB      0x00,0x00,0x0c,0x18
000bac  30303030          DCB      0x30,0x30,0x30,0x30
000bb0  3030180c          DCB      0x30,0x30,0x18,0x0c
000bb4  00000000          DCB      0x00,0x00,0x00,0x00
000bb8  00003018          DCB      0x00,0x00,0x30,0x18
000bbc  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000bc0  0c0c1830          DCB      0x0c,0x0c,0x18,0x30
000bc4  00000000          DCB      0x00,0x00,0x00,0x00
000bc8  00000000          DCB      0x00,0x00,0x00,0x00
000bcc  00663cff          DCB      0x00,0x66,0x3c,0xff
000bd0  3c660000          DCB      0x3c,0x66,0x00,0x00
000bd4  00000000          DCB      0x00,0x00,0x00,0x00
000bd8  00000000          DCB      0x00,0x00,0x00,0x00
000bdc  0018187e          DCB      0x00,0x18,0x18,0x7e
000be0  18180000          DCB      0x18,0x18,0x00,0x00
000be4  00000000          DCB      0x00,0x00,0x00,0x00
000be8  00000000          DCB      0x00,0x00,0x00,0x00
000bec  00000000          DCB      0x00,0x00,0x00,0x00
000bf0  00181818          DCB      0x00,0x18,0x18,0x18
000bf4  30000000          DCB      0x30,0x00,0x00,0x00
000bf8  00000000          DCB      0x00,0x00,0x00,0x00
000bfc  000000fe          DCB      0x00,0x00,0x00,0xfe
000c00  00000000          DCB      0x00,0x00,0x00,0x00
000c04  00000000          DCB      0x00,0x00,0x00,0x00
000c08  00000000          DCB      0x00,0x00,0x00,0x00
000c0c  00000000          DCB      0x00,0x00,0x00,0x00
000c10  00001818          DCB      0x00,0x00,0x18,0x18
000c14  00000000          DCB      0x00,0x00,0x00,0x00
000c18  00000000          DCB      0x00,0x00,0x00,0x00
000c1c  02060c18          DCB      0x02,0x06,0x0c,0x18
000c20  3060c080          DCB      0x30,0x60,0xc0,0x80
000c24  00000000          DCB      0x00,0x00,0x00,0x00
000c28  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000c2c  c6ced6d6          DCB      0xc6,0xce,0xd6,0xd6
000c30  e6c6c67c          DCB      0xe6,0xc6,0xc6,0x7c
000c34  00000000          DCB      0x00,0x00,0x00,0x00
000c38  00001838          DCB      0x00,0x00,0x18,0x38
000c3c  78181818          DCB      0x78,0x18,0x18,0x18
000c40  1818187e          DCB      0x18,0x18,0x18,0x7e
000c44  00000000          DCB      0x00,0x00,0x00,0x00
000c48  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000c4c  060c1830          DCB      0x06,0x0c,0x18,0x30
000c50  60c0c6fe          DCB      0x60,0xc0,0xc6,0xfe
000c54  00000000          DCB      0x00,0x00,0x00,0x00
000c58  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000c5c  06063c06          DCB      0x06,0x06,0x3c,0x06
000c60  0606c67c          DCB      0x06,0x06,0xc6,0x7c
000c64  00000000          DCB      0x00,0x00,0x00,0x00
000c68  00000c1c          DCB      0x00,0x00,0x0c,0x1c
000c6c  3c6cccfe          DCB      0x3c,0x6c,0xcc,0xfe
000c70  0c0c0c1e          DCB      0x0c,0x0c,0x0c,0x1e
000c74  00000000          DCB      0x00,0x00,0x00,0x00
000c78  0000fec0          DCB      0x00,0x00,0xfe,0xc0
000c7c  c0c0fc0e          DCB      0xc0,0xc0,0xfc,0x0e
000c80  0606c67c          DCB      0x06,0x06,0xc6,0x7c
000c84  00000000          DCB      0x00,0x00,0x00,0x00
000c88  00003860          DCB      0x00,0x00,0x38,0x60
000c8c  c0c0fcc6          DCB      0xc0,0xc0,0xfc,0xc6
000c90  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
000c94  00000000          DCB      0x00,0x00,0x00,0x00
000c98  0000fec6          DCB      0x00,0x00,0xfe,0xc6
000c9c  06060c18          DCB      0x06,0x06,0x0c,0x18
000ca0  30303030          DCB      0x30,0x30,0x30,0x30
000ca4  00000000          DCB      0x00,0x00,0x00,0x00
000ca8  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000cac  c6c67cc6          DCB      0xc6,0xc6,0x7c,0xc6
000cb0  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
000cb4  00000000          DCB      0x00,0x00,0x00,0x00
000cb8  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000cbc  c6c67e06          DCB      0xc6,0xc6,0x7e,0x06
000cc0  06060c78          DCB      0x06,0x06,0x0c,0x78
000cc4  00000000          DCB      0x00,0x00,0x00,0x00
000cc8  00000000          DCB      0x00,0x00,0x00,0x00
000ccc  18180000          DCB      0x18,0x18,0x00,0x00
000cd0  00181800          DCB      0x00,0x18,0x18,0x00
000cd4  00000000          DCB      0x00,0x00,0x00,0x00
000cd8  00000000          DCB      0x00,0x00,0x00,0x00
000cdc  18180000          DCB      0x18,0x18,0x00,0x00
000ce0  00181830          DCB      0x00,0x18,0x18,0x30
000ce4  00000000          DCB      0x00,0x00,0x00,0x00
000ce8  00000006          DCB      0x00,0x00,0x00,0x06
000cec  0c183060          DCB      0x0c,0x18,0x30,0x60
000cf0  30180c06          DCB      0x30,0x18,0x0c,0x06
000cf4  00000000          DCB      0x00,0x00,0x00,0x00
000cf8  00000000          DCB      0x00,0x00,0x00,0x00
000cfc  0000fe00          DCB      0x00,0x00,0xfe,0x00
000d00  00fe0000          DCB      0x00,0xfe,0x00,0x00
000d04  00000000          DCB      0x00,0x00,0x00,0x00
000d08  00000060          DCB      0x00,0x00,0x00,0x60
000d0c  30180c06          DCB      0x30,0x18,0x0c,0x06
000d10  0c183060          DCB      0x0c,0x18,0x30,0x60
000d14  00000000          DCB      0x00,0x00,0x00,0x00
000d18  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000d1c  c60c1818          DCB      0xc6,0x0c,0x18,0x18
000d20  18001818          DCB      0x18,0x00,0x18,0x18
000d24  00000000          DCB      0x00,0x00,0x00,0x00
000d28  0000007c          DCB      0x00,0x00,0x00,0x7c
000d2c  c6c6dede          DCB      0xc6,0xc6,0xde,0xde
000d30  dedcc07c          DCB      0xde,0xdc,0xc0,0x7c
000d34  00000000          DCB      0x00,0x00,0x00,0x00
000d38  00001038          DCB      0x00,0x00,0x10,0x38
000d3c  6cc6c6fe          DCB      0x6c,0xc6,0xc6,0xfe
000d40  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000d44  00000000          DCB      0x00,0x00,0x00,0x00
000d48  0000fc66          DCB      0x00,0x00,0xfc,0x66
000d4c  66667c66          DCB      0x66,0x66,0x7c,0x66
000d50  666666fc          DCB      0x66,0x66,0x66,0xfc
000d54  00000000          DCB      0x00,0x00,0x00,0x00
000d58  00003c66          DCB      0x00,0x00,0x3c,0x66
000d5c  c2c0c0c0          DCB      0xc2,0xc0,0xc0,0xc0
000d60  c0c2663c          DCB      0xc0,0xc2,0x66,0x3c
000d64  00000000          DCB      0x00,0x00,0x00,0x00
000d68  0000f86c          DCB      0x00,0x00,0xf8,0x6c
000d6c  66666666          DCB      0x66,0x66,0x66,0x66
000d70  66666cf8          DCB      0x66,0x66,0x6c,0xf8
000d74  00000000          DCB      0x00,0x00,0x00,0x00
000d78  0000fe66          DCB      0x00,0x00,0xfe,0x66
000d7c  62687868          DCB      0x62,0x68,0x78,0x68
000d80  606266fe          DCB      0x60,0x62,0x66,0xfe
000d84  00000000          DCB      0x00,0x00,0x00,0x00
000d88  0000fe66          DCB      0x00,0x00,0xfe,0x66
000d8c  62687868          DCB      0x62,0x68,0x78,0x68
000d90  606060f0          DCB      0x60,0x60,0x60,0xf0
000d94  00000000          DCB      0x00,0x00,0x00,0x00
000d98  00003c66          DCB      0x00,0x00,0x3c,0x66
000d9c  c2c0c0de          DCB      0xc2,0xc0,0xc0,0xde
000da0  c6c6663a          DCB      0xc6,0xc6,0x66,0x3a
000da4  00000000          DCB      0x00,0x00,0x00,0x00
000da8  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
000dac  c6c6fec6          DCB      0xc6,0xc6,0xfe,0xc6
000db0  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000db4  00000000          DCB      0x00,0x00,0x00,0x00
000db8  00003c18          DCB      0x00,0x00,0x3c,0x18
000dbc  18181818          DCB      0x18,0x18,0x18,0x18
000dc0  1818183c          DCB      0x18,0x18,0x18,0x3c
000dc4  00000000          DCB      0x00,0x00,0x00,0x00
000dc8  00001e0c          DCB      0x00,0x00,0x1e,0x0c
000dcc  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000dd0  cccccc78          DCB      0xcc,0xcc,0xcc,0x78
000dd4  00000000          DCB      0x00,0x00,0x00,0x00
000dd8  0000e666          DCB      0x00,0x00,0xe6,0x66
000ddc  6c6c7878          DCB      0x6c,0x6c,0x78,0x78
000de0  6c6666e6          DCB      0x6c,0x66,0x66,0xe6
000de4  00000000          DCB      0x00,0x00,0x00,0x00
000de8  0000f060          DCB      0x00,0x00,0xf0,0x60
000dec  60606060          DCB      0x60,0x60,0x60,0x60
000df0  606266fe          DCB      0x60,0x62,0x66,0xfe
000df4  00000000          DCB      0x00,0x00,0x00,0x00
000df8  0000c6ee          DCB      0x00,0x00,0xc6,0xee
000dfc  fefed6c6          DCB      0xfe,0xfe,0xd6,0xc6
000e00  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e04  00000000          DCB      0x00,0x00,0x00,0x00
000e08  0000c6e6          DCB      0x00,0x00,0xc6,0xe6
000e0c  f6fedece          DCB      0xf6,0xfe,0xde,0xce
000e10  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e14  00000000          DCB      0x00,0x00,0x00,0x00
000e18  0000386c          DCB      0x00,0x00,0x38,0x6c
000e1c  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e20  c6c66c38          DCB      0xc6,0xc6,0x6c,0x38
000e24  00000000          DCB      0x00,0x00,0x00,0x00
000e28  0000fc66          DCB      0x00,0x00,0xfc,0x66
000e2c  66667c60          DCB      0x66,0x66,0x7c,0x60
000e30  606060f0          DCB      0x60,0x60,0x60,0xf0
000e34  00000000          DCB      0x00,0x00,0x00,0x00
000e38  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000e3c  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e40  c6d6de7c          DCB      0xc6,0xd6,0xde,0x7c
000e44  0c0e0000          DCB      0x0c,0x0e,0x00,0x00
000e48  0000fc66          DCB      0x00,0x00,0xfc,0x66
000e4c  66667c6c          DCB      0x66,0x66,0x7c,0x6c
000e50  666666e6          DCB      0x66,0x66,0x66,0xe6
000e54  00000000          DCB      0x00,0x00,0x00,0x00
000e58  00007cc6          DCB      0x00,0x00,0x7c,0xc6
000e5c  c660380c          DCB      0xc6,0x60,0x38,0x0c
000e60  06c6c67c          DCB      0x06,0xc6,0xc6,0x7c
000e64  00000000          DCB      0x00,0x00,0x00,0x00
000e68  00007e7e          DCB      0x00,0x00,0x7e,0x7e
000e6c  5a181818          DCB      0x5a,0x18,0x18,0x18
000e70  1818183c          DCB      0x18,0x18,0x18,0x3c
000e74  00000000          DCB      0x00,0x00,0x00,0x00
000e78  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
000e7c  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e80  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
000e84  00000000          DCB      0x00,0x00,0x00,0x00
000e88  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
000e8c  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
000e90  c66c3810          DCB      0xc6,0x6c,0x38,0x10
000e94  00000000          DCB      0x00,0x00,0x00,0x00
000e98  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
000e9c  c6c6c6d6          DCB      0xc6,0xc6,0xc6,0xd6
000ea0  d6fe6c6c          DCB      0xd6,0xfe,0x6c,0x6c
000ea4  00000000          DCB      0x00,0x00,0x00,0x00
000ea8  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
000eac  6c6c3838          DCB      0x6c,0x6c,0x38,0x38
000eb0  6c6cc6c6          DCB      0x6c,0x6c,0xc6,0xc6
000eb4  00000000          DCB      0x00,0x00,0x00,0x00
000eb8  00006666          DCB      0x00,0x00,0x66,0x66
000ebc  66663c18          DCB      0x66,0x66,0x3c,0x18
000ec0  1818183c          DCB      0x18,0x18,0x18,0x3c
000ec4  00000000          DCB      0x00,0x00,0x00,0x00
000ec8  0000fec6          DCB      0x00,0x00,0xfe,0xc6
000ecc  860c1830          DCB      0x86,0x0c,0x18,0x30
000ed0  60c2c6fe          DCB      0x60,0xc2,0xc6,0xfe
000ed4  00000000          DCB      0x00,0x00,0x00,0x00
000ed8  00003c30          DCB      0x00,0x00,0x3c,0x30
000edc  30303030          DCB      0x30,0x30,0x30,0x30
000ee0  3030303c          DCB      0x30,0x30,0x30,0x3c
000ee4  00000000          DCB      0x00,0x00,0x00,0x00
000ee8  00000080          DCB      0x00,0x00,0x00,0x80
000eec  c0e07038          DCB      0xc0,0xe0,0x70,0x38
000ef0  1c0e0602          DCB      0x1c,0x0e,0x06,0x02
000ef4  00000000          DCB      0x00,0x00,0x00,0x00
000ef8  00003c0c          DCB      0x00,0x00,0x3c,0x0c
000efc  0c0c0c0c          DCB      0x0c,0x0c,0x0c,0x0c
000f00  0c0c0c3c          DCB      0x0c,0x0c,0x0c,0x3c
000f04  00000000          DCB      0x00,0x00,0x00,0x00
000f08  10386cc6          DCB      0x10,0x38,0x6c,0xc6
000f0c  00000000          DCB      0x00,0x00,0x00,0x00
000f10  00000000          DCB      0x00,0x00,0x00,0x00
000f14  00000000          DCB      0x00,0x00,0x00,0x00
000f18  00000000          DCB      0x00,0x00,0x00,0x00
000f1c  00000000          DCB      0x00,0x00,0x00,0x00
000f20  00000000          DCB      0x00,0x00,0x00,0x00
000f24  00ff0000          DCB      0x00,0xff,0x00,0x00
000f28  30301800          DCB      0x30,0x30,0x18,0x00
000f2c  00000000          DCB      0x00,0x00,0x00,0x00
000f30  00000000          DCB      0x00,0x00,0x00,0x00
000f34  00000000          DCB      0x00,0x00,0x00,0x00
000f38  00000000          DCB      0x00,0x00,0x00,0x00
000f3c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
000f40  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
000f44  00000000          DCB      0x00,0x00,0x00,0x00
000f48  0000e060          DCB      0x00,0x00,0xe0,0x60
000f4c  60786c66          DCB      0x60,0x78,0x6c,0x66
000f50  666666dc          DCB      0x66,0x66,0x66,0xdc
000f54  00000000          DCB      0x00,0x00,0x00,0x00
000f58  00000000          DCB      0x00,0x00,0x00,0x00
000f5c  007cc6c0          DCB      0x00,0x7c,0xc6,0xc0
000f60  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
000f64  00000000          DCB      0x00,0x00,0x00,0x00
000f68  00001c0c          DCB      0x00,0x00,0x1c,0x0c
000f6c  0c3c6ccc          DCB      0x0c,0x3c,0x6c,0xcc
000f70  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
000f74  00000000          DCB      0x00,0x00,0x00,0x00
000f78  00000000          DCB      0x00,0x00,0x00,0x00
000f7c  007cc6fe          DCB      0x00,0x7c,0xc6,0xfe
000f80  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
000f84  00000000          DCB      0x00,0x00,0x00,0x00
000f88  0000386c          DCB      0x00,0x00,0x38,0x6c
000f8c  6460f060          DCB      0x64,0x60,0xf0,0x60
000f90  606060f0          DCB      0x60,0x60,0x60,0xf0
000f94  00000000          DCB      0x00,0x00,0x00,0x00
000f98  00000000          DCB      0x00,0x00,0x00,0x00
000f9c  0076cccc          DCB      0x00,0x76,0xcc,0xcc
000fa0  cccccc7c          DCB      0xcc,0xcc,0xcc,0x7c
000fa4  0ccc7800          DCB      0x0c,0xcc,0x78,0x00
000fa8  0000e060          DCB      0x00,0x00,0xe0,0x60
000fac  606c7666          DCB      0x60,0x6c,0x76,0x66
000fb0  666666e6          DCB      0x66,0x66,0x66,0xe6
000fb4  00000000          DCB      0x00,0x00,0x00,0x00
000fb8  00001818          DCB      0x00,0x00,0x18,0x18
000fbc  00381818          DCB      0x00,0x38,0x18,0x18
000fc0  1818183c          DCB      0x18,0x18,0x18,0x3c
000fc4  00000000          DCB      0x00,0x00,0x00,0x00
000fc8  00000606          DCB      0x00,0x00,0x06,0x06
000fcc  000e0606          DCB      0x00,0x0e,0x06,0x06
000fd0  06060606          DCB      0x06,0x06,0x06,0x06
000fd4  66663c00          DCB      0x66,0x66,0x3c,0x00
000fd8  0000e060          DCB      0x00,0x00,0xe0,0x60
000fdc  60666c78          DCB      0x60,0x66,0x6c,0x78
000fe0  786c66e6          DCB      0x78,0x6c,0x66,0xe6
000fe4  00000000          DCB      0x00,0x00,0x00,0x00
000fe8  00003818          DCB      0x00,0x00,0x38,0x18
000fec  18181818          DCB      0x18,0x18,0x18,0x18
000ff0  1818183c          DCB      0x18,0x18,0x18,0x3c
000ff4  00000000          DCB      0x00,0x00,0x00,0x00
000ff8  00000000          DCB      0x00,0x00,0x00,0x00
000ffc  00ecfed6          DCB      0x00,0xec,0xfe,0xd6
001000  d6d6d6d6          DCB      0xd6,0xd6,0xd6,0xd6
001004  00000000          DCB      0x00,0x00,0x00,0x00
001008  00000000          DCB      0x00,0x00,0x00,0x00
00100c  00dc6666          DCB      0x00,0xdc,0x66,0x66
001010  66666666          DCB      0x66,0x66,0x66,0x66
001014  00000000          DCB      0x00,0x00,0x00,0x00
001018  00000000          DCB      0x00,0x00,0x00,0x00
00101c  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
001020  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
001024  00000000          DCB      0x00,0x00,0x00,0x00
001028  00000000          DCB      0x00,0x00,0x00,0x00
00102c  00dc6666          DCB      0x00,0xdc,0x66,0x66
001030  6666667c          DCB      0x66,0x66,0x66,0x7c
001034  6060f000          DCB      0x60,0x60,0xf0,0x00
001038  00000000          DCB      0x00,0x00,0x00,0x00
00103c  0076cccc          DCB      0x00,0x76,0xcc,0xcc
001040  cccccc7c          DCB      0xcc,0xcc,0xcc,0x7c
001044  0c0c1e00          DCB      0x0c,0x0c,0x1e,0x00
001048  00000000          DCB      0x00,0x00,0x00,0x00
00104c  00dc7662          DCB      0x00,0xdc,0x76,0x62
001050  606060f0          DCB      0x60,0x60,0x60,0xf0
001054  00000000          DCB      0x00,0x00,0x00,0x00
001058  00000000          DCB      0x00,0x00,0x00,0x00
00105c  007cc660          DCB      0x00,0x7c,0xc6,0x60
001060  380cc67c          DCB      0x38,0x0c,0xc6,0x7c
001064  00000000          DCB      0x00,0x00,0x00,0x00
001068  00001030          DCB      0x00,0x00,0x10,0x30
00106c  30fc3030          DCB      0x30,0xfc,0x30,0x30
001070  3030361c          DCB      0x30,0x30,0x36,0x1c
001074  00000000          DCB      0x00,0x00,0x00,0x00
001078  00000000          DCB      0x00,0x00,0x00,0x00
00107c  00cccccc          DCB      0x00,0xcc,0xcc,0xcc
001080  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001084  00000000          DCB      0x00,0x00,0x00,0x00
001088  00000000          DCB      0x00,0x00,0x00,0x00
00108c  00666666          DCB      0x00,0x66,0x66,0x66
001090  66663c18          DCB      0x66,0x66,0x3c,0x18
001094  00000000          DCB      0x00,0x00,0x00,0x00
001098  00000000          DCB      0x00,0x00,0x00,0x00
00109c  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
0010a0  d6d6fe6c          DCB      0xd6,0xd6,0xfe,0x6c
0010a4  00000000          DCB      0x00,0x00,0x00,0x00
0010a8  00000000          DCB      0x00,0x00,0x00,0x00
0010ac  00c66c38          DCB      0x00,0xc6,0x6c,0x38
0010b0  38386cc6          DCB      0x38,0x38,0x6c,0xc6
0010b4  00000000          DCB      0x00,0x00,0x00,0x00
0010b8  00000000          DCB      0x00,0x00,0x00,0x00
0010bc  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
0010c0  c6c6c67e          DCB      0xc6,0xc6,0xc6,0x7e
0010c4  060cf800          DCB      0x06,0x0c,0xf8,0x00
0010c8  00000000          DCB      0x00,0x00,0x00,0x00
0010cc  00fecc18          DCB      0x00,0xfe,0xcc,0x18
0010d0  3060c6fe          DCB      0x30,0x60,0xc6,0xfe
0010d4  00000000          DCB      0x00,0x00,0x00,0x00
0010d8  00000e18          DCB      0x00,0x00,0x0e,0x18
0010dc  18187018          DCB      0x18,0x18,0x70,0x18
0010e0  1818180e          DCB      0x18,0x18,0x18,0x0e
0010e4  00000000          DCB      0x00,0x00,0x00,0x00
0010e8  00001818          DCB      0x00,0x00,0x18,0x18
0010ec  18180018          DCB      0x18,0x18,0x00,0x18
0010f0  18181818          DCB      0x18,0x18,0x18,0x18
0010f4  00000000          DCB      0x00,0x00,0x00,0x00
0010f8  00007018          DCB      0x00,0x00,0x70,0x18
0010fc  18180e18          DCB      0x18,0x18,0x0e,0x18
001100  18181870          DCB      0x18,0x18,0x18,0x70
001104  00000000          DCB      0x00,0x00,0x00,0x00
001108  000076dc          DCB      0x00,0x00,0x76,0xdc
00110c  00000000          DCB      0x00,0x00,0x00,0x00
001110  00000000          DCB      0x00,0x00,0x00,0x00
001114  00000000          DCB      0x00,0x00,0x00,0x00
001118  00000000          DCB      0x00,0x00,0x00,0x00
00111c  10386cc6          DCB      0x10,0x38,0x6c,0xc6
001120  c6c6fe00          DCB      0xc6,0xc6,0xfe,0x00
001124  00000000          DCB      0x00,0x00,0x00,0x00
001128  00003c66          DCB      0x00,0x00,0x3c,0x66
00112c  c2c0c0c0          DCB      0xc2,0xc0,0xc0,0xc0
001130  c2663c0c          DCB      0xc2,0x66,0x3c,0x0c
001134  067c0000          DCB      0x06,0x7c,0x00,0x00
001138  0000cccc          DCB      0x00,0x00,0xcc,0xcc
00113c  00cccccc          DCB      0x00,0xcc,0xcc,0xcc
001140  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001144  00000000          DCB      0x00,0x00,0x00,0x00
001148  000c1830          DCB      0x00,0x0c,0x18,0x30
00114c  007cc6fe          DCB      0x00,0x7c,0xc6,0xfe
001150  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
001154  00000000          DCB      0x00,0x00,0x00,0x00
001158  0010386c          DCB      0x00,0x10,0x38,0x6c
00115c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
001160  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001164  00000000          DCB      0x00,0x00,0x00,0x00
001168  0000cccc          DCB      0x00,0x00,0xcc,0xcc
00116c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
001170  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001174  00000000          DCB      0x00,0x00,0x00,0x00
001178  00603018          DCB      0x00,0x60,0x30,0x18
00117c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
001180  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001184  00000000          DCB      0x00,0x00,0x00,0x00
001188  00386c38          DCB      0x00,0x38,0x6c,0x38
00118c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
001190  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001194  00000000          DCB      0x00,0x00,0x00,0x00
001198  00000000          DCB      0x00,0x00,0x00,0x00
00119c  3c666060          DCB      0x3c,0x66,0x60,0x60
0011a0  663c0c06          DCB      0x66,0x3c,0x0c,0x06
0011a4  3c000000          DCB      0x3c,0x00,0x00,0x00
0011a8  0010386c          DCB      0x00,0x10,0x38,0x6c
0011ac  007cc6fe          DCB      0x00,0x7c,0xc6,0xfe
0011b0  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
0011b4  00000000          DCB      0x00,0x00,0x00,0x00
0011b8  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
0011bc  007cc6fe          DCB      0x00,0x7c,0xc6,0xfe
0011c0  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
0011c4  00000000          DCB      0x00,0x00,0x00,0x00
0011c8  00603018          DCB      0x00,0x60,0x30,0x18
0011cc  007cc6fe          DCB      0x00,0x7c,0xc6,0xfe
0011d0  c0c0c67c          DCB      0xc0,0xc0,0xc6,0x7c
0011d4  00000000          DCB      0x00,0x00,0x00,0x00
0011d8  00006666          DCB      0x00,0x00,0x66,0x66
0011dc  00381818          DCB      0x00,0x38,0x18,0x18
0011e0  1818183c          DCB      0x18,0x18,0x18,0x3c
0011e4  00000000          DCB      0x00,0x00,0x00,0x00
0011e8  00183c66          DCB      0x00,0x18,0x3c,0x66
0011ec  00381818          DCB      0x00,0x38,0x18,0x18
0011f0  1818183c          DCB      0x18,0x18,0x18,0x3c
0011f4  00000000          DCB      0x00,0x00,0x00,0x00
0011f8  00603018          DCB      0x00,0x60,0x30,0x18
0011fc  00381818          DCB      0x00,0x38,0x18,0x18
001200  1818183c          DCB      0x18,0x18,0x18,0x3c
001204  00000000          DCB      0x00,0x00,0x00,0x00
001208  00c6c610          DCB      0x00,0xc6,0xc6,0x10
00120c  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
001210  fec6c6c6          DCB      0xfe,0xc6,0xc6,0xc6
001214  00000000          DCB      0x00,0x00,0x00,0x00
001218  386c3800          DCB      0x38,0x6c,0x38,0x00
00121c  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
001220  fec6c6c6          DCB      0xfe,0xc6,0xc6,0xc6
001224  00000000          DCB      0x00,0x00,0x00,0x00
001228  18306000          DCB      0x18,0x30,0x60,0x00
00122c  fe66607c          DCB      0xfe,0x66,0x60,0x7c
001230  606066fe          DCB      0x60,0x60,0x66,0xfe
001234  00000000          DCB      0x00,0x00,0x00,0x00
001238  00000000          DCB      0x00,0x00,0x00,0x00
00123c  00cc7636          DCB      0x00,0xcc,0x76,0x36
001240  7ed8d86e          DCB      0x7e,0xd8,0xd8,0x6e
001244  00000000          DCB      0x00,0x00,0x00,0x00
001248  00003e6c          DCB      0x00,0x00,0x3e,0x6c
00124c  ccccfecc          DCB      0xcc,0xcc,0xfe,0xcc
001250  ccccccce          DCB      0xcc,0xcc,0xcc,0xce
001254  00000000          DCB      0x00,0x00,0x00,0x00
001258  0010386c          DCB      0x00,0x10,0x38,0x6c
00125c  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
001260  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
001264  00000000          DCB      0x00,0x00,0x00,0x00
001268  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
00126c  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
001270  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
001274  00000000          DCB      0x00,0x00,0x00,0x00
001278  00603018          DCB      0x00,0x60,0x30,0x18
00127c  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
001280  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
001284  00000000          DCB      0x00,0x00,0x00,0x00
001288  003078cc          DCB      0x00,0x30,0x78,0xcc
00128c  00cccccc          DCB      0x00,0xcc,0xcc,0xcc
001290  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001294  00000000          DCB      0x00,0x00,0x00,0x00
001298  00603018          DCB      0x00,0x60,0x30,0x18
00129c  00cccccc          DCB      0x00,0xcc,0xcc,0xcc
0012a0  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
0012a4  00000000          DCB      0x00,0x00,0x00,0x00
0012a8  0000c6c6          DCB      0x00,0x00,0xc6,0xc6
0012ac  00c6c6c6          DCB      0x00,0xc6,0xc6,0xc6
0012b0  c6c6c67e          DCB      0xc6,0xc6,0xc6,0x7e
0012b4  060c7800          DCB      0x06,0x0c,0x78,0x00
0012b8  00c6c600          DCB      0x00,0xc6,0xc6,0x00
0012bc  386cc6c6          DCB      0x38,0x6c,0xc6,0xc6
0012c0  c6c66c38          DCB      0xc6,0xc6,0x6c,0x38
0012c4  00000000          DCB      0x00,0x00,0x00,0x00
0012c8  00c6c600          DCB      0x00,0xc6,0xc6,0x00
0012cc  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
0012d0  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
0012d4  00000000          DCB      0x00,0x00,0x00,0x00
0012d8  0018183c          DCB      0x00,0x18,0x18,0x3c
0012dc  66606060          DCB      0x66,0x60,0x60,0x60
0012e0  663c1818          DCB      0x66,0x3c,0x18,0x18
0012e4  00000000          DCB      0x00,0x00,0x00,0x00
0012e8  00386c64          DCB      0x00,0x38,0x6c,0x64
0012ec  60f06060          DCB      0x60,0xf0,0x60,0x60
0012f0  6060e6fc          DCB      0x60,0x60,0xe6,0xfc
0012f4  00000000          DCB      0x00,0x00,0x00,0x00
0012f8  00006666          DCB      0x00,0x00,0x66,0x66
0012fc  3c187e18          DCB      0x3c,0x18,0x7e,0x18
001300  7e181818          DCB      0x7e,0x18,0x18,0x18
001304  00000000          DCB      0x00,0x00,0x00,0x00
001308  00f8cccc          DCB      0x00,0xf8,0xcc,0xcc
00130c  f8c4ccde          DCB      0xf8,0xc4,0xcc,0xde
001310  ccccccc6          DCB      0xcc,0xcc,0xcc,0xc6
001314  00000000          DCB      0x00,0x00,0x00,0x00
001318  000e1b18          DCB      0x00,0x0e,0x1b,0x18
00131c  18187e18          DCB      0x18,0x18,0x7e,0x18
001320  18181818          DCB      0x18,0x18,0x18,0x18
001324  d8700000          DCB      0xd8,0x70,0x00,0x00
001328  00183060          DCB      0x00,0x18,0x30,0x60
00132c  00780c7c          DCB      0x00,0x78,0x0c,0x7c
001330  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001334  00000000          DCB      0x00,0x00,0x00,0x00
001338  000c1830          DCB      0x00,0x0c,0x18,0x30
00133c  00381818          DCB      0x00,0x38,0x18,0x18
001340  1818183c          DCB      0x18,0x18,0x18,0x3c
001344  00000000          DCB      0x00,0x00,0x00,0x00
001348  00183060          DCB      0x00,0x18,0x30,0x60
00134c  007cc6c6          DCB      0x00,0x7c,0xc6,0xc6
001350  c6c6c67c          DCB      0xc6,0xc6,0xc6,0x7c
001354  00000000          DCB      0x00,0x00,0x00,0x00
001358  00183060          DCB      0x00,0x18,0x30,0x60
00135c  00cccccc          DCB      0x00,0xcc,0xcc,0xcc
001360  cccccc76          DCB      0xcc,0xcc,0xcc,0x76
001364  00000000          DCB      0x00,0x00,0x00,0x00
001368  000076dc          DCB      0x00,0x00,0x76,0xdc
00136c  00dc6666          DCB      0x00,0xdc,0x66,0x66
001370  66666666          DCB      0x66,0x66,0x66,0x66
001374  00000000          DCB      0x00,0x00,0x00,0x00
001378  76dc00c6          DCB      0x76,0xdc,0x00,0xc6
00137c  e6f6fede          DCB      0xe6,0xf6,0xfe,0xde
001380  cec6c6c6          DCB      0xce,0xc6,0xc6,0xc6
001384  00000000          DCB      0x00,0x00,0x00,0x00
001388  003c6c6c          DCB      0x00,0x3c,0x6c,0x6c
00138c  3e007e00          DCB      0x3e,0x00,0x7e,0x00
001390  00000000          DCB      0x00,0x00,0x00,0x00
001394  00000000          DCB      0x00,0x00,0x00,0x00
001398  00386c6c          DCB      0x00,0x38,0x6c,0x6c
00139c  38007c00          DCB      0x38,0x00,0x7c,0x00
0013a0  00000000          DCB      0x00,0x00,0x00,0x00
0013a4  00000000          DCB      0x00,0x00,0x00,0x00
0013a8  00003030          DCB      0x00,0x00,0x30,0x30
0013ac  00303060          DCB      0x00,0x30,0x30,0x60
0013b0  c0c6c67c          DCB      0xc0,0xc6,0xc6,0x7c
0013b4  00000000          DCB      0x00,0x00,0x00,0x00
0013b8  00000000          DCB      0x00,0x00,0x00,0x00
0013bc  0000fec0          DCB      0x00,0x00,0xfe,0xc0
0013c0  c0c0c000          DCB      0xc0,0xc0,0xc0,0x00
0013c4  00000000          DCB      0x00,0x00,0x00,0x00
0013c8  00000000          DCB      0x00,0x00,0x00,0x00
0013cc  0000fe06          DCB      0x00,0x00,0xfe,0x06
0013d0  06060600          DCB      0x06,0x06,0x06,0x00
0013d4  00000000          DCB      0x00,0x00,0x00,0x00
0013d8  00c0c0c2          DCB      0x00,0xc0,0xc0,0xc2
0013dc  c6cc1830          DCB      0xc6,0xcc,0x18,0x30
0013e0  60ce9306          DCB      0x60,0xce,0x93,0x06
0013e4  0c1f0000          DCB      0x0c,0x1f,0x00,0x00
0013e8  00c0c0c2          DCB      0x00,0xc0,0xc0,0xc2
0013ec  c6cc1830          DCB      0xc6,0xcc,0x18,0x30
0013f0  66ce9a3f          DCB      0x66,0xce,0x9a,0x3f
0013f4  060f0000          DCB      0x06,0x0f,0x00,0x00
0013f8  00001818          DCB      0x00,0x00,0x18,0x18
0013fc  00181818          DCB      0x00,0x18,0x18,0x18
001400  3c3c3c18          DCB      0x3c,0x3c,0x3c,0x18
001404  00000000          DCB      0x00,0x00,0x00,0x00
001408  00000000          DCB      0x00,0x00,0x00,0x00
00140c  003366cc          DCB      0x00,0x33,0x66,0xcc
001410  66330000          DCB      0x66,0x33,0x00,0x00
001414  00000000          DCB      0x00,0x00,0x00,0x00
001418  00000000          DCB      0x00,0x00,0x00,0x00
00141c  00cc6633          DCB      0x00,0xcc,0x66,0x33
001420  66cc0000          DCB      0x66,0xcc,0x00,0x00
001424  00000000          DCB      0x00,0x00,0x00,0x00
001428  11441144          DCB      0x11,0x44,0x11,0x44
00142c  11441144          DCB      0x11,0x44,0x11,0x44
001430  11441144          DCB      0x11,0x44,0x11,0x44
001434  11441144          DCB      0x11,0x44,0x11,0x44
001438  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
00143c  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
001440  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
001444  55aa55aa          DCB      0x55,0xaa,0x55,0xaa
001448  dd77dd77          DCB      0xdd,0x77,0xdd,0x77
00144c  dd77dd77          DCB      0xdd,0x77,0xdd,0x77
001450  dd77dd77          DCB      0xdd,0x77,0xdd,0x77
001454  dd77dd77          DCB      0xdd,0x77,0xdd,0x77
001458  18181818          DCB      0x18,0x18,0x18,0x18
00145c  18181818          DCB      0x18,0x18,0x18,0x18
001460  18181818          DCB      0x18,0x18,0x18,0x18
001464  18181818          DCB      0x18,0x18,0x18,0x18
001468  18181818          DCB      0x18,0x18,0x18,0x18
00146c  181818f8          DCB      0x18,0x18,0x18,0xf8
001470  18181818          DCB      0x18,0x18,0x18,0x18
001474  18181818          DCB      0x18,0x18,0x18,0x18
001478  18181818          DCB      0x18,0x18,0x18,0x18
00147c  18f818f8          DCB      0x18,0xf8,0x18,0xf8
001480  18181818          DCB      0x18,0x18,0x18,0x18
001484  18181818          DCB      0x18,0x18,0x18,0x18
001488  36363636          DCB      0x36,0x36,0x36,0x36
00148c  363636f6          DCB      0x36,0x36,0x36,0xf6
001490  36363636          DCB      0x36,0x36,0x36,0x36
001494  36363636          DCB      0x36,0x36,0x36,0x36
001498  00000000          DCB      0x00,0x00,0x00,0x00
00149c  000000fe          DCB      0x00,0x00,0x00,0xfe
0014a0  36363636          DCB      0x36,0x36,0x36,0x36
0014a4  36363636          DCB      0x36,0x36,0x36,0x36
0014a8  00000000          DCB      0x00,0x00,0x00,0x00
0014ac  00f818f8          DCB      0x00,0xf8,0x18,0xf8
0014b0  18181818          DCB      0x18,0x18,0x18,0x18
0014b4  18181818          DCB      0x18,0x18,0x18,0x18
0014b8  36363636          DCB      0x36,0x36,0x36,0x36
0014bc  36f606f6          DCB      0x36,0xf6,0x06,0xf6
0014c0  36363636          DCB      0x36,0x36,0x36,0x36
0014c4  36363636          DCB      0x36,0x36,0x36,0x36
0014c8  36363636          DCB      0x36,0x36,0x36,0x36
0014cc  36363636          DCB      0x36,0x36,0x36,0x36
0014d0  36363636          DCB      0x36,0x36,0x36,0x36
0014d4  36363636          DCB      0x36,0x36,0x36,0x36
0014d8  00000000          DCB      0x00,0x00,0x00,0x00
0014dc  00fe06f6          DCB      0x00,0xfe,0x06,0xf6
0014e0  36363636          DCB      0x36,0x36,0x36,0x36
0014e4  36363636          DCB      0x36,0x36,0x36,0x36
0014e8  36363636          DCB      0x36,0x36,0x36,0x36
0014ec  36f606fe          DCB      0x36,0xf6,0x06,0xfe
0014f0  00000000          DCB      0x00,0x00,0x00,0x00
0014f4  00000000          DCB      0x00,0x00,0x00,0x00
0014f8  36363636          DCB      0x36,0x36,0x36,0x36
0014fc  363636fe          DCB      0x36,0x36,0x36,0xfe
001500  00000000          DCB      0x00,0x00,0x00,0x00
001504  00000000          DCB      0x00,0x00,0x00,0x00
001508  18181818          DCB      0x18,0x18,0x18,0x18
00150c  18f818f8          DCB      0x18,0xf8,0x18,0xf8
001510  00000000          DCB      0x00,0x00,0x00,0x00
001514  00000000          DCB      0x00,0x00,0x00,0x00
001518  00000000          DCB      0x00,0x00,0x00,0x00
00151c  000000f8          DCB      0x00,0x00,0x00,0xf8
001520  18181818          DCB      0x18,0x18,0x18,0x18
001524  18181818          DCB      0x18,0x18,0x18,0x18
001528  18181818          DCB      0x18,0x18,0x18,0x18
00152c  1818181f          DCB      0x18,0x18,0x18,0x1f
001530  00000000          DCB      0x00,0x00,0x00,0x00
001534  00000000          DCB      0x00,0x00,0x00,0x00
001538  18181818          DCB      0x18,0x18,0x18,0x18
00153c  181818ff          DCB      0x18,0x18,0x18,0xff
001540  00000000          DCB      0x00,0x00,0x00,0x00
001544  00000000          DCB      0x00,0x00,0x00,0x00
001548  00000000          DCB      0x00,0x00,0x00,0x00
00154c  000000ff          DCB      0x00,0x00,0x00,0xff
001550  18181818          DCB      0x18,0x18,0x18,0x18
001554  18181818          DCB      0x18,0x18,0x18,0x18
001558  18181818          DCB      0x18,0x18,0x18,0x18
00155c  1818181f          DCB      0x18,0x18,0x18,0x1f
001560  18181818          DCB      0x18,0x18,0x18,0x18
001564  18181818          DCB      0x18,0x18,0x18,0x18
001568  00000000          DCB      0x00,0x00,0x00,0x00
00156c  000000ff          DCB      0x00,0x00,0x00,0xff
001570  00000000          DCB      0x00,0x00,0x00,0x00
001574  00000000          DCB      0x00,0x00,0x00,0x00
001578  18181818          DCB      0x18,0x18,0x18,0x18
00157c  181818ff          DCB      0x18,0x18,0x18,0xff
001580  18181818          DCB      0x18,0x18,0x18,0x18
001584  18181818          DCB      0x18,0x18,0x18,0x18
001588  18181818          DCB      0x18,0x18,0x18,0x18
00158c  181f181f          DCB      0x18,0x1f,0x18,0x1f
001590  18181818          DCB      0x18,0x18,0x18,0x18
001594  18181818          DCB      0x18,0x18,0x18,0x18
001598  36363636          DCB      0x36,0x36,0x36,0x36
00159c  36363637          DCB      0x36,0x36,0x36,0x37
0015a0  36363636          DCB      0x36,0x36,0x36,0x36
0015a4  36363636          DCB      0x36,0x36,0x36,0x36
0015a8  36363636          DCB      0x36,0x36,0x36,0x36
0015ac  3637303f          DCB      0x36,0x37,0x30,0x3f
0015b0  00000000          DCB      0x00,0x00,0x00,0x00
0015b4  00000000          DCB      0x00,0x00,0x00,0x00
0015b8  00000000          DCB      0x00,0x00,0x00,0x00
0015bc  003f3037          DCB      0x00,0x3f,0x30,0x37
0015c0  36363636          DCB      0x36,0x36,0x36,0x36
0015c4  36363636          DCB      0x36,0x36,0x36,0x36
0015c8  36363636          DCB      0x36,0x36,0x36,0x36
0015cc  36f700ff          DCB      0x36,0xf7,0x00,0xff
0015d0  00000000          DCB      0x00,0x00,0x00,0x00
0015d4  00000000          DCB      0x00,0x00,0x00,0x00
0015d8  00000000          DCB      0x00,0x00,0x00,0x00
0015dc  00ff00f7          DCB      0x00,0xff,0x00,0xf7
0015e0  36363636          DCB      0x36,0x36,0x36,0x36
0015e4  36363636          DCB      0x36,0x36,0x36,0x36
0015e8  36363636          DCB      0x36,0x36,0x36,0x36
0015ec  36373037          DCB      0x36,0x37,0x30,0x37
0015f0  36363636          DCB      0x36,0x36,0x36,0x36
0015f4  36363636          DCB      0x36,0x36,0x36,0x36
0015f8  00000000          DCB      0x00,0x00,0x00,0x00
0015fc  00ff00ff          DCB      0x00,0xff,0x00,0xff
001600  00000000          DCB      0x00,0x00,0x00,0x00
001604  00000000          DCB      0x00,0x00,0x00,0x00
001608  36363636          DCB      0x36,0x36,0x36,0x36
00160c  36f700f7          DCB      0x36,0xf7,0x00,0xf7
001610  36363636          DCB      0x36,0x36,0x36,0x36
001614  36363636          DCB      0x36,0x36,0x36,0x36
001618  18181818          DCB      0x18,0x18,0x18,0x18
00161c  18ff00ff          DCB      0x18,0xff,0x00,0xff
001620  00000000          DCB      0x00,0x00,0x00,0x00
001624  00000000          DCB      0x00,0x00,0x00,0x00
001628  36363636          DCB      0x36,0x36,0x36,0x36
00162c  363636ff          DCB      0x36,0x36,0x36,0xff
001630  00000000          DCB      0x00,0x00,0x00,0x00
001634  00000000          DCB      0x00,0x00,0x00,0x00
001638  00000000          DCB      0x00,0x00,0x00,0x00
00163c  00ff00ff          DCB      0x00,0xff,0x00,0xff
001640  18181818          DCB      0x18,0x18,0x18,0x18
001644  18181818          DCB      0x18,0x18,0x18,0x18
001648  00000000          DCB      0x00,0x00,0x00,0x00
00164c  000000ff          DCB      0x00,0x00,0x00,0xff
001650  36363636          DCB      0x36,0x36,0x36,0x36
001654  36363636          DCB      0x36,0x36,0x36,0x36
001658  36363636          DCB      0x36,0x36,0x36,0x36
00165c  3636363f          DCB      0x36,0x36,0x36,0x3f
001660  00000000          DCB      0x00,0x00,0x00,0x00
001664  00000000          DCB      0x00,0x00,0x00,0x00
001668  18181818          DCB      0x18,0x18,0x18,0x18
00166c  181f181f          DCB      0x18,0x1f,0x18,0x1f
001670  00000000          DCB      0x00,0x00,0x00,0x00
001674  00000000          DCB      0x00,0x00,0x00,0x00
001678  00000000          DCB      0x00,0x00,0x00,0x00
00167c  001f181f          DCB      0x00,0x1f,0x18,0x1f
001680  18181818          DCB      0x18,0x18,0x18,0x18
001684  18181818          DCB      0x18,0x18,0x18,0x18
001688  00000000          DCB      0x00,0x00,0x00,0x00
00168c  0000003f          DCB      0x00,0x00,0x00,0x3f
001690  36363636          DCB      0x36,0x36,0x36,0x36
001694  36363636          DCB      0x36,0x36,0x36,0x36
001698  36363636          DCB      0x36,0x36,0x36,0x36
00169c  363636ff          DCB      0x36,0x36,0x36,0xff
0016a0  36363636          DCB      0x36,0x36,0x36,0x36
0016a4  36363636          DCB      0x36,0x36,0x36,0x36
0016a8  18181818          DCB      0x18,0x18,0x18,0x18
0016ac  18ff18ff          DCB      0x18,0xff,0x18,0xff
0016b0  18181818          DCB      0x18,0x18,0x18,0x18
0016b4  18181818          DCB      0x18,0x18,0x18,0x18
0016b8  18181818          DCB      0x18,0x18,0x18,0x18
0016bc  181818f8          DCB      0x18,0x18,0x18,0xf8
0016c0  00000000          DCB      0x00,0x00,0x00,0x00
0016c4  00000000          DCB      0x00,0x00,0x00,0x00
0016c8  00000000          DCB      0x00,0x00,0x00,0x00
0016cc  0000001f          DCB      0x00,0x00,0x00,0x1f
0016d0  18181818          DCB      0x18,0x18,0x18,0x18
0016d4  18181818          DCB      0x18,0x18,0x18,0x18
0016d8  ffffffff          DCB      0xff,0xff,0xff,0xff
0016dc  ffffffff          DCB      0xff,0xff,0xff,0xff
0016e0  ffffffff          DCB      0xff,0xff,0xff,0xff
0016e4  ffffffff          DCB      0xff,0xff,0xff,0xff
0016e8  00000000          DCB      0x00,0x00,0x00,0x00
0016ec  000000ff          DCB      0x00,0x00,0x00,0xff
0016f0  ffffffff          DCB      0xff,0xff,0xff,0xff
0016f4  ffffffff          DCB      0xff,0xff,0xff,0xff
0016f8  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
0016fc  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
001700  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
001704  f0f0f0f0          DCB      0xf0,0xf0,0xf0,0xf0
001708  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
00170c  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
001710  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
001714  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
001718  ffffffff          DCB      0xff,0xff,0xff,0xff
00171c  ffffff00          DCB      0xff,0xff,0xff,0x00
001720  00000000          DCB      0x00,0x00,0x00,0x00
001724  00000000          DCB      0x00,0x00,0x00,0x00
001728  00000000          DCB      0x00,0x00,0x00,0x00
00172c  0076dcd8          DCB      0x00,0x76,0xdc,0xd8
001730  d8d8dc76          DCB      0xd8,0xd8,0xdc,0x76
001734  00000000          DCB      0x00,0x00,0x00,0x00
001738  00000000          DCB      0x00,0x00,0x00,0x00
00173c  00fcc6fc          DCB      0x00,0xfc,0xc6,0xfc
001740  c6c6fcc0          DCB      0xc6,0xc6,0xfc,0xc0
001744  c0c00000          DCB      0xc0,0xc0,0x00,0x00
001748  0000fec6          DCB      0x00,0x00,0xfe,0xc6
00174c  c6c0c0c0          DCB      0xc6,0xc0,0xc0,0xc0
001750  c0c0c0c0          DCB      0xc0,0xc0,0xc0,0xc0
001754  00000000          DCB      0x00,0x00,0x00,0x00
001758  00000000          DCB      0x00,0x00,0x00,0x00
00175c  80fe6c6c          DCB      0x80,0xfe,0x6c,0x6c
001760  6c6c6c6c          DCB      0x6c,0x6c,0x6c,0x6c
001764  00000000          DCB      0x00,0x00,0x00,0x00
001768  000000fe          DCB      0x00,0x00,0x00,0xfe
00176c  c6603018          DCB      0xc6,0x60,0x30,0x18
001770  3060c6fe          DCB      0x30,0x60,0xc6,0xfe
001774  00000000          DCB      0x00,0x00,0x00,0x00
001778  00000000          DCB      0x00,0x00,0x00,0x00
00177c  007ed8d8          DCB      0x00,0x7e,0xd8,0xd8
001780  d8d8d870          DCB      0xd8,0xd8,0xd8,0x70
001784  00000000          DCB      0x00,0x00,0x00,0x00
001788  00000000          DCB      0x00,0x00,0x00,0x00
00178c  66666666          DCB      0x66,0x66,0x66,0x66
001790  667c6060          DCB      0x66,0x7c,0x60,0x60
001794  c0000000          DCB      0xc0,0x00,0x00,0x00
001798  00000000          DCB      0x00,0x00,0x00,0x00
00179c  76dc1818          DCB      0x76,0xdc,0x18,0x18
0017a0  18181818          DCB      0x18,0x18,0x18,0x18
0017a4  00000000          DCB      0x00,0x00,0x00,0x00
0017a8  0000007e          DCB      0x00,0x00,0x00,0x7e
0017ac  183c6666          DCB      0x18,0x3c,0x66,0x66
0017b0  663c187e          DCB      0x66,0x3c,0x18,0x7e
0017b4  00000000          DCB      0x00,0x00,0x00,0x00
0017b8  00000038          DCB      0x00,0x00,0x00,0x38
0017bc  6cc6c6fe          DCB      0x6c,0xc6,0xc6,0xfe
0017c0  c6c66c38          DCB      0xc6,0xc6,0x6c,0x38
0017c4  00000000          DCB      0x00,0x00,0x00,0x00
0017c8  0000386c          DCB      0x00,0x00,0x38,0x6c
0017cc  c6c6c66c          DCB      0xc6,0xc6,0xc6,0x6c
0017d0  6c6c6cee          DCB      0x6c,0x6c,0x6c,0xee
0017d4  00000000          DCB      0x00,0x00,0x00,0x00
0017d8  00001e30          DCB      0x00,0x00,0x1e,0x30
0017dc  180c3e66          DCB      0x18,0x0c,0x3e,0x66
0017e0  6666663c          DCB      0x66,0x66,0x66,0x3c
0017e4  00000000          DCB      0x00,0x00,0x00,0x00
0017e8  00000000          DCB      0x00,0x00,0x00,0x00
0017ec  007edbdb          DCB      0x00,0x7e,0xdb,0xdb
0017f0  db7e0000          DCB      0xdb,0x7e,0x00,0x00
0017f4  00000000          DCB      0x00,0x00,0x00,0x00
0017f8  00000003          DCB      0x00,0x00,0x00,0x03
0017fc  067ecfdb          DCB      0x06,0x7e,0xcf,0xdb
001800  f37e60c0          DCB      0xf3,0x7e,0x60,0xc0
001804  00000000          DCB      0x00,0x00,0x00,0x00
001808  00001c30          DCB      0x00,0x00,0x1c,0x30
00180c  60607c60          DCB      0x60,0x60,0x7c,0x60
001810  6060301c          DCB      0x60,0x60,0x30,0x1c
001814  00000000          DCB      0x00,0x00,0x00,0x00
001818  0000007c          DCB      0x00,0x00,0x00,0x7c
00181c  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
001820  c6c6c6c6          DCB      0xc6,0xc6,0xc6,0xc6
001824  00000000          DCB      0x00,0x00,0x00,0x00
001828  00000000          DCB      0x00,0x00,0x00,0x00
00182c  fe0000fe          DCB      0xfe,0x00,0x00,0xfe
001830  0000fe00          DCB      0x00,0x00,0xfe,0x00
001834  00000000          DCB      0x00,0x00,0x00,0x00
001838  00000000          DCB      0x00,0x00,0x00,0x00
00183c  18187e18          DCB      0x18,0x18,0x7e,0x18
001840  180000ff          DCB      0x18,0x00,0x00,0xff
001844  00000000          DCB      0x00,0x00,0x00,0x00
001848  00000030          DCB      0x00,0x00,0x00,0x30
00184c  180c060c          DCB      0x18,0x0c,0x06,0x0c
001850  1830007e          DCB      0x18,0x30,0x00,0x7e
001854  00000000          DCB      0x00,0x00,0x00,0x00
001858  0000000c          DCB      0x00,0x00,0x00,0x0c
00185c  18306030          DCB      0x18,0x30,0x60,0x30
001860  180c007e          DCB      0x18,0x0c,0x00,0x7e
001864  00000000          DCB      0x00,0x00,0x00,0x00
001868  00000e1b          DCB      0x00,0x00,0x0e,0x1b
00186c  1b181818          DCB      0x1b,0x18,0x18,0x18
001870  18181818          DCB      0x18,0x18,0x18,0x18
001874  18181818          DCB      0x18,0x18,0x18,0x18
001878  18181818          DCB      0x18,0x18,0x18,0x18
00187c  18181818          DCB      0x18,0x18,0x18,0x18
001880  d8d8d870          DCB      0xd8,0xd8,0xd8,0x70
001884  00000000          DCB      0x00,0x00,0x00,0x00
001888  00000000          DCB      0x00,0x00,0x00,0x00
00188c  1818007e          DCB      0x18,0x18,0x00,0x7e
001890  00181800          DCB      0x00,0x18,0x18,0x00
001894  00000000          DCB      0x00,0x00,0x00,0x00
001898  00000000          DCB      0x00,0x00,0x00,0x00
00189c  0076dc00          DCB      0x00,0x76,0xdc,0x00
0018a0  76dc0000          DCB      0x76,0xdc,0x00,0x00
0018a4  00000000          DCB      0x00,0x00,0x00,0x00
0018a8  00386c6c          DCB      0x00,0x38,0x6c,0x6c
0018ac  38000000          DCB      0x38,0x00,0x00,0x00
0018b0  00000000          DCB      0x00,0x00,0x00,0x00
0018b4  00000000          DCB      0x00,0x00,0x00,0x00
0018b8  00000000          DCB      0x00,0x00,0x00,0x00
0018bc  00000018          DCB      0x00,0x00,0x00,0x18
0018c0  18000000          DCB      0x18,0x00,0x00,0x00
0018c4  00000000          DCB      0x00,0x00,0x00,0x00
0018c8  00000000          DCB      0x00,0x00,0x00,0x00
0018cc  00000000          DCB      0x00,0x00,0x00,0x00
0018d0  18000000          DCB      0x18,0x00,0x00,0x00
0018d4  00000000          DCB      0x00,0x00,0x00,0x00
0018d8  000f0c0c          DCB      0x00,0x0f,0x0c,0x0c
0018dc  0c0c0cec          DCB      0x0c,0x0c,0x0c,0xec
0018e0  6c6c3c1c          DCB      0x6c,0x6c,0x3c,0x1c
0018e4  00000000          DCB      0x00,0x00,0x00,0x00
0018e8  00d86c6c          DCB      0x00,0xd8,0x6c,0x6c
0018ec  6c6c6c00          DCB      0x6c,0x6c,0x6c,0x00
0018f0  00000000          DCB      0x00,0x00,0x00,0x00
0018f4  00000000          DCB      0x00,0x00,0x00,0x00
0018f8  00709830          DCB      0x00,0x70,0x98,0x30
0018fc  60c8f800          DCB      0x60,0xc8,0xf8,0x00
001900  00000000          DCB      0x00,0x00,0x00,0x00
001904  00000000          DCB      0x00,0x00,0x00,0x00
001908  00000000          DCB      0x00,0x00,0x00,0x00
00190c  7c7c7c7c          DCB      0x7c,0x7c,0x7c,0x7c
001910  7c7c7c00          DCB      0x7c,0x7c,0x7c,0x00
001914  00000000          DCB      0x00,0x00,0x00,0x00
001918  00000000          DCB      0x00,0x00,0x00,0x00
00191c  00000000          DCB      0x00,0x00,0x00,0x00
001920  00000000          DCB      0x00,0x00,0x00,0x00
001924  00000000          DCB      0x00,0x00,0x00,0x00
