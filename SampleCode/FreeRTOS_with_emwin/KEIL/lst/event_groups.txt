; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\event_groups.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\event_groups.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\event_groups.crf ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\event_groups.c]
                          ARM

                          AREA ||i.prvTestWaitCondition||, CODE, READONLY, ALIGN=2

                  prvTestWaitCondition PROC
;;;681    
;;;682    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
000000  e1a03000          MOV      r3,r0
;;;683    {
;;;684    BaseType_t xWaitConditionMet = pdFALSE;
;;;685    
;;;686    	if( xWaitForAllBits == pdFALSE )
000004  e3520000          CMP      r2,#0
000008  e3a00000          MOV      r0,#0                 ;684
00000c  0a000002          BEQ      |L1.28|
;;;687    	{
;;;688    		/* Task only has to wait for one bit within uxBitsToWaitFor to be
;;;689    		set.  Is one already set? */
;;;690    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
;;;691    		{
;;;692    			xWaitConditionMet = pdTRUE;
;;;693    		}
;;;694    		else
;;;695    		{
;;;696    			mtCOVERAGE_TEST_MARKER();
;;;697    		}
;;;698    	}
;;;699    	else
;;;700    	{
;;;701    		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
;;;702    		Are they set already? */
;;;703    		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
000010  e1d11003          BICS     r1,r1,r3
000014  0a000002          BEQ      |L1.36|
;;;704    		{
;;;705    			xWaitConditionMet = pdTRUE;
;;;706    		}
;;;707    		else
;;;708    		{
;;;709    			mtCOVERAGE_TEST_MARKER();
;;;710    		}
;;;711    	}
;;;712    
;;;713    	return xWaitConditionMet;
;;;714    }
000018  e12fff1e          BX       lr
                  |L1.28|
00001c  e1130001          TST      r3,r1                 ;690
000020  012fff1e          BXEQ     lr
                  |L1.36|
000024  e3a00001          MOV      r0,#1                 ;692
000028  e12fff1e          BX       lr
;;;715    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxEventGroupGetNumber||, CODE, READONLY, ALIGN=2

                  uxEventGroupGetNumber PROC
;;;733    
;;;734    	UBaseType_t uxEventGroupGetNumber( void* xEventGroup )
000000  e3500000          CMP      r0,#0
;;;735    	{
;;;736    	UBaseType_t xReturn;
;;;737    	EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;738    
;;;739    		if( xEventGroup == NULL )
;;;740    		{
;;;741    			xReturn = 0;
;;;742    		}
;;;743    		else
;;;744    		{
;;;745    			xReturn = pxEventBits->uxEventGroupNumber;
000004  15900018          LDRNE    r0,[r0,#0x18]
;;;746    		}
;;;747    
;;;748    		return xReturn;
;;;749    	}
000008  e12fff1e          BX       lr
;;;750    
                          ENDP


                          AREA ||i.vEventGroupClearBitsCallback||, CODE, READONLY, ALIGN=2

                  vEventGroupClearBitsCallback PROC
;;;675    an interrupt. */
;;;676    void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
000000  eafffffe          B        xEventGroupClearBits
;;;677    {
;;;678    	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
;;;679    }
;;;680    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupDelete||, CODE, READONLY, ALIGN=2

                  vEventGroupDelete PROC
;;;623    
;;;624    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;625    {
000004  e1a05000          MOV      r5,r0
;;;626    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;627    const List_t *pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
000008  e2804004          ADD      r4,r0,#4
;;;628    
;;;629    	vTaskSuspendAll();
00000c  ebfffffe          BL       vTaskSuspendAll
;;;630    	{
;;;631    		traceEVENT_GROUP_DELETE( xEventGroup );
;;;632    
;;;633    		while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
000010  ea000002          B        |L4.32|
                  |L4.20|
;;;634    		{
;;;635    			/* Unblock the task, returning 0 as the event list is being deleted
;;;636    			and	cannot therefore have any bits set. */
;;;637    			configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
;;;638    			( void ) xTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
000014  e594000c          LDR      r0,[r4,#0xc]
000018  e3a01402          MOV      r1,#0x2000000
00001c  ebfffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L4.32|
000020  e5940000          LDR      r0,[r4,#0]            ;633
000024  e3500000          CMP      r0,#0                 ;633
000028  1afffff9          BNE      |L4.20|
;;;639    		}
;;;640    
;;;641    		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;642    		{
;;;643    			/* The event group can only have been allocated dynamically - free
;;;644    			it again. */
;;;645    			vPortFree( pxEventBits );
00002c  e1a00005          MOV      r0,r5
000030  ebfffffe          BL       vPortFree
;;;646    		}
;;;647    		#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;648    		{
;;;649    			/* The event group could have been allocated statically or
;;;650    			dynamically, so check before attempting to free the memory. */
;;;651    			if( pxEventBits->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;652    			{
;;;653    				vPortFree( pxEventBits );
;;;654    			}
;;;655    			else
;;;656    			{
;;;657    				mtCOVERAGE_TEST_MARKER();
;;;658    			}
;;;659    		}
;;;660    		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;661    	}
;;;662    	( void ) xTaskResumeAll();
000034  e8bd4070          POP      {r4-r6,lr}
000038  eafffffe          B        xTaskResumeAll
;;;663    }
;;;664    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vEventGroupSetBitsCallback||, CODE, READONLY, ALIGN=2

                  vEventGroupSetBitsCallback PROC
;;;667    an interrupt. */
;;;668    void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
000000  eafffffe          B        xEventGroupSetBits
;;;669    {
;;;670    	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
;;;671    }
;;;672    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupClearBits||, CODE, READONLY, ALIGN=2

                  xEventGroupClearBits PROC
;;;471    
;;;472    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;473    {
000004  e1a06001          MOV      r6,r1
000008  e1a04000          MOV      r4,r0
;;;474    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;475    EventBits_t uxReturn;
;;;476    
;;;477    	/* Check the user is not attempting to clear the bits used by the kernel
;;;478    	itself. */
;;;479    	configASSERT( xEventGroup );
;;;480    	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;481    
;;;482    	taskENTER_CRITICAL();
00000c  ebfffffe          BL       vPortEnterCritical
;;;483    	{
;;;484    		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );
;;;485    
;;;486    		/* The value returned is the event group value prior to the bits being
;;;487    		cleared. */
;;;488    		uxReturn = pxEventBits->uxEventBits;
000010  e5945000          LDR      r5,[r4,#0]
;;;489    
;;;490    		/* Clear the bits. */
;;;491    		pxEventBits->uxEventBits &= ~uxBitsToClear;
000014  e1c50006          BIC      r0,r5,r6
000018  e5840000          STR      r0,[r4,#0]
;;;492    	}
;;;493    	taskEXIT_CRITICAL();
00001c  ebfffffe          BL       vPortExitCritical
;;;494    
;;;495    	return uxReturn;
000020  e1a00005          MOV      r0,r5
;;;496    }
000024  e8bd8070          POP      {r4-r6,pc}
;;;497    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupCreate||, CODE, READONLY, ALIGN=2

                  xEventGroupCreate PROC
;;;173    
;;;174    	EventGroupHandle_t xEventGroupCreate( void )
000000  e92d4010          PUSH     {r4,lr}
;;;175    	{
;;;176    	EventGroup_t *pxEventBits;
;;;177    
;;;178    		/* Allocate the event group. */
;;;179    		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
000004  e3a0001c          MOV      r0,#0x1c
000008  ebfffffe          BL       pvPortMalloc
00000c  e1b04000          MOVS     r4,r0
;;;180    
;;;181    		if( pxEventBits != NULL )
000010  0a000003          BEQ      |L7.36|
;;;182    		{
;;;183    			pxEventBits->uxEventBits = 0;
000014  e3a00000          MOV      r0,#0
000018  e5840000          STR      r0,[r4,#0]
;;;184    			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
00001c  e2840004          ADD      r0,r4,#4
000020  ebfffffe          BL       vListInitialise
                  |L7.36|
;;;185    
;;;186    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;187    			{
;;;188    				/* Both static and dynamic allocation can be used, so note this
;;;189    				event group was allocated statically in case the event group is
;;;190    				later deleted. */
;;;191    				pxEventBits->ucStaticallyAllocated = pdFALSE;
;;;192    			}
;;;193    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;194    
;;;195    			traceEVENT_GROUP_CREATE( pxEventBits );
;;;196    		}
;;;197    		else
;;;198    		{
;;;199    			traceEVENT_GROUP_CREATE_FAILED();
;;;200    		}
;;;201    
;;;202    		return ( EventGroupHandle_t ) pxEventBits;
000024  e1a00004          MOV      r0,r4
;;;203    	}
000028  e8bd8010          POP      {r4,pc}
;;;204    
                          ENDP


                          AREA ||i.xEventGroupGetBitsFromISR||, CODE, READONLY, ALIGN=2

                  xEventGroupGetBitsFromISR PROC
;;;513    
;;;514    EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
000000  e5900000          LDR      r0,[r0,#0]
;;;515    {
;;;516    UBaseType_t uxSavedInterruptStatus;
;;;517    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;518    EventBits_t uxReturn;
;;;519    
;;;520    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;521    	{
;;;522    		uxReturn = pxEventBits->uxEventBits;
;;;523    	}
;;;524    	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;525    
;;;526    	return uxReturn;
;;;527    }
000004  e12fff1e          BX       lr
;;;528    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSetBits||, CODE, READONLY, ALIGN=2

                  xEventGroupSetBits PROC
;;;529    
;;;530    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;531    {
000004  e1a08001          MOV      r8,r1
000008  e1a04000          MOV      r4,r0
;;;532    ListItem_t *pxListItem, *pxNext;
;;;533    ListItem_t const *pxListEnd;
;;;534    List_t *pxList;
;;;535    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
00000c  e3a05000          MOV      r5,#0
;;;536    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;537    BaseType_t xMatchFound = pdFALSE;
;;;538    
;;;539    	/* Check the user is not attempting to set the bits used by the kernel
;;;540    	itself. */
;;;541    	configASSERT( xEventGroup );
;;;542    	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;543    
;;;544    	pxList = &( pxEventBits->xTasksWaitingForBits );
000010  e2806004          ADD      r6,r0,#4
;;;545    	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000014  e280700c          ADD      r7,r0,#0xc
;;;546    	vTaskSuspendAll();
000018  ebfffffe          BL       vTaskSuspendAll
;;;547    	{
;;;548    		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );
;;;549    
;;;550    		pxListItem = listGET_HEAD_ENTRY( pxList );
;;;551    
;;;552    		/* Set the bits. */
;;;553    		pxEventBits->uxEventBits |= uxBitsToSet;
00001c  e5941000          LDR      r1,[r4,#0]
000020  e596000c          LDR      r0,[r6,#0xc]
000024  e1811008          ORR      r1,r1,r8
000028  e5841000          STR      r1,[r4,#0]
;;;554    
;;;555    		/* See if the new bit value should unblock any tasks. */
;;;556    		while( pxListItem != pxListEnd )
00002c  ea000010          B        |L9.116|
                  |L9.48|
000030  e8900042          LDM      r0,{r1,r6}
;;;557    		{
;;;558    			pxNext = listGET_NEXT( pxListItem );
;;;559    			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
;;;560    			xMatchFound = pdFALSE;
;;;561    
;;;562    			/* Split the bits waited for from the control bits. */
;;;563    			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
000034  e20124ff          AND      r2,r1,#0xff000000
;;;564    			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
;;;565    
;;;566    			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
;;;567    			{
;;;568    				/* Just looking for single bit being set. */
;;;569    				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
;;;570    				{
;;;571    					xMatchFound = pdTRUE;
;;;572    				}
;;;573    				else
;;;574    				{
;;;575    					mtCOVERAGE_TEST_MARKER();
;;;576    				}
;;;577    			}
;;;578    			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
000038  e5943000          LDR      r3,[r4,#0]
00003c  e3120301          TST      r2,#0x4000000         ;566
000040  e3c114ff          BIC      r1,r1,#0xff000000     ;564
000044  0a000002          BEQ      |L9.84|
000048  e1d13003          BICS     r3,r1,r3
00004c  0a000002          BEQ      |L9.92|
000050  ea000006          B        |L9.112|
                  |L9.84|
000054  e1130001          TST      r3,r1                 ;569
000058  0a000004          BEQ      |L9.112|
                  |L9.92|
;;;579    			{
;;;580    				/* All bits are set. */
;;;581    				xMatchFound = pdTRUE;
;;;582    			}
;;;583    			else
;;;584    			{
;;;585    				/* Need all bits to be set, but not all the bits were set. */
;;;586    			}
;;;587    
;;;588    			if( xMatchFound != pdFALSE )
;;;589    			{
;;;590    				/* The bits match.  Should the bits be cleared on exit? */
;;;591    				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
00005c  e3120401          TST      r2,#0x1000000
;;;592    				{
;;;593    					uxBitsToClear |= uxBitsWaitedFor;
000060  11855001          ORRNE    r5,r5,r1
;;;594    				}
;;;595    				else
;;;596    				{
;;;597    					mtCOVERAGE_TEST_MARKER();
;;;598    				}
;;;599    
;;;600    				/* Store the actual event flag value in the task's event list
;;;601    				item before removing the task from the event list.  The
;;;602    				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
;;;603    				that is was unblocked due to its required bits matching, rather
;;;604    				than because it timed out. */
;;;605    				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
000064  e5941000          LDR      r1,[r4,#0]
000068  e3811402          ORR      r1,r1,#0x2000000
00006c  ebfffffe          BL       xTaskRemoveFromUnorderedEventList
                  |L9.112|
;;;606    			}
;;;607    
;;;608    			/* Move onto the next list item.  Note pxListItem->pxNext is not
;;;609    			used here as the list item may have been removed from the event list
;;;610    			and inserted into the ready/pending reading list. */
;;;611    			pxListItem = pxNext;
000070  e1a00006          MOV      r0,r6
                  |L9.116|
000074  e1500007          CMP      r0,r7                 ;556
000078  1affffec          BNE      |L9.48|
;;;612    		}
;;;613    
;;;614    		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
;;;615    		bit was set in the control word. */
;;;616    		pxEventBits->uxEventBits &= ~uxBitsToClear;
00007c  e5940000          LDR      r0,[r4,#0]
000080  e1c00005          BIC      r0,r0,r5
000084  e5840000          STR      r0,[r4,#0]
;;;617    	}
;;;618    	( void ) xTaskResumeAll();
000088  ebfffffe          BL       xTaskResumeAll
;;;619    
;;;620    	return pxEventBits->uxEventBits;
00008c  e5940000          LDR      r0,[r4,#0]
;;;621    }
000090  e8bd81f0          POP      {r4-r8,pc}
;;;622    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupSync||, CODE, READONLY, ALIGN=2

                  xEventGroupSync PROC
;;;207    
;;;208    EventBits_t xEventGroupSync( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;209    {
000004  e1a07003          MOV      r7,r3
000008  e1a06002          MOV      r6,r2
00000c  e1a08001          MOV      r8,r1
000010  e1a04000          MOV      r4,r0
;;;210    EventBits_t uxOriginalBitValue, uxReturn;
;;;211    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;212    BaseType_t xAlreadyYielded;
;;;213    BaseType_t xTimeoutOccurred = pdFALSE;
;;;214    
;;;215    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;216    	configASSERT( uxBitsToWaitFor != 0 );
;;;217    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;218    	{
;;;219    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;220    	}
;;;221    	#endif
;;;222    
;;;223    	vTaskSuspendAll();
000014  ebfffffe          BL       vTaskSuspendAll
;;;224    	{
;;;225    		uxOriginalBitValue = pxEventBits->uxEventBits;
;;;226    
;;;227    		( void ) xEventGroupSetBits( xEventGroup, uxBitsToSet );
000018  e5945000          LDR      r5,[r4,#0]
00001c  e1a01008          MOV      r1,r8
000020  e1a00004          MOV      r0,r4
000024  ebfffffe          BL       xEventGroupSetBits
;;;228    
;;;229    		if( ( ( uxOriginalBitValue | uxBitsToSet ) & uxBitsToWaitFor ) == uxBitsToWaitFor )
000028  e1855008          ORR      r5,r5,r8
00002c  e1d60005          BICS     r0,r6,r5
000030  0a000008          BEQ      |L10.88|
;;;230    		{
;;;231    			/* All the rendezvous bits are now set - no need to block. */
;;;232    			uxReturn = ( uxOriginalBitValue | uxBitsToSet );
;;;233    
;;;234    			/* Rendezvous always clear the bits.  They will have been cleared
;;;235    			already unless this is the only task in the rendezvous. */
;;;236    			pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;237    
;;;238    			xTicksToWait = 0;
;;;239    		}
;;;240    		else
;;;241    		{
;;;242    			if( xTicksToWait != ( TickType_t ) 0 )
000034  e3570000          CMP      r7,#0
;;;243    			{
;;;244    				traceEVENT_GROUP_SYNC_BLOCK( xEventGroup, uxBitsToSet, uxBitsToWaitFor );
;;;245    
;;;246    				/* Store the bits that the calling task is waiting for in the
;;;247    				task's event list item so the kernel knows when a match is
;;;248    				found.  Then enter the blocked state. */
;;;249    				vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | eventCLEAR_EVENTS_ON_EXIT_BIT | eventWAIT_FOR_ALL_BITS ), xTicksToWait );
;;;250    
;;;251    				/* This assignment is obsolete as uxReturn will get set after
;;;252    				the task unblocks, but some compilers mistakenly generate a
;;;253    				warning about uxReturn being returned without being set if the
;;;254    				assignment is omitted. */
;;;255    				uxReturn = 0;
;;;256    			}
;;;257    			else
;;;258    			{
;;;259    				/* The rendezvous bits were not set, but no block time was
;;;260    				specified - just return the current event bit value. */
;;;261    				uxReturn = pxEventBits->uxEventBits;
000038  05945000          LDREQ    r5,[r4,#0]
00003c  0a000009          BEQ      |L10.104|
000040  e3861405          ORR      r1,r6,#0x5000000      ;249
000044  e1a02007          MOV      r2,r7                 ;249
000048  e2840004          ADD      r0,r4,#4              ;249
00004c  ebfffffe          BL       vTaskPlaceOnUnorderedEventList
000050  e3a05000          MOV      r5,#0                 ;255
000054  ea000003          B        |L10.104|
                  |L10.88|
000058  e5940000          LDR      r0,[r4,#0]            ;236
00005c  e3a07000          MOV      r7,#0                 ;238
000060  e1c00006          BIC      r0,r0,r6              ;236
000064  e5840000          STR      r0,[r4,#0]            ;238
                  |L10.104|
;;;262    			}
;;;263    		}
;;;264    	}
;;;265    	xAlreadyYielded = xTaskResumeAll();
000068  ebfffffe          BL       xTaskResumeAll
;;;266    
;;;267    	if( xTicksToWait != ( TickType_t ) 0 )
00006c  e3570000          CMP      r7,#0
000070  0a000006          BEQ      |L10.144|
;;;268    	{
;;;269    		if( xAlreadyYielded == pdFALSE )
000074  e3500000          CMP      r0,#0
;;;270    		{
;;;271    			portYIELD_WITHIN_API();
000078  0bfffffe          BLEQ     vPortYield
;;;272    		}
;;;273    		else
;;;274    		{
;;;275    			mtCOVERAGE_TEST_MARKER();
;;;276    		}
;;;277    
;;;278    		/* The task blocked to wait for its required bits to be set - at this
;;;279    		point either the required bits were set or the block time expired.  If
;;;280    		the required bits were set they will have been stored in the task's
;;;281    		event list item, and they should now be retrieved then cleared. */
;;;282    		uxReturn = uxTaskResetEventItemValue();
00007c  ebfffffe          BL       uxTaskResetEventItemValue
;;;283    
;;;284    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
000080  e3100402          TST      r0,#0x2000000
000084  e1a05000          MOV      r5,r0                 ;282
000088  0a000002          BEQ      |L10.152|
                  |L10.140|
;;;285    		{
;;;286    			/* The task timed out, just return the current event bit value. */
;;;287    			taskENTER_CRITICAL();
;;;288    			{
;;;289    				uxReturn = pxEventBits->uxEventBits;
;;;290    
;;;291    				/* Although the task got here because it timed out before the
;;;292    				bits it was waiting for were set, it is possible that since it
;;;293    				unblocked another task has set the bits.  If this is the case
;;;294    				then it needs to clear the bits before exiting. */
;;;295    				if( ( uxReturn & uxBitsToWaitFor ) == uxBitsToWaitFor )
;;;296    				{
;;;297    					pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
;;;298    				}
;;;299    				else
;;;300    				{
;;;301    					mtCOVERAGE_TEST_MARKER();
;;;302    				}
;;;303    			}
;;;304    			taskEXIT_CRITICAL();
;;;305    
;;;306    			xTimeoutOccurred = pdTRUE;
;;;307    		}
;;;308    		else
;;;309    		{
;;;310    			/* The task unblocked because the bits were set. */
;;;311    		}
;;;312    
;;;313    		/* Control bits might be set as the task had blocked should not be
;;;314    		returned. */
;;;315    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
00008c  e3c554ff          BIC      r5,r5,#0xff000000
                  |L10.144|
;;;316    	}
;;;317    
;;;318    	traceEVENT_GROUP_SYNC_END( xEventGroup, uxBitsToSet, uxBitsToWaitFor, xTimeoutOccurred );
;;;319    
;;;320    	return uxReturn;
000090  e1a00005          MOV      r0,r5
;;;321    }
000094  e8bd81f0          POP      {r4-r8,pc}
                  |L10.152|
000098  ebfffffe          BL       vPortEnterCritical
00009c  e5945000          LDR      r5,[r4,#0]            ;289
0000a0  e1d60005          BICS     r0,r6,r5              ;295
0000a4  01c50006          BICEQ    r0,r5,r6              ;297
0000a8  05840000          STREQ    r0,[r4,#0]            ;297
0000ac  ebfffffe          BL       vPortExitCritical
0000b0  eafffff5          B        |L10.140|
;;;322    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xEventGroupWaitBits||, CODE, READONLY, ALIGN=2

                  xEventGroupWaitBits PROC
;;;323    
;;;324    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;325    {
;;;326    EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
;;;327    EventBits_t uxReturn, uxControlBits = 0;
000004  e59da020          LDR      r10,[sp,#0x20]
000008  e1a09003          MOV      r9,r3                 ;325
00000c  e1a07002          MOV      r7,r2                 ;325
000010  e1a08001          MOV      r8,r1                 ;325
000014  e1a04000          MOV      r4,r0                 ;325
000018  e3a05000          MOV      r5,#0
;;;328    BaseType_t xWaitConditionMet, xAlreadyYielded;
;;;329    BaseType_t xTimeoutOccurred = pdFALSE;
;;;330    
;;;331    	/* Check the user is not attempting to wait on the bits used by the kernel
;;;332    	itself, and that at least one bit is being requested. */
;;;333    	configASSERT( xEventGroup );
;;;334    	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
;;;335    	configASSERT( uxBitsToWaitFor != 0 );
;;;336    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;337    	{
;;;338    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;339    	}
;;;340    	#endif
;;;341    
;;;342    	vTaskSuspendAll();
00001c  ebfffffe          BL       vTaskSuspendAll
;;;343    	{
;;;344    		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
;;;345    
;;;346    		/* Check to see if the wait condition is already met or not. */
;;;347    		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
000020  e5946000          LDR      r6,[r4,#0]
000024  e1a02009          MOV      r2,r9
000028  e1a01008          MOV      r1,r8
00002c  e1a00006          MOV      r0,r6
000030  ebfffffe          BL       prvTestWaitCondition
;;;348    
;;;349    		if( xWaitConditionMet != pdFALSE )
000034  e3500000          CMP      r0,#0
000038  0a000006          BEQ      |L11.88|
;;;350    		{
;;;351    			/* The wait condition has already been met so there is no need to
;;;352    			block. */
;;;353    			uxReturn = uxCurrentEventBits;
;;;354    			xTicksToWait = ( TickType_t ) 0;
;;;355    
;;;356    			/* Clear the wait bits if requested to do so. */
;;;357    			if( xClearOnExit != pdFALSE )
00003c  e3570000          CMP      r7,#0
;;;358    			{
;;;359    				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
000040  15940000          LDRNE    r0,[r4,#0]
000044  e1a05006          MOV      r5,r6                 ;353
000048  11c00008          BICNE    r0,r0,r8
00004c  e3a0a000          MOV      r10,#0                ;354
000050  15840000          STRNE    r0,[r4,#0]
000054  ea00000b          B        |L11.136|
                  |L11.88|
;;;360    			}
;;;361    			else
;;;362    			{
;;;363    				mtCOVERAGE_TEST_MARKER();
;;;364    			}
;;;365    		}
;;;366    		else if( xTicksToWait == ( TickType_t ) 0 )
000058  e35a0000          CMP      r10,#0
;;;367    		{
;;;368    			/* The wait condition has not been met, but no block time was
;;;369    			specified, so just return the current value. */
;;;370    			uxReturn = uxCurrentEventBits;
00005c  01a05006          MOVEQ    r5,r6
000060  0a000008          BEQ      |L11.136|
;;;371    		}
;;;372    		else
;;;373    		{
;;;374    			/* The task is going to block to wait for its required bits to be
;;;375    			set.  uxControlBits are used to remember the specified behaviour of
;;;376    			this call to xEventGroupWaitBits() - for use when the event bits
;;;377    			unblock the task. */
;;;378    			if( xClearOnExit != pdFALSE )
000064  e3570000          CMP      r7,#0
;;;379    			{
;;;380    				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
000068  13a05401          MOVNE    r5,#0x1000000
;;;381    			}
;;;382    			else
;;;383    			{
;;;384    				mtCOVERAGE_TEST_MARKER();
;;;385    			}
;;;386    
;;;387    			if( xWaitForAllBits != pdFALSE )
00006c  e3590000          CMP      r9,#0
;;;388    			{
;;;389    				uxControlBits |= eventWAIT_FOR_ALL_BITS;
000070  13855301          ORRNE    r5,r5,#0x4000000
;;;390    			}
;;;391    			else
;;;392    			{
;;;393    				mtCOVERAGE_TEST_MARKER();
;;;394    			}
;;;395    
;;;396    			/* Store the bits that the calling task is waiting for in the
;;;397    			task's event list item so the kernel knows when a match is
;;;398    			found.  Then enter the blocked state. */
;;;399    			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
000074  e1881005          ORR      r1,r8,r5
000078  e1a0200a          MOV      r2,r10
00007c  e2840004          ADD      r0,r4,#4
000080  ebfffffe          BL       vTaskPlaceOnUnorderedEventList
;;;400    
;;;401    			/* This is obsolete as it will get set after the task unblocks, but
;;;402    			some compilers mistakenly generate a warning about the variable
;;;403    			being returned without being set if it is not done. */
;;;404    			uxReturn = 0;
000084  e3a05000          MOV      r5,#0
                  |L11.136|
;;;405    
;;;406    			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
;;;407    		}
;;;408    	}
;;;409    	xAlreadyYielded = xTaskResumeAll();
000088  ebfffffe          BL       xTaskResumeAll
;;;410    
;;;411    	if( xTicksToWait != ( TickType_t ) 0 )
00008c  e35a0000          CMP      r10,#0
000090  0a000012          BEQ      |L11.224|
;;;412    	{
;;;413    		if( xAlreadyYielded == pdFALSE )
000094  e3500000          CMP      r0,#0
;;;414    		{
;;;415    			portYIELD_WITHIN_API();
000098  0bfffffe          BLEQ     vPortYield
;;;416    		}
;;;417    		else
;;;418    		{
;;;419    			mtCOVERAGE_TEST_MARKER();
;;;420    		}
;;;421    
;;;422    		/* The task blocked to wait for its required bits to be set - at this
;;;423    		point either the required bits were set or the block time expired.  If
;;;424    		the required bits were set they will have been stored in the task's
;;;425    		event list item, and they should now be retrieved then cleared. */
;;;426    		uxReturn = uxTaskResetEventItemValue();
00009c  ebfffffe          BL       uxTaskResetEventItemValue
;;;427    
;;;428    		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
0000a0  e3100402          TST      r0,#0x2000000
0000a4  e1a05000          MOV      r5,r0                 ;426
0000a8  1a00000b          BNE      |L11.220|
;;;429    		{
;;;430    			taskENTER_CRITICAL();
0000ac  ebfffffe          BL       vPortEnterCritical
;;;431    			{
;;;432    				/* The task timed out, just return the current event bit value. */
;;;433    				uxReturn = pxEventBits->uxEventBits;
;;;434    
;;;435    				/* It is possible that the event bits were updated between this
;;;436    				task leaving the Blocked state and running again. */
;;;437    				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
0000b0  e5945000          LDR      r5,[r4,#0]
0000b4  e1a02009          MOV      r2,r9
0000b8  e1a01008          MOV      r1,r8
0000bc  e1a00005          MOV      r0,r5
0000c0  ebfffffe          BL       prvTestWaitCondition
0000c4  e3500000          CMP      r0,#0
;;;438    				{
;;;439    					if( xClearOnExit != pdFALSE )
0000c8  13570000          CMPNE    r7,#0
;;;440    					{
;;;441    						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
0000cc  15940000          LDRNE    r0,[r4,#0]
0000d0  11c00008          BICNE    r0,r0,r8
0000d4  15840000          STRNE    r0,[r4,#0]
;;;442    					}
;;;443    					else
;;;444    					{
;;;445    						mtCOVERAGE_TEST_MARKER();
;;;446    					}
;;;447    				}
;;;448    				else
;;;449    				{
;;;450    					mtCOVERAGE_TEST_MARKER();
;;;451    				}
;;;452    			}
;;;453    			taskEXIT_CRITICAL();
0000d8  ebfffffe          BL       vPortExitCritical
                  |L11.220|
;;;454    
;;;455    			/* Prevent compiler warnings when trace macros are not used. */
;;;456    			xTimeoutOccurred = pdFALSE;
;;;457    		}
;;;458    		else
;;;459    		{
;;;460    			/* The task unblocked because the bits were set. */
;;;461    		}
;;;462    
;;;463    		/* The task blocked so control bits may have been set. */
;;;464    		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
0000dc  e3c554ff          BIC      r5,r5,#0xff000000
                  |L11.224|
;;;465    	}
;;;466    	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );
;;;467    
;;;468    	return uxReturn;
0000e0  e1a00005          MOV      r0,r5
;;;469    }
0000e4  e8bd87f0          POP      {r4-r10,pc}
;;;470    /*-----------------------------------------------------------*/
                          ENDP

