; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\heap_4.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\heap_4.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\heap_4.crf ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\MemMang\heap_4.c]
                          ARM

                          AREA ||i.prvHeapInit||, CODE, READONLY, ALIGN=2

                  prvHeapInit PROC
;;;370    
;;;371    static void prvHeapInit( void )
000000  e59f0060          LDR      r0,|L1.104|
;;;372    {
;;;373    BlockLink_t *pxFirstFreeBlock;
;;;374    uint8_t *pucAlignedHeap;
;;;375    size_t uxAddress;
;;;376    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
000004  e3a01701          MOV      r1,#0x40000
;;;377    
;;;378    	/* Ensure the heap starts on a correctly aligned boundary. */
;;;379    	uxAddress = ( size_t ) ucHeap;
;;;380    
;;;381    	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
000008  e3100007          TST      r0,#7
00000c  0a000004          BEQ      |L1.36|
;;;382    	{
;;;383    		uxAddress += ( portBYTE_ALIGNMENT - 1 );
;;;384    		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
;;;385    		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
000010  e59f1050          LDR      r1,|L1.104|
000014  e2800007          ADD      r0,r0,#7              ;372
000018  e3c00007          BIC      r0,r0,#7              ;384
00001c  e0401001          SUB      r1,r0,r1
000020  e2611701          RSB      r1,r1,#0x40000
                  |L1.36|
;;;386    	}
;;;387    
;;;388    	pucAlignedHeap = ( uint8_t * ) uxAddress;
;;;389    
;;;390    	/* xStart is used to hold a pointer to the first item in the list of free
;;;391    	blocks.  The void cast is used to prevent compiler warnings. */
;;;392    	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
000024  e59f2040          LDR      r2,|L1.108|
;;;393    	xStart.xBlockSize = ( size_t ) 0;
000028  e3a03000          MOV      r3,#0
;;;394    
;;;395    	/* pxEnd is used to mark the end of the list of free blocks and is inserted
;;;396    	at the end of the heap space. */
;;;397    	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
00002c  e0811000          ADD      r1,r1,r0
000030  e8820009          STM      r2,{r0,r3}            ;393
000034  e2411008          SUB      r1,r1,#8
;;;398    	uxAddress -= xHeapStructSize;
;;;399    	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
000038  e3c11007          BIC      r1,r1,#7
;;;400    	pxEnd = ( void * ) uxAddress;
00003c  e2422010          SUB      r2,r2,#0x10
;;;401    	pxEnd->xBlockSize = 0;
000040  e5821000          STR      r1,[r2,#0]  ; pxEnd
;;;402    	pxEnd->pxNextFreeBlock = NULL;
000044  e5813004          STR      r3,[r1,#4]
000048  e5813000          STR      r3,[r1,#0]
;;;403    
;;;404    	/* To start with there is a single free block that is sized to take up the
;;;405    	entire heap space, minus the space taken by pxEnd. */
;;;406    	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
;;;407    	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
00004c  e0413000          SUB      r3,r1,r0
000050  e880000a          STM      r0,{r1,r3}
;;;408    	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
;;;409    
;;;410    	/* Only one block exists - and it covers the entire usable heap space. */
;;;411    	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
;;;412    	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
000054  e5823008          STR      r3,[r2,#8]  ; xMinimumEverFreeBytesRemaining
;;;413    
;;;414    	/* Work out the position of the top bit in a size_t variable. */
;;;415    	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
000058  e3a00102          MOV      r0,#0x80000000
00005c  e5a23004          STR      r3,[r2,#4]!  ; xFreeBytesRemaining, xBlockAllocatedBit
000060  e5820008          STR      r0,[r2,#8]
;;;416    }
000064  e12fff1e          BX       lr
;;;417    /*-----------------------------------------------------------*/
                          ENDP

                  |L1.104|
                          DCD      ||.bss||
                  |L1.108|
                          DCD      ||.data||+0x10

                          AREA ||i.prvInsertBlockIntoFreeList||, CODE, READONLY, ALIGN=2

                  prvInsertBlockIntoFreeList PROC
;;;418    
;;;419    static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
000000  e59f1078          LDR      r1,|L2.128|
;;;420    {
000004  e92d4010          PUSH     {r4,lr}
                  |L2.8|
;;;421    BlockLink_t *pxIterator;
;;;422    uint8_t *puc;
;;;423    
;;;424    	/* Iterate through the list until a block is found that has a higher address
;;;425    	than the block being inserted. */
;;;426    	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
000008  e5912000          LDR      r2,[r1,#0]
00000c  e1520000          CMP      r2,r0
000010  31a01002          MOVCC    r1,r2
000014  3afffffb          BCC      |L2.8|
;;;427    	{
;;;428    		/* Nothing to do here, just iterate to the right position. */
;;;429    	}
;;;430    
;;;431    	/* Do the block being inserted, and the block it is being inserted after
;;;432    	make a contiguous block of memory? */
;;;433    	puc = ( uint8_t * ) pxIterator;
;;;434    	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
000018  e5913004          LDR      r3,[r1,#4]
00001c  e083c001          ADD      r12,r3,r1
000020  e15c0000          CMP      r12,r0
000024  1a000003          BNE      |L2.56|
;;;435    	{
;;;436    		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
000028  e5900004          LDR      r0,[r0,#4]
00002c  e0800003          ADD      r0,r0,r3
000030  e5810004          STR      r0,[r1,#4]
;;;437    		pxBlockToInsert = pxIterator;
000034  e1a00001          MOV      r0,r1
                  |L2.56|
;;;438    	}
;;;439    	else
;;;440    	{
;;;441    		mtCOVERAGE_TEST_MARKER();
;;;442    	}
;;;443    
;;;444    	/* Do the block being inserted, and the block it is being inserted before
;;;445    	make a contiguous block of memory? */
;;;446    	puc = ( uint8_t * ) pxBlockToInsert;
;;;447    	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
000038  e5903004          LDR      r3,[r0,#4]
00003c  e083c000          ADD      r12,r3,r0
000040  e15c0002          CMP      r12,r2
000044  1a000009          BNE      |L2.112|
;;;448    	{
;;;449    		if( pxIterator->pxNextFreeBlock != pxEnd )
000048  e59fc034          LDR      r12,|L2.132|
00004c  e59cc000          LDR      r12,[r12,#0]  ; pxEnd
000050  e152000c          CMP      r2,r12
;;;450    		{
;;;451    			/* Form one big block from the two blocks. */
;;;452    			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
;;;453    			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
;;;454    		}
;;;455    		else
;;;456    		{
;;;457    			pxBlockToInsert->pxNextFreeBlock = pxEnd;
000054  0580c000          STREQ    r12,[r0,#0]
000058  0a000005          BEQ      |L2.116|
00005c  e5922004          LDR      r2,[r2,#4]            ;452
000060  e0822003          ADD      r2,r2,r3              ;452
000064  e5802004          STR      r2,[r0,#4]            ;453
000068  e5912000          LDR      r2,[r1,#0]            ;453
00006c  e5922000          LDR      r2,[r2,#0]            ;453
                  |L2.112|
;;;458    		}
;;;459    	}
;;;460    	else
;;;461    	{
;;;462    		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
000070  e5802000          STR      r2,[r0,#0]
                  |L2.116|
;;;463    	}
;;;464    
;;;465    	/* If the block being inserted plugged a gab, so was merged with the block
;;;466    	before and the block after, then it's pxNextFreeBlock pointer will have
;;;467    	already been set, and should not be set here as that would make it point
;;;468    	to itself. */
;;;469    	if( pxIterator != pxBlockToInsert )
000074  e1510000          CMP      r1,r0
;;;470    	{
;;;471    		pxIterator->pxNextFreeBlock = pxBlockToInsert;
000078  15810000          STRNE    r0,[r1,#0]
;;;472    	}
;;;473    	else
;;;474    	{
;;;475    		mtCOVERAGE_TEST_MARKER();
;;;476    	}
;;;477    }
00007c  e8bd8010          POP      {r4,pc}
;;;478    
                          ENDP

                  |L2.128|
                          DCD      ||.data||+0x10
                  |L2.132|
                          DCD      ||.data||

                          AREA ||i.pvPortMalloc||, CODE, READONLY, ALIGN=2

                  pvPortMalloc PROC
;;;154    
;;;155    void *pvPortMalloc( size_t xWantedSize )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;156    {
000004  e1a04000          MOV      r4,r0
;;;157    BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
;;;158    void *pvReturn = NULL;
000008  e3a05000          MOV      r5,#0
;;;159    
;;;160    	vTaskSuspendAll();
00000c  ebfffffe          BL       vTaskSuspendAll
;;;161    	{
;;;162    		/* If this is the first call to malloc then the heap will require
;;;163    		initialisation to setup the list of free blocks. */
;;;164    		if( pxEnd == NULL )
000010  e59f60e8          LDR      r6,|L3.256|
000014  e5960000          LDR      r0,[r6,#0]  ; pxEnd
000018  e3500000          CMP      r0,#0
;;;165    		{
;;;166    			prvHeapInit();
00001c  0bfffffe          BLEQ     prvHeapInit
;;;167    		}
;;;168    		else
;;;169    		{
;;;170    			mtCOVERAGE_TEST_MARKER();
;;;171    		}
;;;172    
;;;173    		/* Check the requested block size is not so large that the top bit is
;;;174    		set.  The top bit of the block size member of the BlockLink_t structure
;;;175    		is used to determine who owns the block - the application or the
;;;176    		kernel, so it must be free. */
;;;177    		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
000020  e596000c          LDR      r0,[r6,#0xc]  ; xBlockAllocatedBit
000024  e1140000          TST      r4,r0
000028  1a000031          BNE      |L3.244|
;;;178    		{
;;;179    			/* The wanted size is increased so it can contain a BlockLink_t
;;;180    			structure in addition to the requested amount of bytes. */
;;;181    			if( xWantedSize > 0 )
00002c  e3540000          CMP      r4,#0
000030  0a00002f          BEQ      |L3.244|
;;;182    			{
;;;183    				xWantedSize += xHeapStructSize;
000034  e2841008          ADD      r1,r4,#8
;;;184    
;;;185    				/* Ensure that blocks are always aligned to the required number
;;;186    				of bytes. */
;;;187    				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
000038  e3110007          TST      r1,#7
;;;188    				{
;;;189    					/* Byte alignment required. */
;;;190    					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
00003c  12010007          ANDNE    r0,r1,#7
000040  12600008          RSBNE    r0,r0,#8
000044  10811000          ADDNE    r1,r1,r0
;;;191    					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;192    				}
;;;193    				else
;;;194    				{
;;;195    					mtCOVERAGE_TEST_MARKER();
;;;196    				}
;;;197    			}
;;;198    			else
;;;199    			{
;;;200    				mtCOVERAGE_TEST_MARKER();
;;;201    			}
;;;202    
;;;203    			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
000048  e3510000          CMP      r1,#0
00004c  0a000028          BEQ      |L3.244|
000050  e5960004          LDR      r0,[r6,#4]  ; xFreeBytesRemaining
000054  e1510000          CMP      r1,r0
;;;204    			{
;;;205    				/* Traverse the list from the start	(lowest address) block until
;;;206    				one	of adequate size is found. */
;;;207    				pxPreviousBlock = &xStart;
000058  959f30a4          LDRLS    r3,|L3.260|
;;;208    				pxBlock = xStart.pxNextFreeBlock;
00005c  92830000          ADDLS    r0,r3,#0
000060  95904000          LDRLS    r4,[r0,#0]  ; xStart
000064  8a000022          BHI      |L3.244|
                  |L3.104|
;;;209    				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
000068  e5940004          LDR      r0,[r4,#4]
00006c  e1500001          CMP      r0,r1
000070  2a000004          BCS      |L3.136|
000074  e5942000          LDR      r2,[r4,#0]
000078  e3520000          CMP      r2,#0
;;;210    				{
;;;211    					pxPreviousBlock = pxBlock;
00007c  11a03004          MOVNE    r3,r4
;;;212    					pxBlock = pxBlock->pxNextFreeBlock;
000080  11a04002          MOVNE    r4,r2
000084  1afffff7          BNE      |L3.104|
                  |L3.136|
;;;213    				}
;;;214    
;;;215    				/* If the end marker was reached then a block of adequate size
;;;216    				was	not found. */
;;;217    				if( pxBlock != pxEnd )
000088  e5960000          LDR      r0,[r6,#0]  ; pxEnd
00008c  e1540000          CMP      r4,r0
000090  0a000017          BEQ      |L3.244|
;;;218    				{
;;;219    					/* Return the memory space pointed to - jumping over the
;;;220    					BlockLink_t structure at its start. */
;;;221    					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
000094  e5930000          LDR      r0,[r3,#0]
000098  e2805008          ADD      r5,r0,#8
;;;222    
;;;223    					/* This block is being returned for use so must be taken out
;;;224    					of the list of free blocks. */
;;;225    					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
00009c  e5940000          LDR      r0,[r4,#0]
;;;226    
;;;227    					/* If the block is larger than required it can be split into
;;;228    					two. */
;;;229    					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
0000a0  e5830000          STR      r0,[r3,#0]
0000a4  e5940004          LDR      r0,[r4,#4]
0000a8  e0402001          SUB      r2,r0,r1
0000ac  e3520010          CMP      r2,#0x10
0000b0  9a000003          BLS      |L3.196|
;;;230    					{
;;;231    						/* This block is to be split into two.  Create a new
;;;232    						block following the number of bytes requested. The void
;;;233    						cast is used to prevent byte alignment warnings from the
;;;234    						compiler. */
;;;235    						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
0000b4  e0840001          ADD      r0,r4,r1
;;;236    						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
;;;237    
;;;238    						/* Calculate the sizes of two blocks split from the
;;;239    						single block. */
;;;240    						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
;;;241    						pxBlock->xBlockSize = xWantedSize;
0000b8  e5802004          STR      r2,[r0,#4]
0000bc  e5841004          STR      r1,[r4,#4]
;;;242    
;;;243    						/* Insert the new block into the list of free blocks. */
;;;244    						prvInsertBlockIntoFreeList( pxNewBlockLink );
0000c0  ebfffffe          BL       prvInsertBlockIntoFreeList
                  |L3.196|
;;;245    					}
;;;246    					else
;;;247    					{
;;;248    						mtCOVERAGE_TEST_MARKER();
;;;249    					}
;;;250    
;;;251    					xFreeBytesRemaining -= pxBlock->xBlockSize;
0000c4  e5940004          LDR      r0,[r4,#4]
0000c8  e5961004          LDR      r1,[r6,#4]  ; xFreeBytesRemaining
0000cc  e0411000          SUB      r1,r1,r0
;;;252    
;;;253    					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
0000d0  e5861004          STR      r1,[r6,#4]  ; xFreeBytesRemaining
0000d4  e5962008          LDR      r2,[r6,#8]  ; xMinimumEverFreeBytesRemaining
0000d8  e1510002          CMP      r1,r2
;;;254    					{
;;;255    						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
0000dc  35861008          STRCC    r1,[r6,#8]  ; xMinimumEverFreeBytesRemaining
;;;256    					}
;;;257    					else
;;;258    					{
;;;259    						mtCOVERAGE_TEST_MARKER();
;;;260    					}
;;;261    
;;;262    					/* The block is being returned - it is allocated and owned
;;;263    					by the application and has no "next" block. */
;;;264    					pxBlock->xBlockSize |= xBlockAllocatedBit;
0000e0  e596100c          LDR      r1,[r6,#0xc]  ; xBlockAllocatedBit
0000e4  e1800001          ORR      r0,r0,r1
0000e8  e5840004          STR      r0,[r4,#4]
;;;265    					pxBlock->pxNextFreeBlock = NULL;
0000ec  e3a00000          MOV      r0,#0
0000f0  e5840000          STR      r0,[r4,#0]
                  |L3.244|
;;;266    				}
;;;267    				else
;;;268    				{
;;;269    					mtCOVERAGE_TEST_MARKER();
;;;270    				}
;;;271    			}
;;;272    			else
;;;273    			{
;;;274    				mtCOVERAGE_TEST_MARKER();
;;;275    			}
;;;276    		}
;;;277    		else
;;;278    		{
;;;279    			mtCOVERAGE_TEST_MARKER();
;;;280    		}
;;;281    
;;;282    		traceMALLOC( pvReturn, xWantedSize );
;;;283    	}
;;;284    	( void ) xTaskResumeAll();
0000f4  ebfffffe          BL       xTaskResumeAll
;;;285    
;;;286    	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
;;;287    	{
;;;288    		if( pvReturn == NULL )
;;;289    		{
;;;290    			extern void vApplicationMallocFailedHook( void );
;;;291    			vApplicationMallocFailedHook();
;;;292    		}
;;;293    		else
;;;294    		{
;;;295    			mtCOVERAGE_TEST_MARKER();
;;;296    		}
;;;297    	}
;;;298    	#endif
;;;299    
;;;300    	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
;;;301    	return pvReturn;
0000f8  e1a00005          MOV      r0,r5
;;;302    }
0000fc  e8bd8070          POP      {r4-r6,pc}
;;;303    /*-----------------------------------------------------------*/
                          ENDP

                  |L3.256|
                          DCD      ||.data||
                  |L3.260|
                          DCD      ||.data||+0x10

                          AREA ||i.vPortFree||, CODE, READONLY, ALIGN=2

                  vPortFree PROC
;;;304    
;;;305    void vPortFree( void *pv )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;306    {
;;;307    uint8_t *puc = ( uint8_t * ) pv;
;;;308    BlockLink_t *pxLink;
;;;309    
;;;310    	if( pv != NULL )
000004  e3500000          CMP      r0,#0
;;;311    	{
;;;312    		/* The memory being freed will have an BlockLink_t structure immediately
;;;313    		before it. */
;;;314    		puc -= xHeapStructSize;
;;;315    
;;;316    		/* This casting is to keep the compiler from issuing warnings. */
;;;317    		pxLink = ( void * ) puc;
;;;318    
;;;319    		/* Check the block is actually allocated. */
;;;320    		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
;;;321    		configASSERT( pxLink->pxNextFreeBlock == NULL );
;;;322    
;;;323    		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
;;;324    		{
;;;325    			if( pxLink->pxNextFreeBlock == NULL )
;;;326    			{
;;;327    				/* The block is being returned to the heap - it is no longer
;;;328    				allocated. */
;;;329    				pxLink->xBlockSize &= ~xBlockAllocatedBit;
;;;330    
;;;331    				vTaskSuspendAll();
;;;332    				{
;;;333    					/* Add this block to the list of free blocks. */
;;;334    					xFreeBytesRemaining += pxLink->xBlockSize;
;;;335    					traceFREE( pv, pxLink->xBlockSize );
;;;336    					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
;;;337    				}
;;;338    				( void ) xTaskResumeAll();
;;;339    			}
;;;340    			else
;;;341    			{
;;;342    				mtCOVERAGE_TEST_MARKER();
;;;343    			}
;;;344    		}
;;;345    		else
;;;346    		{
;;;347    			mtCOVERAGE_TEST_MARKER();
;;;348    		}
;;;349    	}
;;;350    }
000008  08bd8070          POPEQ    {r4-r6,pc}
00000c  e2404008          SUB      r4,r0,#8              ;314
000010  e59f5044          LDR      r5,|L4.92|
000014  e5100004          LDR      r0,[r0,#-4]           ;323
000018  e595100c          LDR      r1,[r5,#0xc]          ;323  ; xBlockAllocatedBit
00001c  e1100001          TST      r0,r1                 ;323
000020  08bd8070          POPEQ    {r4-r6,pc}
000024  e5942000          LDR      r2,[r4,#0]            ;325
000028  e3520000          CMP      r2,#0                 ;325
00002c  18bd8070          POPNE    {r4-r6,pc}
000030  e1c00001          BIC      r0,r0,r1              ;329
000034  e5840004          STR      r0,[r4,#4]            ;329
000038  ebfffffe          BL       vTaskSuspendAll
00003c  e5940004          LDR      r0,[r4,#4]            ;334
000040  e5951004          LDR      r1,[r5,#4]            ;334  ; xFreeBytesRemaining
000044  e0800001          ADD      r0,r0,r1              ;334
000048  e5850004          STR      r0,[r5,#4]            ;334  ; xFreeBytesRemaining
00004c  e1a00004          MOV      r0,r4                 ;336
000050  ebfffffe          BL       prvInsertBlockIntoFreeList
000054  e8bd4070          POP      {r4-r6,lr}            ;338
000058  eafffffe          B        xTaskResumeAll
;;;351    /*-----------------------------------------------------------*/
                          ENDP

                  |L4.92|
                          DCD      ||.data||

                          AREA ||i.vPortInitialiseBlocks||, CODE, READONLY, ALIGN=2

                  vPortInitialiseBlocks PROC
;;;364    
;;;365    void vPortInitialiseBlocks( void )
000000  e12fff1e          BX       lr
;;;366    {
;;;367    	/* This just exists to keep the linker quiet. */
;;;368    }
;;;369    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xPortGetFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetFreeHeapSize PROC
;;;352    
;;;353    size_t xPortGetFreeHeapSize( void )
000000  e59f0004          LDR      r0,|L6.12|
;;;354    {
;;;355    	return xFreeBytesRemaining;
000004  e5900004          LDR      r0,[r0,#4]  ; xFreeBytesRemaining
;;;356    }
000008  e12fff1e          BX       lr
;;;357    /*-----------------------------------------------------------*/
                          ENDP

                  |L6.12|
                          DCD      ||.data||

                          AREA ||i.xPortGetMinimumEverFreeHeapSize||, CODE, READONLY, ALIGN=2

                  xPortGetMinimumEverFreeHeapSize PROC
;;;358    
;;;359    size_t xPortGetMinimumEverFreeHeapSize( void )
000000  e59f0004          LDR      r0,|L7.12|
;;;360    {
;;;361    	return xMinimumEverFreeBytesRemaining;
000004  e5900008          LDR      r0,[r0,#8]  ; xMinimumEverFreeBytesRemaining
;;;362    }
000008  e12fff1e          BX       lr
;;;363    /*-----------------------------------------------------------*/
                          ENDP

                  |L7.12|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  ucHeap
                          %        262144

                          AREA ||.data||, DATA, ALIGN=2

                  pxEnd
                          DCD      0x00000000
                  xFreeBytesRemaining
                          DCD      0x00000000
                  xMinimumEverFreeBytesRemaining
                          DCD      0x00000000
                  xBlockAllocatedBit
                          DCD      0x00000000
                  xStart
                          %        8
