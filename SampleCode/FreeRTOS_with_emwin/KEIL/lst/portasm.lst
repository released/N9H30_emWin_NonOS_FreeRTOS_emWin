


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engi
                       neers Ltd.
    3 00000000         ;    All rights reserved
    4 00000000         ; 
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    9 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
   10 00000000         ;     *    available.                                   
                                             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   13 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   14 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   15 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   16 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *
   17 00000000         ;     *    for microcontrollers - completely free of cha
                       rge!                  *
   18 00000000         ;     *                                                 
                                             *
   19 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   20 00000000         ;     *                                                 
                                             *
   21 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   22 00000000         ;     *                                                 
                                             *
   23 00000000         ;    ***************************************************
                       ************************
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;    This file is part of the FreeRTOS distribution.
   27 00000000         ;
   28 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   29 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   30 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   31 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   32 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   33 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   34 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i



ARM Macro Assembler    Page 2 


                       t will be useful, but
   35 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   36 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   37 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   38 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   39 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   40 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   41 00000000         ;    FreeRTOS WEB site.
   42 00000000         ;
   43 00000000         ;    1 tab == 4 spaces!
   44 00000000         ;
   45 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   46 00000000         ;    contact details.
   47 00000000         ;
   48 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   49 00000000         ;    critical systems.
   50 00000000         ;
   51 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   52 00000000         ;    licensing and training services.
   53 00000000         ;*/
   54 00000000         
   55 00000000                 INCLUDE          portmacro.inc
    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engi
                       neers Ltd.
    3 00000000         ;    All rights reserved
    4 00000000         ; 
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    9 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
   10 00000000         ;     *    available.                                   
                                             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   13 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   14 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   15 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   16 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *



ARM Macro Assembler    Page 3 


   17 00000000         ;     *    for microcontrollers - completely free of cha
                       rge!                  *
   18 00000000         ;     *                                                 
                                             *
   19 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   20 00000000         ;     *                                                 
                                             *
   21 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   22 00000000         ;     *                                                 
                                             *
   23 00000000         ;    ***************************************************
                       ************************
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;    This file is part of the FreeRTOS distribution.
   27 00000000         ;
   28 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   29 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   30 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   31 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   32 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   33 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   34 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i
                       t will be useful, but
   35 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   36 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   37 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   38 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   39 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   40 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   41 00000000         ;    FreeRTOS WEB site.
   42 00000000         ;
   43 00000000         ;    1 tab == 4 spaces!
   44 00000000         ;
   45 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   46 00000000         ;    contact details.
   47 00000000         ;
   48 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   49 00000000         ;    critical systems.
   50 00000000         ;
   51 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   52 00000000         ;    licensing and training services.



ARM Macro Assembler    Page 4 


   53 00000000         ;*/
   54 00000000         
   55 00000000                 IMPORT           ulCriticalNesting ;
   56 00000000                 IMPORT           pxCurrentTCB ;
   57 00000000         
   58 00000000         
   59 00000000                 MACRO
   60 00000000                 portRESTORE_CONTEXT
   61 00000000         
   62 00000000         
   63 00000000                 LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000000                 LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 00000000                 LDR              LR, [R0]
   66 00000000         
   67 00000000                 LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000000                 LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000000                 STR              R1, [R0]    ;
   70 00000000         
   71 00000000                 LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 00000000                 MSR              SPSR_cxsf, R0 ;
   73 00000000         
   74 00000000                 LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 00000000                 NOP                          ;
   76 00000000         
   77 00000000                 LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 00000000         
   79 00000000         ; And return - correcting the offset in the LR to obtain
                        ...
   80 00000000                 SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 00000000         
   82 00000000                 MEND
   83 00000000         
   84 00000000         ; /*****************************************************
                       *****************/
   85 00000000         
   86 00000000                 MACRO
   87 00000000                 portSAVE_CONTEXT
   88 00000000         
   89 00000000         
   90 00000000                 STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 00000000         
   92 00000000                 STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po



ARM Macro Assembler    Page 5 


                                                            inter.
   93 00000000                 NOP                          ;
   94 00000000                 SUB              SP, SP, #4  ;
   95 00000000                 LDMIA            SP!,{R0}    ;
   96 00000000         
   97 00000000                 STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 00000000                 MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 00000000                 LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  100 00000000         
  101 00000000                 STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 00000000                 NOP                          ;
  103 00000000                 SUB              LR, LR, #60 ;
  104 00000000         
  105 00000000                 MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  106 00000000                 STMDB            LR!, {R0}   ;
  107 00000000         
  108 00000000                 LDR              R0, =ulCriticalNesting ;
  109 00000000                 LDR              R0, [R0]    ;
  110 00000000                 STMDB            LR!, {R0}   ;
  111 00000000         
  112 00000000                 LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000000                 LDR              R1, [R0]    ;    
  114 00000000                 STR              LR, [R1]    ;
  115 00000000         
  116 00000000                 MEND
  117 00000000         
  118 00000000                 END
   56 00000000         
   57 00000000                 IMPORT           vTaskSwitchContext
   58 00000000                 IMPORT           xTaskIncrementTick
   59 00000000                 IMPORT           systemIrqHandler
   60 00000000         
   61 00000000                 EXPORT           vPortYieldProcessor
   62 00000000                 EXPORT           vPortStartFirstTask
   63 00000000                 EXPORT           vPreemptiveTick
   64 00000000                 EXPORT           vPortYield
   65 00000000         
   66 00000000 B8002118 
                       REG_AIC_IPER
                               EQU              0xB8002118
   67 00000000 B8002120 
                       REG_AIC_ISNR
                               EQU              0xB8002120
   68 00000000 B8002150 
                       REG_AIC_EOSCR
                               EQU              0xB8002150
   69 00000000 B8001060 



ARM Macro Assembler    Page 6 


                       REG_TISR
                               EQU              0xB8001060
   70 00000000 00000011 
                       IRQ_TMR1
                               EQU              0x00000011
   71 00000000 00000002 
                       TIF1    EQU              0x00000002
   72 00000000         
   73 00000000                 ARM
   74 00000000                 AREA             PORT_ASM, CODE, READONLY
   75 00000000         
   76 00000000         
   77 00000000         
   78 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   79 00000000         ; Starting the first task is done by just restoring the 
                       context 
   80 00000000         ; setup by pxPortInitialiseStack
   81 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   82 00000000         vPortStartFirstTask
   83 00000000         
   84 00000000                 PRESERVE8
   85 00000000         
   86 00000000                 portRESTORE_CONTEXT
   61 00000000         
   62 00000000         
   63 00000000 E59F0198        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000004 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 00000008 E590E000        LDR              LR, [R0]
   66 0000000C         
   67 0000000C E59F0190        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000010 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000014 E5801000        STR              R1, [R0]    ;
   70 00000018         
   71 00000018 E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 0000001C E16FF000        MSR              SPSR_cxsf, R0 ;
   73 00000020         
   74 00000020 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 00000024 E1A00000        NOP                          ;
   76 00000028         
   77 00000028 E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 0000002C         
   79 0000002C         ; And return - correcting the offset in the LR to obtain
                        ...
   80 0000002C E25EF004        SUBS             PC, LR, #4  ; ...the correct ad



ARM Macro Assembler    Page 7 


                                                            dress.
   81 00000030         
   87 00000030         
   88 00000030         vPortYield
   89 00000030         
   90 00000030                 PRESERVE8
   91 00000030         
   92 00000030 EF000000        SVC              0
   93 00000034 E12FFF1E        bx               lr
   94 00000038         
   95 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
   96 00000038         ; Interrupt service routine for the SWI interrupt.  The 
                       vector table is
   97 00000038         ; configured in the startup.s file.
   98 00000038         ;
   99 00000038         ; vPortYieldProcessor() is used to manually force a cont
                       ext switch.  The
  100 00000038         ; SWI interrupt is generated by a call to taskYIELD() or
                        portYIELD().
  101 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;
  102 00000038         
  103 00000038         vPortYieldProcessor
  104 00000038         
  105 00000038                 PRESERVE8
  106 00000038         
  107 00000038         ; Within an IRQ ISR the link register has an offset from
                        the true return 
  108 00000038         ; address, but an SWI ISR does not.  Add the offset manu
                       ally so the same 
  109 00000038         ; ISR return code can be used in both cases.
  110 00000038 E28EE004        ADD              LR, LR, #4
  111 0000003C         
  112 0000003C         ; Perform the context switch.
  113 0000003C                 portSAVE_CONTEXT             ; Save current task
                                                             context    
   88 0000003C         
   89 0000003C         
   90 0000003C E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 00000040         
   92 00000040 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   93 00000044 E1A00000        NOP                          ;
   94 00000048 E24DD004        SUB              SP, SP, #4  ;
   95 0000004C E8BD0001        LDMIA            SP!,{R0}    ;
   96 00000050         
   97 00000050 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 00000054 E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 00000058 E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.



ARM Macro Assembler    Page 8 


  100 0000005C         
  101 0000005C E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 00000060 E1A00000        NOP                          ;
  103 00000064 E24EE03C        SUB              LR, LR, #60 ;
  104 00000068         
  105 00000068 E14F0000        MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  106 0000006C E92E0001        STMDB            LR!, {R0}   ;
  107 00000070         
  108 00000070 E59F012C        LDR              R0, =ulCriticalNesting ;
  109 00000074 E5900000        LDR              R0, [R0]    ;
  110 00000078 E92E0001        STMDB            LR!, {R0}   ;
  111 0000007C         
  112 0000007C E59F011C        LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000080 E5901000        LDR              R1, [R0]    ;    
  114 00000084 E581E000        STR              LR, [R1]    ;
  115 00000088         
  114 00000088 E59F0118        LDR              R0, =vTaskSwitchContext ; Get t
                                                            he address of the c
                                                            ontext switch funct
                                                            ion
  115 0000008C E1A0E00F        MOV              LR, PC      ; Store the return 
                                                            address
  116 00000090 E12FFF10        BX               R0          ; Call the contedxt
                                                             switch function
  117 00000094                 portRESTORE_CONTEXT          ; restore the conte
                                                            xt of the selected 
                                                            task 
   61 00000094         
   62 00000094         
   63 00000094 E59F0104        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000098 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 0000009C E590E000        LDR              LR, [R0]
   66 000000A0         
   67 000000A0 E59F00FC        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 000000A4 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 000000A8 E5801000        STR              R1, [R0]    ;
   70 000000AC         
   71 000000AC E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 000000B0 E16FF000        MSR              SPSR_cxsf, R0 ;
   73 000000B4         
   74 000000B4 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.



ARM Macro Assembler    Page 9 


   75 000000B8 E1A00000        NOP                          ;
   76 000000BC         
   77 000000BC E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 000000C0         
   79 000000C0         ; And return - correcting the offset in the LR to obtain
                        ...
   80 000000C0 E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 000000C4         
  118 000000C4         
  119 000000C4         
  120 000000C4         
  121 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;
  122 000000C4         ; Interrupt service routine for preemptive scheduler tic
                       k timer
  123 000000C4         ; Only used if portUSE_PREEMPTION is set to 1 in portmac
                       ro.h
  124 000000C4         ;
  125 000000C4         ; Uses timer 1 of N9H30 Family
  126 000000C4         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;; 
  127 000000C4         
  128 000000C4         vPreemptiveTick
  129 000000C4         
  130 000000C4                 PRESERVE8
  131 000000C4         
  132 000000C4                 portSAVE_CONTEXT             ; Save the context 
                                                            of the current task
                                                            .
   88 000000C4         
   89 000000C4         
   90 000000C4 E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   91 000000C8         
   92 000000C8 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   93 000000CC E1A00000        NOP                          ;
   94 000000D0 E24DD004        SUB              SP, SP, #4  ;
   95 000000D4 E8BD0001        LDMIA            SP!,{R0}    ;
   96 000000D8         
   97 000000D8 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
   98 000000DC E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
   99 000000E0 E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  100 000000E4         
  101 000000E4 E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  102 000000E8 E1A00000        NOP                          ;



ARM Macro Assembler    Page 10 


  103 000000EC E24EE03C        SUB              LR, LR, #60 ;
  104 000000F0         
  105 000000F0 E14F0000        MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  106 000000F4 E92E0001        STMDB            LR!, {R0}   ;
  107 000000F8         
  108 000000F8 E59F00A4        LDR              R0, =ulCriticalNesting ;
  109 000000FC E5900000        LDR              R0, [R0]    ;
  110 00000100 E92E0001        STMDB            LR!, {R0}   ;
  111 00000104         
  112 00000104 E59F0094        LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  113 00000108 E5901000        LDR              R1, [R0]    ;    
  114 0000010C E581E000        STR              LR, [R1]    ;
  115 00000110         
  133 00000110         
  134 00000110 E59F0094        LDR              R0, =REG_AIC_IPER ;
  135 00000114 E5900000        LDR              R0, [R0]
  136 00000118 E59F1090        LDR              R1, =REG_AIC_ISNR ;
  137 0000011C E5911000        LDR              R1, [R1]
  138 00000120         
  139 00000120 E3510011        CMP              R1, #IRQ_TMR1 ; Check the inter
                                                            rupt is from Timer 
                                                            1 or not.
  140 00000124 0A000003        BEQ              SkipIrqHandler
  141 00000128         
  142 00000128 E59F2084        LDR              R2, =systemIrqHandler ; Call to
                                                             real interrupt han
                                                            dler of non-OS.    
                                                            
  143 0000012C E1A0E00F        MOV              LR, PC      ;
  144 00000130 E12FFF12        BX               R2          ;
  145 00000134         
  146 00000134 EA00000D        B                RestoreContext
  147 00000138         
  148 00000138         SkipIrqHandler
  149 00000138 E59F0078        LDR              R0, =xTaskIncrementTick ; Incre
                                                            ment the tick count
                                                            .  
  150 0000013C E1A0E00F        MOV              LR, PC      ; This may make a d
                                                            elayed task ready
  151 00000140 E12FFF10        BX               R0          ; to run.
  152 00000144         
  153 00000144 E3500000        CMP              R0, #0
  154 00000148 0A000002        BEQ              SkipContextSwitch
  155 0000014C E59F0054        LDR              R0, =vTaskSwitchContext ; Find 
                                                            the highest priorit
                                                            y task that 
  156 00000150 E1A0E00F        MOV              LR, PC      ; is ready to run.
  157 00000154 E12FFF10        BX               R0
  158 00000158         
  159 00000158         SkipContextSwitch
  160 00000158 E3A00002        MOV              R0, #TIF1   ; Clear the timer e
                                                            vent.
  161 0000015C E59F1058        LDR              R1, =REG_TISR
  162 00000160 E5810000        STR              R0, [R1]
  163 00000164         
  164 00000164 E59F0054        LDR              R0, =REG_AIC_EOSCR ; Acknowledg



ARM Macro Assembler    Page 11 


                                                            e the interrupt.
  165 00000168 E3A01001        LDR              R1, =1
  166 0000016C E5801000        STR              R1,[R0]
  167 00000170         
  168 00000170         RestoreContext
  169 00000170                 portRESTORE_CONTEXT          ; Restore the conte
                                                            xt of the highest 
   61 00000170         
   62 00000170         
   63 00000170 E59F0028        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   64 00000174 E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   65 00000178 E590E000        LDR              LR, [R0]
   66 0000017C         
   67 0000017C E59F0020        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on... 
   68 00000180 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   69 00000184 E5801000        STR              R1, [R0]    ;
   70 00000188         
   71 00000188 E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   72 0000018C E16FF000        MSR              SPSR_cxsf, R0 ;
   73 00000190         
   74 00000190 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   75 00000194 E1A00000        NOP                          ;
   76 00000198         
   77 00000198 E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   78 0000019C         
   79 0000019C         ; And return - correcting the offset in the LR to obtain
                        ...
   80 0000019C E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   81 000001A0         
  170 000001A0         ; priority task that is ready to run.
  171 000001A0                 END
              00000000 
              00000000 
              00000000 
              B8002118 
              B8002120 
              00000000 
              00000000 
              B8001060 
              B8002150 
Command Line: --debug --xref --diag_suppress=9931 --cpu=ARM926EJ-S --apcs=inter
work --depend=.\obj\portasm.d -o.\obj\portasm.o -IC:\Keil_v5\ARM\RV31\INC -IC:\
Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba --predefine="__UVISION_V
ERSION SETA 526" --list=.\lst\portasm.lst ..\..\..\ThirdParty\FreeRTOSV9.0.0\Fr
eeRTOS\Source\portable\RVDS\ARM9_N9H30\portASM.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

PORT_ASM 00000000

Symbol: PORT_ASM
   Definitions
      At line 74 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      None
Comment: PORT_ASM unused
RestoreContext 00000170

Symbol: RestoreContext
   Definitions
      At line 168 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 146 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: RestoreContext used once
SkipContextSwitch 00000158

Symbol: SkipContextSwitch
   Definitions
      At line 159 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 154 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: SkipContextSwitch used once
SkipIrqHandler 00000138

Symbol: SkipIrqHandler
   Definitions
      At line 148 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 140 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: SkipIrqHandler used once
vPortStartFirstTask 00000000

Symbol: vPortStartFirstTask
   Definitions
      At line 82 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 62 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
Comment: vPortStartFirstTask used once
vPortYield 00000030

Symbol: vPortYield
   Definitions
      At line 88 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 64 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
Comment: vPortYield used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

vPortYieldProcessor 00000038

Symbol: vPortYieldProcessor
   Definitions
      At line 103 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 61 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
Comment: vPortYieldProcessor used once
vPreemptiveTick 000000C4

Symbol: vPreemptiveTick
   Definitions
      At line 128 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 63 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
Comment: vPreemptiveTick used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IRQ_TMR1 00000011

Symbol: IRQ_TMR1
   Definitions
      At line 70 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 139 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: IRQ_TMR1 used once
REG_AIC_EOSCR B8002150

Symbol: REG_AIC_EOSCR
   Definitions
      At line 68 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 164 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: REG_AIC_EOSCR used once
REG_AIC_IPER B8002118

Symbol: REG_AIC_IPER
   Definitions
      At line 66 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 134 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: REG_AIC_IPER used once
REG_AIC_ISNR B8002120

Symbol: REG_AIC_ISNR
   Definitions
      At line 67 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 136 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: REG_AIC_ISNR used once
REG_TISR B8001060

Symbol: REG_TISR
   Definitions
      At line 69 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 161 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: REG_TISR used once
TIF1 00000002

Symbol: TIF1
   Definitions
      At line 71 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 160 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

Comment: TIF1 used once
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

pxCurrentTCB 00000000

Symbol: pxCurrentTCB
   Definitions
      At line 56 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portmacro.inc
   Uses
      At line 63 in macro portRESTORE_CONTEXT
      at line 86 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
      At line 112 in macro portSAVE_CONTEXT
      at line 113 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s

systemIrqHandler 00000000

Symbol: systemIrqHandler
   Definitions
      At line 59 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 142 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
Comment: systemIrqHandler used once
ulCriticalNesting 00000000

Symbol: ulCriticalNesting
   Definitions
      At line 55 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portmacro.inc
   Uses
      At line 67 in macro portRESTORE_CONTEXT
      at line 86 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
      At line 108 in macro portSAVE_CONTEXT
      at line 113 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s

vTaskSwitchContext 00000000

Symbol: vTaskSwitchContext
   Definitions
      At line 57 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 114 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s
      At line 155 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s

xTaskIncrementTick 00000000

Symbol: xTaskIncrementTick
   Definitions
      At line 58 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\por
table\RVDS\ARM9_N9H30\portASM.s
   Uses
      At line 149 in file ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\po
rtable\RVDS\ARM9_N9H30\portASM.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: xTaskIncrementTick used once
5 symbols
352 symbols in table
