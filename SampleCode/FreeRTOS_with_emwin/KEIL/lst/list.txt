; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\list.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\list.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\list.crf ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\list.c]
                          ARM

                          AREA ||i.uxListRemove||, CODE, READONLY, ALIGN=2

                  uxListRemove PROC
;;;211    
;;;212    UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
000000  e5902008          LDR      r2,[r0,#8]
;;;213    {
;;;214    /* The list item knows which list it is in.  Obtain the list from the list
;;;215    item. */
;;;216    List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
;;;217    
;;;218    	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
000004  e5903004          LDR      r3,[r0,#4]
000008  e5901010          LDR      r1,[r0,#0x10]
;;;219    	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
00000c  e5832008          STR      r2,[r3,#8]
000010  e990000c          LDMIB    r0,{r2,r3}
;;;220    
;;;221    	/* Only used during decision coverage testing. */
;;;222    	mtCOVERAGE_TEST_DELAY();
;;;223    
;;;224    	/* Make sure the index is left pointing to a valid item. */
;;;225    	if( pxList->pxIndex == pxItemToRemove )
000014  e5832004          STR      r2,[r3,#4]
000018  e5912004          LDR      r2,[r1,#4]
00001c  e1520000          CMP      r2,r0
;;;226    	{
;;;227    		pxList->pxIndex = pxItemToRemove->pxPrevious;
000020  05902008          LDREQ    r2,[r0,#8]
000024  05812004          STREQ    r2,[r1,#4]
;;;228    	}
;;;229    	else
;;;230    	{
;;;231    		mtCOVERAGE_TEST_MARKER();
;;;232    	}
;;;233    
;;;234    	pxItemToRemove->pvContainer = NULL;
000028  e3a02000          MOV      r2,#0
;;;235    	( pxList->uxNumberOfItems )--;
00002c  e5802010          STR      r2,[r0,#0x10]
000030  e5910000          LDR      r0,[r1,#0]
000034  e2400001          SUB      r0,r0,#1
000038  e5810000          STR      r0,[r1,#0]
;;;236    
;;;237    	return pxList->uxNumberOfItems;
;;;238    }
00003c  e12fff1e          BX       lr
;;;239    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialise||, CODE, READONLY, ALIGN=2

                  vListInitialise PROC
;;;78     
;;;79     void vListInitialise( List_t * const pxList )
000000  e2801008          ADD      r1,r0,#8
;;;80     {
;;;81     	/* The list structure contains a list item which is used to mark the
;;;82     	end of the list.  To initialise the list the list end is inserted
;;;83     	as the only list entry. */
;;;84     	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
;;;85     
;;;86     	/* The list end value is the highest possible value in the list to
;;;87     	ensure it remains at the end of the list. */
;;;88     	pxList->xListEnd.xItemValue = portMAX_DELAY;
000004  e3e02000          MVN      r2,#0
;;;89     
;;;90     	/* The list end next and previous pointers point to itself so we know
;;;91     	when the list is empty. */
;;;92     	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000008  e9800006          STMIB    r0,{r1,r2}
;;;93     	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
00000c  e580100c          STR      r1,[r0,#0xc]
000010  e5801010          STR      r1,[r0,#0x10]
;;;94     
;;;95     	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
000014  e3a01000          MOV      r1,#0
000018  e5801000          STR      r1,[r0,#0]
;;;96     
;;;97     	/* Write known values into the list if
;;;98     	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;99     	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
;;;100    	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
;;;101    }
00001c  e12fff1e          BX       lr
;;;102    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInitialiseItem||, CODE, READONLY, ALIGN=2

                  vListInitialiseItem PROC
;;;103    
;;;104    void vListInitialiseItem( ListItem_t * const pxItem )
000000  e3a01000          MOV      r1,#0
;;;105    {
;;;106    	/* Make sure the list item is not recorded as being on a list. */
;;;107    	pxItem->pvContainer = NULL;
000004  e5801010          STR      r1,[r0,#0x10]
;;;108    
;;;109    	/* Write known values into the list item if
;;;110    	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
;;;111    	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;112    	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
;;;113    }
000008  e12fff1e          BX       lr
;;;114    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsert||, CODE, READONLY, ALIGN=2

                  vListInsert PROC
;;;144    
;;;145    void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  e92d4010          PUSH     {r4,lr}
;;;146    {
;;;147    ListItem_t *pxIterator;
;;;148    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
000004  e591c000          LDR      r12,[r1,#0]
;;;149    
;;;150    	/* Only effective when configASSERT() is also defined, these tests may catch
;;;151    	the list data structures being overwritten in memory.  They will not catch
;;;152    	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;153    	listTEST_LIST_INTEGRITY( pxList );
;;;154    	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;155    
;;;156    	/* Insert the new list item into the list, sorted in xItemValue order.
;;;157    
;;;158    	If the list already contains a list item with the same item value then the
;;;159    	new list item should be placed after it.  This ensures that TCB's which are
;;;160    	stored in ready lists (all of which have the same xItemValue value) get a
;;;161    	share of the CPU.  However, if the xItemValue is the same as the back marker
;;;162    	the iteration loop below will not end.  Therefore the value is checked
;;;163    	first, and the algorithm slightly modified if necessary. */
;;;164    	if( xValueOfInsertion == portMAX_DELAY )
000008  e37c0001          CMN      r12,#1
;;;165    	{
;;;166    		pxIterator = pxList->xListEnd.pxPrevious;
00000c  05902010          LDREQ    r2,[r0,#0x10]
;;;167    	}
;;;168    	else
;;;169    	{
;;;170    		/* *** NOTE ***********************************************************
;;;171    		If you find your application is crashing here then likely causes are
;;;172    		listed below.  In addition see http://www.freertos.org/FAQHelp.html for
;;;173    		more tips, and ensure configASSERT() is defined!
;;;174    		http://www.freertos.org/a00110.html#configASSERT
;;;175    
;;;176    			1) Stack overflow -
;;;177    			   see http://www.freertos.org/Stacks-and-stack-overflow-checking.html
;;;178    			2) Incorrect interrupt priority assignment, especially on Cortex-M
;;;179    			   parts where numerically high priority values denote low actual
;;;180    			   interrupt priorities, which can seem counter intuitive.  See
;;;181    			   http://www.freertos.org/RTOS-Cortex-M3-M4.html and the definition
;;;182    			   of configMAX_SYSCALL_INTERRUPT_PRIORITY on
;;;183    			   http://www.freertos.org/a00110.html
;;;184    			3) Calling an API function from within a critical section or when
;;;185    			   the scheduler is suspended, or calling an API function that does
;;;186    			   not end in "FromISR" from an interrupt.
;;;187    			4) Using a queue or semaphore before it has been initialised or
;;;188    			   before the scheduler has been started (are interrupts firing
;;;189    			   before vTaskStartScheduler() has been called?).
;;;190    		**********************************************************************/
;;;191    
;;;192    		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
000010  12802008          ADDNE    r2,r0,#8
000014  0a000004          BEQ      |L4.44|
                  |L4.24|
000018  e5923004          LDR      r3,[r2,#4]
00001c  e5934000          LDR      r4,[r3,#0]
000020  e154000c          CMP      r4,r12
000024  91a02003          MOVLS    r2,r3
000028  9afffffa          BLS      |L4.24|
                  |L4.44|
;;;193    		{
;;;194    			/* There is nothing to do here, just iterating to the wanted
;;;195    			insertion position. */
;;;196    		}
;;;197    	}
;;;198    
;;;199    	pxNewListItem->pxNext = pxIterator->pxNext;
00002c  e5923004          LDR      r3,[r2,#4]
;;;200    	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
000030  e5813004          STR      r3,[r1,#4]
;;;201    	pxNewListItem->pxPrevious = pxIterator;
000034  e5831008          STR      r1,[r3,#8]
;;;202    	pxIterator->pxNext = pxNewListItem;
000038  e5812008          STR      r2,[r1,#8]
;;;203    
;;;204    	/* Remember which list the item is in.  This allows fast removal of the
;;;205    	item later. */
;;;206    	pxNewListItem->pvContainer = ( void * ) pxList;
00003c  e5821004          STR      r1,[r2,#4]
;;;207    
;;;208    	( pxList->uxNumberOfItems )++;
000040  e5810010          STR      r0,[r1,#0x10]
000044  e5901000          LDR      r1,[r0,#0]
000048  e2811001          ADD      r1,r1,#1
00004c  e5801000          STR      r1,[r0,#0]
;;;209    }
000050  e8bd8010          POP      {r4,pc}
;;;210    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vListInsertEnd||, CODE, READONLY, ALIGN=2

                  vListInsertEnd PROC
;;;115    
;;;116    void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
000000  e5902004          LDR      r2,[r0,#4]
;;;117    {
;;;118    ListItem_t * const pxIndex = pxList->pxIndex;
;;;119    
;;;120    	/* Only effective when configASSERT() is also defined, these tests may catch
;;;121    	the list data structures being overwritten in memory.  They will not catch
;;;122    	data errors caused by incorrect configuration or use of FreeRTOS. */
;;;123    	listTEST_LIST_INTEGRITY( pxList );
;;;124    	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );
;;;125    
;;;126    	/* Insert a new list item into pxList, but rather than sort the list,
;;;127    	makes the new list item the last item to be removed by a call to
;;;128    	listGET_OWNER_OF_NEXT_ENTRY(). */
;;;129    	pxNewListItem->pxNext = pxIndex;
;;;130    	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
000004  e5812004          STR      r2,[r1,#4]
000008  e5923008          LDR      r3,[r2,#8]
;;;131    
;;;132    	/* Only used during decision coverage testing. */
;;;133    	mtCOVERAGE_TEST_DELAY();
;;;134    
;;;135    	pxIndex->pxPrevious->pxNext = pxNewListItem;
00000c  e5813008          STR      r3,[r1,#8]
000010  e5923008          LDR      r3,[r2,#8]
;;;136    	pxIndex->pxPrevious = pxNewListItem;
000014  e5831004          STR      r1,[r3,#4]
;;;137    
;;;138    	/* Remember which list the item is in. */
;;;139    	pxNewListItem->pvContainer = ( void * ) pxList;
000018  e5821008          STR      r1,[r2,#8]
;;;140    
;;;141    	( pxList->uxNumberOfItems )++;
00001c  e5810010          STR      r0,[r1,#0x10]
000020  e5901000          LDR      r1,[r0,#0]
000024  e2811001          ADD      r1,r1,#1
000028  e5801000          STR      r1,[r0,#0]
;;;142    }
00002c  e12fff1e          BX       lr
;;;143    /*-----------------------------------------------------------*/
                          ENDP

