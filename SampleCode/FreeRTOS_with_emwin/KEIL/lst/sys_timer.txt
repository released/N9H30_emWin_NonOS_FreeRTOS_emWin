; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\sys_timer.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\sys_timer.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\sys_timer.crf ..\..\..\Driver\Source\sys_timer.c]
                          ARM

                          AREA ||i.sysClearTimerEvent||, CODE, READONLY, ALIGN=2

                  sysClearTimerEvent PROC
;;;502     */
;;;503    void sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo)
000000  e59f2060          LDR      r2,|L1.104|
;;;504    {
;;;505        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
000008  e3a03000          MOV      r3,#0                 ;504
00000c  0a00000b          BEQ      |L1.64|
000010  e3500001          CMP      r0,#1
;;;506            case TIMER0:
;;;507                tTime0Event[uTimeEventNo-1].active = FALSE;
;;;508                _sys_uTime0EventCount--;
;;;509                if (_sys_uTime0EventCount == 0)
;;;510                    _sys_bIsSetTime0Event = FALSE;
;;;511                break;
;;;512    
;;;513            case TIMER1:
;;;514                tTime1Event[uTimeEventNo-1].active = FALSE;
;;;515                _sys_uTime1EventCount--;
;;;516                if (_sys_uTime1EventCount == 0)
;;;517                    _sys_bIsSetTime1Event = FALSE;
;;;518                break;
;;;519    
;;;520            default:
;;;521                ;
;;;522        }
;;;523    }
000014  112fff1e          BXNE     lr
000018  e59f004c          LDR      r0,|L1.108|
00001c  e0800201          ADD      r0,r0,r1,LSL #4       ;514
000020  e5003010          STR      r3,[r0,#-0x10]        ;515
000024  e5920018          LDR      r0,[r2,#0x18]         ;515  ; _sys_uTime1EventCount
000028  e2400001          SUB      r0,r0,#1              ;515
00002c  e5820018          STR      r0,[r2,#0x18]         ;515  ; _sys_uTime1EventCount
000030  e5920018          LDR      r0,[r2,#0x18]         ;516  ; _sys_uTime1EventCount
000034  e3500000          CMP      r0,#0                 ;516
000038  05c23001          STRBEQ   r3,[r2,#1]            ;517  ; _sys_bIsSetTime1Event
00003c  e12fff1e          BX       lr
                  |L1.64|
000040  e59f0028          LDR      r0,|L1.112|
000044  e0800201          ADD      r0,r0,r1,LSL #4       ;507
000048  e5003010          STR      r3,[r0,#-0x10]        ;508
00004c  e5920014          LDR      r0,[r2,#0x14]         ;508  ; _sys_uTime0EventCount
000050  e2400001          SUB      r0,r0,#1              ;508
000054  e5820014          STR      r0,[r2,#0x14]         ;508  ; _sys_uTime0EventCount
000058  e5920014          LDR      r0,[r2,#0x14]         ;509  ; _sys_uTime0EventCount
00005c  e3500000          CMP      r0,#0                 ;509
000060  05c23000          STRBEQ   r3,[r2,#0]            ;510  ; _sys_bIsSetTime0Event
000064  e12fff1e          BX       lr
;;;524    
                          ENDP

                  |L1.104|
                          DCD      ||.data||
                  |L1.108|
                          DCD      ||.bss||+0xa0
                  |L1.112|
                          DCD      ||.bss||

                          AREA ||i.sysClearWatchDogTimerCount||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerCount PROC
;;;321     */
;;;322    void sysClearWatchDogTimerCount(void)
000000  e59f0014          LDR      r0,|L2.28|
;;;323    {
000004  e92d4008          PUSH     {r3,lr}
;;;324        UINT32 volatile _mWtcr;
;;;325    
;;;326        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;327        _mWtcr |= 0x01;             /* write WTR */
00000c  e3811001          ORR      r1,r1,#1
;;;328        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;329    }
000018  e8bd8008          POP      {r3,pc}
;;;330    
                          ENDP

                  |L2.28|
                          DCD      0xb8001800

                          AREA ||i.sysClearWatchDogTimerInterruptStatus||, CODE, READONLY, ALIGN=2

                  sysClearWatchDogTimerInterruptStatus PROC
;;;335     */
;;;336    void sysClearWatchDogTimerInterruptStatus(void)
000000  e59f0014          LDR      r0,|L3.28|
;;;337    {
000004  e92d4008          PUSH     {r3,lr}
;;;338        UINT32 volatile _mWtcr;
;;;339    
;;;340        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;341        _mWtcr |= 0x08;       /* clear WTIF */
00000c  e3811008          ORR      r1,r1,#8
;;;342        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;343    }
000018  e8bd8008          POP      {r3,pc}
;;;344    
                          ENDP

                  |L3.28|
                          DCD      0xb8001800

                          AREA ||i.sysDOS_Time_To_UTC||, CODE, READONLY, ALIGN=2

                  sysDOS_Time_To_UTC PROC
;;;534    
;;;535    UINT32 sysDOS_Time_To_UTC(DateTime_T ltime)
000000  e92d40f0          PUSH     {r4-r7,lr}
;;;536    {
;;;537        int     i, leap_year_cnt;
;;;538        UINT32  utc;
;;;539    
;;;540        if ((ltime.mon < 1) || (ltime.mon > 12) || (ltime.day < 1) || (ltime.day > 31) ||
000004  e59d5014          LDR      r5,[sp,#0x14]
000008  e59d6018          LDR      r6,[sp,#0x18]
00000c  e2414001          SUB      r4,r1,#1
000010  e354000c          CMP      r4,#0xc
000014  2a000007          BCS      |L4.56|
000018  e3520000          CMP      r2,#0
00001c  0a000005          BEQ      |L4.56|
000020  e352001f          CMP      r2,#0x1f
;;;541            (ltime.hour > 23) || (ltime.min > 59) || (ltime.sec > 59)) {
000024  93530017          CMPLS    r3,#0x17
000028  8a000002          BHI      |L4.56|
00002c  e355003b          CMP      r5,#0x3b
000030  9356003b          CMPLS    r6,#0x3b
000034  9a000001          BLS      |L4.64|
                  |L4.56|
;;;542            //_debug_msg("DOS_Time_To_UTC - illegal time!! %d-%d-%d %d:%d:%d\n", year, month, day, hour, minute, second);
;;;543            return 1;
000038  e3a00001          MOV      r0,#1
;;;544        }
;;;545    
;;;546        ltime.year = ltime.year - 1970;     /* DOS is 1980 started, UTC is 1970 started */
;;;547    
;;;548        leap_year_cnt = (ltime.year + 1) / 4;
;;;549    
;;;550        utc = ltime.year * SECONDS_365_DAY + leap_year_cnt * SECONDS_PER_DAY;
;;;551    
;;;552        if ((ltime.year + 2) % 4 == 0)
;;;553            month_seconds[1] = 29 * SECONDS_PER_DAY;    /* leap year */
;;;554        else
;;;555            month_seconds[1] = 28 * SECONDS_PER_DAY;    /* non-leap year */
;;;556    
;;;557        for (i = 0; i < ltime.mon - 1; i++)
;;;558            utc += month_seconds[i];
;;;559    
;;;560        utc += (ltime.day - 1) * SECONDS_PER_DAY;
;;;561    
;;;562        utc += ltime.hour * SECONDS_PER_HOUR + ltime.min * 60 + ltime.sec;
;;;563    
;;;564        return utc;
;;;565    }
00003c  e8bd80f0          POP      {r4-r7,pc}
                  |L4.64|
000040  e2400c07          SUB      r0,r0,#0x700          ;543
000044  e24000b2          SUB      r0,r0,#0xb2           ;543
000048  e59fc074          LDR      r12,|L4.196|
00004c  e2801001          ADD      r1,r0,#1              ;548
000050  e00c0c90          MUL      r12,r0,r12            ;550
000054  e59f706c          LDR      r7,|L4.200|
000058  e1a01121          LSR      r1,r1,#2              ;548
00005c  e0010197          MUL      r1,r7,r1              ;550
000060  e2800002          ADD      r0,r0,#2              ;550
000064  e3100003          TST      r0,#3                 ;552
000068  e08c1381          ADD      r1,r12,r1,LSL #7      ;550
00006c  e59fc058          LDR      r12,|L4.204|
000070  059f0058          LDREQ    r0,|L4.208|
000074  159f0058          LDRNE    r0,|L4.212|
000078  e58c0004          STR      r0,[r12,#4]           ;555  ; month_seconds
00007c  e3a00000          MOV      r0,#0                 ;557
                  |L4.128|
000080  e1540000          CMP      r4,r0                 ;557
000084  879c7100          LDRHI    r7,[r12,r0,LSL #2]    ;558
000088  82800001          ADDHI    r0,r0,#1              ;558
00008c  80811007          ADDHI    r1,r1,r7              ;558
000090  8afffffa          BHI      |L4.128|
000094  e59f002c          LDR      r0,|L4.200|
000098  e0000092          MUL      r0,r2,r0              ;560
00009c  e0652205          RSB      r2,r5,r5,LSL #4       ;562
0000a0  e0810380          ADD      r0,r1,r0,LSL #7       ;560
0000a4  e3a01ee1          MOV      r1,#0xe10             ;562
0000a8  e0010193          MUL      r1,r3,r1              ;562
0000ac  e2400905          SUB      r0,r0,#0x14000        ;562
0000b0  e0811102          ADD      r1,r1,r2,LSL #2       ;562
0000b4  e0811006          ADD      r1,r1,r6              ;562
0000b8  e2400d46          SUB      r0,r0,#0x1180         ;562
0000bc  e0800001          ADD      r0,r0,r1              ;562
0000c0  e8bd80f0          POP      {r4-r7,pc}
;;;566    
                          ENDP

                  |L4.196|
                          DCD      0x01e13380
                  |L4.200|
                          DCD      0x000002a3
                  |L4.204|
                          DCD      ||.data||+0x30
                  |L4.208|
                          DCD      0x00263b80
                  |L4.212|
                          DCD      0x0024ea00

                          AREA ||i.sysDelay||, CODE, READONLY, ALIGN=2

                  sysDelay PROC
;;;636     */
;;;637    void sysDelay(UINT32 uTicks)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;638    {
000004  e1a04000          MOV      r4,r0
;;;639        UINT32 volatile btime;
;;;640    
;;;641        if(!_sys_bIsTimer0Initial) {
000008  e59f0040          LDR      r0,|L5.80|
00000c  e5d00002          LDRB     r0,[r0,#2]  ; _sys_bIsTimer0Initial
000010  e3500000          CMP      r0,#0
000014  1a000003          BNE      |L5.40|
;;;642            sysStartTimer(TIMER0, 100, PERIODIC_MODE);
000018  e3a02001          MOV      r2,#1
00001c  e3a01064          MOV      r1,#0x64
000020  e3a00000          MOV      r0,#0
000024  ebfffffe          BL       sysStartTimer
                  |L5.40|
;;;643        }
;;;644    
;;;645        btime = sysGetTicks(TIMER0);
000028  e3a00000          MOV      r0,#0
00002c  ebfffffe          BL       sysGetTicks
000030  e58d0000          STR      r0,[sp,#0]
                  |L5.52|
;;;646        while(1) {
;;;647            if((sysGetTicks(TIMER0) - btime) > uTicks) {
000034  e3a00000          MOV      r0,#0
000038  ebfffffe          BL       sysGetTicks
00003c  e59d1000          LDR      r1,[sp,#0]
000040  e0400001          SUB      r0,r0,r1
000044  e1500004          CMP      r0,r4
000048  9afffff9          BLS      |L5.52|
;;;648                break;
;;;649            }
;;;650        }
;;;651    }
00004c  e8bd8038          POP      {r3-r5,pc}
;;;652    
                          ENDP

                  |L5.80|
                          DCD      ||.data||

                          AREA ||i.sysDisableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimer PROC
;;;349     */
;;;350    void sysDisableWatchDogTimer(void)
000000  e59f0014          LDR      r0,|L6.28|
;;;351    {
000004  e92d4008          PUSH     {r3,lr}
;;;352        UINT32 volatile _mWtcr;
;;;353    
;;;354        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;355        _mWtcr &= 0xFFFFFF7F;
00000c  e3c11080          BIC      r1,r1,#0x80
;;;356        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;357    }
000018  e8bd8008          POP      {r3,pc}
;;;358    
                          ENDP

                  |L6.28|
                          DCD      0xb8001800

                          AREA ||i.sysDisableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysDisableWatchDogTimerReset PROC
;;;363     */
;;;364    void sysDisableWatchDogTimerReset(void)
000000  e59f0014          LDR      r0,|L7.28|
;;;365    {
000004  e92d4008          PUSH     {r3,lr}
;;;366        UINT32 volatile _mWtcr;
;;;367    
;;;368        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;369        _mWtcr &= 0xFFFFFFFD;
00000c  e3c11002          BIC      r1,r1,#2
;;;370        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;371    }
000018  e8bd8008          POP      {r3,pc}
;;;372    
                          ENDP

                  |L7.28|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimer||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimer PROC
;;;377     */
;;;378    void sysEnableWatchDogTimer(void)
000000  e59f0014          LDR      r0,|L8.28|
;;;379    {
000004  e92d4008          PUSH     {r3,lr}
;;;380        UINT32 volatile _mWtcr;
;;;381    
;;;382        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;383        _mWtcr |= 0x80;
00000c  e3811080          ORR      r1,r1,#0x80
;;;384        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;385    }
000018  e8bd8008          POP      {r3,pc}
;;;386    
                          ENDP

                  |L8.28|
                          DCD      0xb8001800

                          AREA ||i.sysEnableWatchDogTimerReset||, CODE, READONLY, ALIGN=2

                  sysEnableWatchDogTimerReset PROC
;;;391     */
;;;392    void sysEnableWatchDogTimerReset(void)
000000  e59f0014          LDR      r0,|L9.28|
;;;393    {
000004  e92d4008          PUSH     {r3,lr}
;;;394        UINT32 volatile _mWtcr;
;;;395    
;;;396        _mWtcr = inpw(REG_WDT_CTL);
000008  e5901000          LDR      r1,[r0,#0]
;;;397        _mWtcr |= 0x02;
00000c  e3811002          ORR      r1,r1,#2
;;;398        outpw(REG_WDT_CTL, _mWtcr);
000010  e58d1000          STR      r1,[sp,#0]
000014  e5801000          STR      r1,[r0,#0]
;;;399    }
000018  e8bd8008          POP      {r3,pc}
;;;400    
                          ENDP

                  |L9.28|
                          DCD      0xb8001800

                          AREA ||i.sysGetCurrentTime||, CODE, READONLY, ALIGN=2

                  sysGetCurrentTime PROC
;;;617    
;;;618    void sysGetCurrentTime(DateTime_T *curTime)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;619    {
;;;620        UINT32 clock, utc_time;
;;;621    
;;;622        clock = _sys_uTimer0Count;
000004  e59f4028          LDR      r4,|L10.52|
000008  e1a05000          MOV      r5,r0                 ;619
00000c  e594000c          LDR      r0,[r4,#0xc]  ; _sys_uTimer0Count
;;;623        utc_time = _sys_ReferenceTime_UTC + (clock - _sys_ReferenceTime_Clock) / _sys_uTimer0TickPerSecond;
000010  e594101c          LDR      r1,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000014  e0400001          SUB      r0,r0,r1
000018  e5941028          LDR      r1,[r4,#0x28]  ; _sys_uTimer0TickPerSecond
00001c  ebfffffe          BL       __aeabi_uidivmod
000020  e594102c          LDR      r1,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
000024  e0800001          ADD      r0,r0,r1
;;;624    
;;;625        sysUTC_To_DOS_Time(utc_time, curTime);
000028  e1a01005          MOV      r1,r5
00002c  e8bd4070          POP      {r4-r6,lr}
000030  eafffffe          B        sysUTC_To_DOS_Time
;;;626    }
;;;627    
                          ENDP

                  |L10.52|
                          DCD      ||.data||

                          AREA ||i.sysGetTicks||, CODE, READONLY, ALIGN=2

                  sysGetTicks PROC
;;;125     */
;;;126    UINT32 sysGetTicks(INT32 nTimeNo)
000000  e59f1018          LDR      r1,|L11.32|
;;;127    {
;;;128        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;129            case TIMER0:
;;;130                return _sys_uTimer0Count;
000008  0591000c          LDREQ    r0,[r1,#0xc]  ; _sys_uTimer0Count
;;;131    
;;;132            case TIMER1:
;;;133                return _sys_uTimer1Count;
;;;134    
;;;135            default:
;;;136                ;
;;;137        }
;;;138        return 0;
;;;139    }
00000c  012fff1e          BXEQ     lr
000010  e3500001          CMP      r0,#1                 ;128
000014  05910010          LDREQ    r0,[r1,#0x10]         ;133  ; _sys_uTimer1Count
000018  13a00000          MOVNE    r0,#0                 ;138
00001c  e12fff1e          BX       lr
;;;140    
                          ENDP

                  |L11.32|
                          DCD      ||.data||

                          AREA ||i.sysInstallWatchDogTimerISR||, CODE, READONLY, ALIGN=2

                  sysInstallWatchDogTimerISR PROC
;;;409     */
;;;410    PVOID sysInstallWatchDogTimerISR(INT32 nIntTypeLevel, PVOID pvNewISR)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;411    {
;;;412        PVOID _mOldVect = NULL;
;;;413        UINT32 volatile _mWtcr;
;;;414    
;;;415        _mWtcr = inpw(REG_WDT_CTL);
000004  e59f3034          LDR      r3,|L12.64|
000008  e593c000          LDR      r12,[r3,#0]
;;;416        _mWtcr |= 0x40;
00000c  e38cc040          ORR      r12,r12,#0x40
;;;417        outpw(REG_WDT_CTL, _mWtcr);
000010  e58dc000          STR      r12,[sp,#0]
000014  e583c000          STR      r12,[r3,#0]
;;;418        _mOldVect = sysInstallISR(nIntTypeLevel, WDT_IRQn, pvNewISR);
000018  e1a02001          MOV      r2,r1
00001c  e3a01001          MOV      r1,#1
000020  ebfffffe          BL       sysInstallISR
000024  e1a04000          MOV      r4,r0
;;;419        sysEnableInterrupt(WDT_IRQn);
000028  e3a00001          MOV      r0,#1
00002c  ebfffffe          BL       sysEnableInterrupt
;;;420        sysSetLocalInterrupt(ENABLE_IRQ);
000030  e3a0007f          MOV      r0,#0x7f
000034  ebfffffe          BL       sysSetLocalInterrupt
;;;421    
;;;422        return _mOldVect;
000038  e1a00004          MOV      r0,r4
;;;423    }
00003c  e8bd8038          POP      {r3-r5,pc}
;;;424    
                          ENDP

                  |L12.64|
                          DCD      0xb8001800

                          AREA ||i.sysResetTicks||, CODE, READONLY, ALIGN=2

                  sysResetTicks PROC
;;;147     */
;;;148    INT32 sysResetTicks(INT32 nTimeNo)
000000  e59f101c          LDR      r1,|L13.36|
;;;149    {
;;;150        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
000008  e3a02000          MOV      r2,#0                 ;149
;;;151            case TIMER0:
;;;152                _sys_uTimer0Count = 0;
00000c  0581200c          STREQ    r2,[r1,#0xc]  ; _sys_uTimer0Count
000010  0a000001          BEQ      |L13.28|
000014  e3500001          CMP      r0,#1                 ;150
;;;153                break;
;;;154    
;;;155            case TIMER1:
;;;156                _sys_uTimer1Count = 0;
000018  05812010          STREQ    r2,[r1,#0x10]  ; _sys_uTimer1Count
                  |L13.28|
;;;157                break;
;;;158    
;;;159            default:
;;;160                ;
;;;161        }
;;;162        return 0;
00001c  e3a00000          MOV      r0,#0
;;;163    }
000020  e12fff1e          BX       lr
;;;164    
                          ENDP

                  |L13.36|
                          DCD      ||.data||

                          AREA ||i.sysSetLocalTime||, CODE, READONLY, ALIGN=2

                  sysSetLocalTime PROC
;;;611    
;;;612    void sysSetLocalTime(DateTime_T ltime)
000000  e92d407c          PUSH     {r2-r6,lr}
;;;613    {
;;;614        _sys_ReferenceTime_Clock = _sys_uTimer0Count;
000004  e59f401c          LDR      r4,|L14.40|
000008  e59d5018          LDR      r5,[sp,#0x18]
00000c  e59dc01c          LDR      r12,[sp,#0x1c]
000010  e594600c          LDR      r6,[r4,#0xc]  ; _sys_uTimer0Count
000014  e584601c          STR      r6,[r4,#0x1c]  ; _sys_ReferenceTime_Clock
000018  e88d1020          STM      sp,{r5,r12}
;;;615        _sys_ReferenceTime_UTC = sysDOS_Time_To_UTC(ltime);
00001c  ebfffffe          BL       sysDOS_Time_To_UTC
000020  e584002c          STR      r0,[r4,#0x2c]  ; _sys_ReferenceTime_UTC
;;;616    }
000024  e8bd807c          POP      {r2-r6,pc}
;;;617    
                          ENDP

                  |L14.40|
                          DCD      ||.data||

                          AREA ||i.sysSetTimerEvent||, CODE, READONLY, ALIGN=2

                  sysSetTimerEvent PROC
;;;451     */
;;;452    INT32 sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;453    {
000004  e1b03000          MOVS     r3,r0
;;;454        int volatile i;
;;;455        int val=0;
;;;456    
;;;457        switch (nTimeNo) {
;;;458            case TIMER0:
;;;459                _sys_bIsSetTime0Event = TRUE;
000008  e59fc0bc          LDR      r12,|L15.204|
00000c  e3a00000          MOV      r0,#0                 ;455
000010  e1a05000          MOV      r5,r0                 ;455
000014  e3a04001          MOV      r4,#1                 ;453
000018  0a000011          BEQ      |L15.100|
00001c  e3530001          CMP      r3,#1                 ;457
000020  1a00000e          BNE      |L15.96|
;;;460                _sys_uTime0EventCount++;
;;;461                for (i=0; i<TimerEventCount; i++) {
;;;462                    if (tTime0Event[i].active == FALSE) {
;;;463                        tTime0Event[i].active = TRUE;
;;;464                        tTime0Event[i].initTick = uTimeTick;
;;;465                        tTime0Event[i].curTick = uTimeTick;
;;;466                        tTime0Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;467                        val = i+1;
;;;468                        break;
;;;469                    }
;;;470                }
;;;471                break;
;;;472    
;;;473            case TIMER1:
;;;474                _sys_bIsSetTime1Event = TRUE;
000024  e5cc4001          STRB     r4,[r12,#1]  ; _sys_bIsSetTime1Event
;;;475                _sys_uTime1EventCount++;
000028  e59c3018          LDR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
00002c  e2833001          ADD      r3,r3,#1
000030  e58c3018          STR      r3,[r12,#0x18]  ; _sys_uTime1EventCount
;;;476                for (i=0; i<TimerEventCount; i++) {
;;;477                    if (tTime1Event[i].active == FALSE) {
000034  e59f3094          LDR      r3,|L15.208|
000038  e58d5000          STR      r5,[sp,#0]
                  |L15.60|
00003c  e59dc000          LDR      r12,[sp,#0]
000040  e793c20c          LDR      r12,[r3,r12,LSL #4]
000044  e35c0000          CMP      r12,#0
000048  0a000015          BEQ      |L15.164|
00004c  e59dc000          LDR      r12,[sp,#0]           ;476
000050  e28cc001          ADD      r12,r12,#1            ;476
000054  e35c000a          CMP      r12,#0xa              ;476
000058  e58dc000          STR      r12,[sp,#0]           ;476
00005c  bafffff6          BLT      |L15.60|
                  |L15.96|
;;;478                        tTime1Event[i].active = TRUE;
;;;479                        tTime1Event[i].initTick = uTimeTick;
;;;480                        tTime1Event[i].curTick = uTimeTick;
;;;481                        tTime1Event[i].funPtr = (sys_pvTimeFunPtr)pvFun;
;;;482                        val = i+1;
;;;483                        break;
;;;484                    }
;;;485                }
;;;486                break;
;;;487    
;;;488            default:
;;;489                ;
;;;490        }
;;;491    
;;;492        return val;
;;;493    }
000060  e8bd8038          POP      {r3-r5,pc}
                  |L15.100|
000064  e5cc4000          STRB     r4,[r12,#0]           ;459  ; _sys_bIsSetTime0Event
000068  e59c3014          LDR      r3,[r12,#0x14]        ;460  ; _sys_uTime0EventCount
00006c  e2833001          ADD      r3,r3,#1              ;460
000070  e58c3014          STR      r3,[r12,#0x14]        ;460  ; _sys_uTime0EventCount
000074  e59f3058          LDR      r3,|L15.212|
000078  e58d5000          STR      r5,[sp,#0]            ;462
                  |L15.124|
00007c  e59dc000          LDR      r12,[sp,#0]           ;462
000080  e793c20c          LDR      r12,[r3,r12,LSL #4]   ;462
000084  e35c0000          CMP      r12,#0                ;462
000088  0a000005          BEQ      |L15.164|
00008c  e59dc000          LDR      r12,[sp,#0]           ;461
000090  e28cc001          ADD      r12,r12,#1            ;461
000094  e35c000a          CMP      r12,#0xa              ;461
000098  e58dc000          STR      r12,[sp,#0]           ;461
00009c  bafffff6          BLT      |L15.124|
0000a0  e8bd8038          POP      {r3-r5,pc}
                  |L15.164|
0000a4  e59d0000          LDR      r0,[sp,#0]            ;463
0000a8  e7834200          STR      r4,[r3,r0,LSL #4]     ;463
0000ac  e59d0000          LDR      r0,[sp,#0]            ;464
0000b0  e0830200          ADD      r0,r3,r0,LSL #4       ;464
0000b4  e5801004          STR      r1,[r0,#4]            ;465
0000b8  e5801008          STR      r1,[r0,#8]            ;467
0000bc  e580200c          STR      r2,[r0,#0xc]          ;467
0000c0  e59d0000          LDR      r0,[sp,#0]            ;467
0000c4  e2800001          ADD      r0,r0,#1              ;467
0000c8  e8bd8038          POP      {r3-r5,pc}
;;;494    
                          ENDP

                  |L15.204|
                          DCD      ||.data||
                  |L15.208|
                          DCD      ||.bss||+0xa0
                  |L15.212|
                          DCD      ||.bss||

                          AREA ||i.sysSetTimerReferenceClock||, CODE, READONLY, ALIGN=2

                  sysSetTimerReferenceClock PROC
;;;197     */
;;;198    INT32 sysSetTimerReferenceClock(INT32 nTimeNo, UINT32 uClockRate)
000000  e59f2018          LDR      r2,|L16.32|
;;;199    {
;;;200        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;201            case TIMER0:
;;;202                _sys_uTimer0ClockRate = uClockRate;
000008  05821004          STREQ    r1,[r2,#4]  ; _sys_uTimer0ClockRate
00000c  0a000001          BEQ      |L16.24|
000010  e3500001          CMP      r0,#1                 ;200
;;;203                break;
;;;204    
;;;205            case TIMER1:
;;;206                _sys_uTimer1ClockRate = uClockRate;
000014  05821008          STREQ    r1,[r2,#8]  ; _sys_uTimer1ClockRate
                  |L16.24|
;;;207                break;
;;;208    
;;;209            default:
;;;210                ;
;;;211        }
;;;212        return 0;
000018  e3a00000          MOV      r0,#0
;;;213    }
00001c  e12fff1e          BX       lr
;;;214    
                          ENDP

                  |L16.32|
                          DCD      ||.data||

                          AREA ||i.sysSetWatchDogTimerInterval||, CODE, READONLY, ALIGN=2

                  sysSetWatchDogTimerInterval PROC
;;;431     */
;;;432    INT32 sysSetWatchDogTimerInterval(INT32 nWdtInterval)
000000  e59f101c          LDR      r1,|L17.36|
;;;433    {
000004  e92d4008          PUSH     {r3,lr}
;;;434        UINT32 volatile _mWtcr;
;;;435    
;;;436        _mWtcr = inpw(REG_WDT_CTL) & ~0x700;
000008  e5912000          LDR      r2,[r1,#0]
00000c  e3c22c07          BIC      r2,r2,#0x700
;;;437        _mWtcr = _mWtcr | (nWdtInterval << 8);
000010  e1820400          ORR      r0,r2,r0,LSL #8
;;;438        outpw(REG_WDT_CTL, _mWtcr);
000014  e58d0000          STR      r0,[sp,#0]
000018  e5810000          STR      r0,[r1,#0]
;;;439    
;;;440        return 0;
00001c  e3a00000          MOV      r0,#0
;;;441    }
000020  e8bd8008          POP      {r3,pc}
;;;442    
                          ENDP

                  |L17.36|
                          DCD      0xb8001800

                          AREA ||i.sysStartTimer||, CODE, READONLY, ALIGN=2

                  sysStartTimer PROC
;;;223     */
;;;224    INT32 sysStartTimer(INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;225    {
000004  e1a06001          MOV      r6,r1
;;;226        int volatile i;
;;;227        UINT32 _mTicr, _mTcr;
;;;228    
;;;229        _mTcr = 0x60000000 | (nOpMode << 27);
000008  e3a01206          MOV      r1,#0x60000000
;;;230    
;;;231        switch (nTimeNo) {
;;;232            case TIMER0:
;;;233                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x100);
;;;234                _sys_bIsTimer0Initial = TRUE;
00000c  e59f811c          LDR      r8,|L18.304|
;;;235                _sys_uTimer0TickPerSecond = uTicksPerSecond;
;;;236    
;;;237                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000010  e59f711c          LDR      r7,|L18.308|
000014  e1815d82          ORR      r5,r1,r2,LSL #27      ;229
000018  e3500000          CMP      r0,#0                 ;231
00001c  e3a0120b          MOV      r1,#0xb0000000        ;233
000020  e3a04000          MOV      r4,#0
000024  0a000002          BEQ      |L18.52|
000028  e3500001          CMP      r0,#1                 ;231
00002c  0a00001f          BEQ      |L18.176|
000030  ea00003a          B        |L18.288|
                  |L18.52|
000034  e5910218          LDR      r0,[r1,#0x218]        ;233
000038  e3800c01          ORR      r0,r0,#0x100          ;233
00003c  e5810218          STR      r0,[r1,#0x218]        ;233
000040  e3a00001          MOV      r0,#1                 ;234
000044  e5c80002          STRB     r0,[r8,#2]            ;234  ; _sys_bIsTimer0Initial
000048  e5886028          STR      r6,[r8,#0x28]         ;235  ; _sys_uTimer0TickPerSecond
00004c  e5874000          STR      r4,[r7,#0]
;;;238                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000050  e5870060          STR      r0,[r7,#0x60]
;;;239    
;;;240                for (i=0; i<TimerEventCount; i++)
;;;241                    tTime0Event[i].active = FALSE;
000054  e59f00dc          LDR      r0,|L18.312|
000058  e58d4000          STR      r4,[sp,#0]
                  |L18.92|
00005c  e59d1000          LDR      r1,[sp,#0]
000060  e7804201          STR      r4,[r0,r1,LSL #4]
000064  e59d1000          LDR      r1,[sp,#0]            ;240
000068  e2811001          ADD      r1,r1,#1              ;240
00006c  e351000a          CMP      r1,#0xa               ;240
000070  e58d1000          STR      r1,[sp,#0]            ;240
000074  bafffff8          BLT      |L18.92|
;;;242    
;;;243                _sys_pvOldTimer0Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, (PVOID)sysTimer0ISR);
000078  e59f20bc          LDR      r2,|L18.316|
00007c  e3a01010          MOV      r1,#0x10
000080  e3a00041          MOV      r0,#0x41
000084  ebfffffe          BL       sysInstallISR
000088  e5880020          STR      r0,[r8,#0x20]  ; _sys_pvOldTimer0Vect
;;;244                sysEnableInterrupt(TMR0_IRQn);
00008c  e3a00010          MOV      r0,#0x10
000090  ebfffffe          BL       sysEnableInterrupt
;;;245    
;;;246                _sys_uTimer0Count = 0;
000094  e588400c          STR      r4,[r8,#0xc]  ; _sys_uTimer0Count
;;;247                _mTicr = _sys_uTimer0ClockRate / uTicksPerSecond;
000098  e5980004          LDR      r0,[r8,#4]  ; _sys_uTimer0ClockRate
00009c  e1a01006          MOV      r1,r6
0000a0  ebfffffe          BL       __aeabi_uidivmod
;;;248                outpw(REG_TMR0_TICR, _mTicr);
0000a4  e5870004          STR      r0,[r7,#4]
;;;249                outpw(REG_TMR0_TCSR, _mTcr);
0000a8  e5875000          STR      r5,[r7,#0]
;;;250                break;
0000ac  ea00001b          B        |L18.288|
                  |L18.176|
;;;251    
;;;252            case TIMER1:
;;;253                outpw(REG_CLK_PCLKEN0, inpw(REG_CLK_PCLKEN0)| 0x200);
0000b0  e5910218          LDR      r0,[r1,#0x218]
0000b4  e3800c02          ORR      r0,r0,#0x200
0000b8  e5810218          STR      r0,[r1,#0x218]
;;;254                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
0000bc  e5874010          STR      r4,[r7,#0x10]
;;;255                outpw(REG_TMR_TISR, 2);           /* clear for safety */
0000c0  e3a00002          MOV      r0,#2
0000c4  e5870060          STR      r0,[r7,#0x60]
;;;256    
;;;257                for (i=0; i<TimerEventCount; i++)
;;;258                    tTime1Event[i].active = FALSE;
0000c8  e59f0070          LDR      r0,|L18.320|
0000cc  e58d4000          STR      r4,[sp,#0]
                  |L18.208|
0000d0  e59d1000          LDR      r1,[sp,#0]
0000d4  e7804201          STR      r4,[r0,r1,LSL #4]
0000d8  e59d1000          LDR      r1,[sp,#0]            ;257
0000dc  e2811001          ADD      r1,r1,#1              ;257
0000e0  e351000a          CMP      r1,#0xa               ;257
0000e4  e58d1000          STR      r1,[sp,#0]            ;257
0000e8  bafffff8          BLT      |L18.208|
;;;259    
;;;260                _sys_pvOldTimer1Vect = sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR1_IRQn, (PVOID)sysTimer1ISR);
0000ec  e59f2050          LDR      r2,|L18.324|
0000f0  e3a01011          MOV      r1,#0x11
0000f4  e3a00041          MOV      r0,#0x41
0000f8  ebfffffe          BL       sysInstallISR
0000fc  e5880024          STR      r0,[r8,#0x24]  ; _sys_pvOldTimer1Vect
;;;261                sysEnableInterrupt(TMR1_IRQn);
000100  e3a00011          MOV      r0,#0x11
000104  ebfffffe          BL       sysEnableInterrupt
;;;262    
;;;263                _sys_uTimer1Count = 0;
000108  e5884010          STR      r4,[r8,#0x10]  ; _sys_uTimer1Count
;;;264                _mTicr = _sys_uTimer1ClockRate / uTicksPerSecond;
00010c  e5980008          LDR      r0,[r8,#8]  ; _sys_uTimer1ClockRate
000110  e1a01006          MOV      r1,r6
000114  ebfffffe          BL       __aeabi_uidivmod
;;;265                outpw(REG_TMR1_TICR, _mTicr);
000118  e5870014          STR      r0,[r7,#0x14]
;;;266                outpw(REG_TMR1_TCSR, _mTcr);
00011c  e5875010          STR      r5,[r7,#0x10]
                  |L18.288|
;;;267                break;
;;;268    
;;;269            default:
;;;270                ;
;;;271        }
;;;272        sysSetLocalInterrupt(ENABLE_IRQ);
000120  e3a0007f          MOV      r0,#0x7f
000124  ebfffffe          BL       sysSetLocalInterrupt
;;;273        return 0;
000128  e3a00000          MOV      r0,#0
;;;274    }
00012c  e8bd83f8          POP      {r3-r9,pc}
;;;275    
                          ENDP

                  |L18.304|
                          DCD      ||.data||
                  |L18.308|
                          DCD      0xb8001000
                  |L18.312|
                          DCD      ||.bss||
                  |L18.316|
                          DCD      sysTimer0ISR
                  |L18.320|
                          DCD      ||.bss||+0xa0
                  |L18.324|
                          DCD      sysTimer1ISR

                          AREA ||i.sysStopTimer||, CODE, READONLY, ALIGN=2

                  sysStopTimer PROC
;;;282     */
;;;283    INT32 sysStopTimer(INT32 nTimeNo)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;284    {
;;;285        switch (nTimeNo) {
;;;286            case TIMER0:
;;;287                _sys_bIsTimer0Initial = FALSE;
000004  e59f5080          LDR      r5,|L19.140|
;;;288                sysDisableInterrupt(TMR0_IRQn);
;;;289                sysInstallISR(HIGH_LEVEL_SENSITIVE | IRQ_LEVEL_1, TMR0_IRQn, _sys_pvOldTimer0Vect);
;;;290    
;;;291                outpw(REG_TMR0_TCSR, 0);           /* disable timer */
000008  e59f6080          LDR      r6,|L19.144|
00000c  e3500000          CMP      r0,#0                 ;285
000010  e3a04000          MOV      r4,#0                 ;284
000014  0a000002          BEQ      |L19.36|
000018  e3500001          CMP      r0,#1                 ;285
00001c  0a00000d          BEQ      |L19.88|
000020  ea000017          B        |L19.132|
                  |L19.36|
000024  e5c54002          STRB     r4,[r5,#2]            ;287  ; _sys_bIsTimer0Initial
000028  e3a00010          MOV      r0,#0x10              ;288
00002c  ebfffffe          BL       sysDisableInterrupt
000030  e5952020          LDR      r2,[r5,#0x20]         ;289  ; _sys_pvOldTimer0Vect
000034  e3a01010          MOV      r1,#0x10              ;289
000038  e3a00041          MOV      r0,#0x41              ;289
00003c  ebfffffe          BL       sysInstallISR
000040  e5864000          STR      r4,[r6,#0]
;;;292                outpw(REG_TMR_TISR, 1);           /* clear for safety */
000044  e3a00001          MOV      r0,#1
000048  e5860060          STR      r0,[r6,#0x60]
;;;293    
;;;294                _sys_uTime0EventCount = 0;
00004c  e5854014          STR      r4,[r5,#0x14]  ; _sys_uTime0EventCount
;;;295                _sys_bIsSetTime0Event = FALSE;
000050  e5c54000          STRB     r4,[r5,#0]  ; _sys_bIsSetTime0Event
;;;296                break;
000054  ea00000a          B        |L19.132|
                  |L19.88|
;;;297    
;;;298            case TIMER1:
;;;299                sysDisableInterrupt(TMR1_IRQn);
000058  e3a00011          MOV      r0,#0x11
00005c  ebfffffe          BL       sysDisableInterrupt
;;;300                sysInstallISR(HIGH_LEVEL_SENSITIVE| IRQ_LEVEL_1, TMR1_IRQn, _sys_pvOldTimer1Vect);
000060  e5952024          LDR      r2,[r5,#0x24]  ; _sys_pvOldTimer1Vect
000064  e3a01011          MOV      r1,#0x11
000068  e3a00041          MOV      r0,#0x41
00006c  ebfffffe          BL       sysInstallISR
;;;301    
;;;302    
;;;303                outpw(REG_TMR1_TCSR, 0);           /* disable timer */
000070  e5864010          STR      r4,[r6,#0x10]
;;;304                outpw(REG_TMR_TISR, 2);           /* clear for safety */
000074  e3a00002          MOV      r0,#2
000078  e5860060          STR      r0,[r6,#0x60]
;;;305    
;;;306                _sys_uTime1EventCount = 0;
00007c  e5854018          STR      r4,[r5,#0x18]  ; _sys_uTime1EventCount
;;;307                _sys_bIsSetTime1Event = FALSE;
000080  e5c54001          STRB     r4,[r5,#1]  ; _sys_bIsSetTime1Event
                  |L19.132|
;;;308                break;
;;;309    
;;;310            default:
;;;311                ;
;;;312        }
;;;313    
;;;314        return 0;
000084  e3a00000          MOV      r0,#0
;;;315    }
000088  e8bd8070          POP      {r4-r6,pc}
;;;316    
                          ENDP

                  |L19.140|
                          DCD      ||.data||
                  |L19.144|
                          DCD      0xb8001000

                          AREA ||i.sysTimer0ISR||, CODE, READONLY, ALIGN=2

                  sysTimer0ISR PROC
;;;64     /* Interrupt service routine */
;;;65     void sysTimer0ISR()
000000  e92d4038          PUSH     {r3-r5,lr}
;;;66     {
;;;67         int volatile i;
;;;68     
;;;69         /*----- check channel 0 -----*/
;;;70         if (inpw(REG_TMR_TISR) & 0x00000001) {
000004  e59f109c          LDR      r1,|L20.168|
000008  e5910060          LDR      r0,[r1,#0x60]
00000c  e3100001          TST      r0,#1
000010  0a000023          BEQ      |L20.164|
;;;71             _sys_uTimer0Count++;
000014  e59f0090          LDR      r0,|L20.172|
000018  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
00001c  e2822001          ADD      r2,r2,#1
000020  e580200c          STR      r2,[r0,#0xc]  ; _sys_uTimer0Count
;;;72             outpw(REG_TMR_TISR, 0x01); /* clear TIF0 */
000024  e3a02001          MOV      r2,#1
000028  e5812060          STR      r2,[r1,#0x60]
;;;73             if (_sys_uTimer0Count >= 0xfffffff)
00002c  e590200c          LDR      r2,[r0,#0xc]  ; _sys_uTimer0Count
000030  e3a01000          MOV      r1,#0
000034  e372021f          CMN      r2,#0xf0000001
;;;74                 _sys_uTimer0Count = 0;
000038  2580100c          STRCS    r1,[r0,#0xc]  ; _sys_uTimer0Count
;;;75     
;;;76             if (_sys_bIsSetTime0Event) {
00003c  e5d00000          LDRB     r0,[r0,#0]  ; _sys_bIsSetTime0Event
000040  e3500000          CMP      r0,#0
;;;77                 for (i=0; i<TimerEventCount; i++) {
;;;78                     if (tTime0Event[i].active) {
000044  159f4064          LDRNE    r4,|L20.176|
000048  158d1000          STRNE    r1,[sp,#0]            ;77
00004c  0a000014          BEQ      |L20.164|
                  |L20.80|
000050  e59d0000          LDR      r0,[sp,#0]
000054  e7940200          LDR      r0,[r4,r0,LSL #4]
000058  e3500000          CMP      r0,#0
00005c  0a00000b          BEQ      |L20.144|
;;;79                         tTime0Event[i].curTick--;
000060  e59d0000          LDR      r0,[sp,#0]
000064  e0842200          ADD      r2,r4,r0,LSL #4
000068  e5921008          LDR      r1,[r2,#8]
00006c  e2511001          SUBS     r1,r1,#1
000070  e5821008          STR      r1,[r2,#8]
;;;80                         if (tTime0Event[i].curTick == 0) {
000074  1a000005          BNE      |L20.144|
;;;81                             (*tTime0Event[i].funPtr)();
000078  e592000c          LDR      r0,[r2,#0xc]
00007c  e12fff30          BLX      r0
;;;82                             tTime0Event[i].curTick = tTime0Event[i].initTick;
000080  e59d0000          LDR      r0,[sp,#0]
000084  e0840200          ADD      r0,r4,r0,LSL #4
000088  e5901004          LDR      r1,[r0,#4]
00008c  e5801008          STR      r1,[r0,#8]
                  |L20.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;77
000094  e2800001          ADD      r0,r0,#1              ;77
000098  e350000a          CMP      r0,#0xa               ;77
00009c  e58d0000          STR      r0,[sp,#0]            ;77
0000a0  baffffea          BLT      |L20.80|
                  |L20.164|
;;;83                         }
;;;84                     }
;;;85                 }
;;;86             }
;;;87         }
;;;88     }
0000a4  e8bd8038          POP      {r3-r5,pc}
;;;89     
                          ENDP

                  |L20.168|
                          DCD      0xb8001000
                  |L20.172|
                          DCD      ||.data||
                  |L20.176|
                          DCD      ||.bss||

                          AREA ||i.sysTimer1ISR||, CODE, READONLY, ALIGN=2

                  sysTimer1ISR PROC
;;;89     
;;;90     void sysTimer1ISR()
000000  e92d4038          PUSH     {r3-r5,lr}
;;;91     {
;;;92         int volatile i;
;;;93     
;;;94         /*----- check channel 1 -----*/
;;;95         if (inpw(REG_TMR_TISR) & 0x00000002) {
000004  e59f109c          LDR      r1,|L21.168|
000008  e5910060          LDR      r0,[r1,#0x60]
00000c  e3100002          TST      r0,#2
000010  0a000023          BEQ      |L21.164|
;;;96             _sys_uTimer1Count++;
000014  e59f0090          LDR      r0,|L21.172|
000018  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
00001c  e2822001          ADD      r2,r2,#1
000020  e5802010          STR      r2,[r0,#0x10]  ; _sys_uTimer1Count
;;;97             outpw(REG_TMR_TISR, 0x02); /* clear TIF1 */
000024  e3a02002          MOV      r2,#2
000028  e5812060          STR      r2,[r1,#0x60]
;;;98             if (_sys_uTimer1Count >= 0xfffffff)
00002c  e5902010          LDR      r2,[r0,#0x10]  ; _sys_uTimer1Count
000030  e3a01000          MOV      r1,#0
000034  e372021f          CMN      r2,#0xf0000001
;;;99                 _sys_uTimer1Count = 0;
000038  25801010          STRCS    r1,[r0,#0x10]  ; _sys_uTimer1Count
;;;100    
;;;101            if (_sys_bIsSetTime1Event) {
00003c  e5d00001          LDRB     r0,[r0,#1]  ; _sys_bIsSetTime1Event
000040  e3500000          CMP      r0,#0
;;;102                for (i=0; i<TimerEventCount; i++) {
;;;103                    if (tTime1Event[i].active) {
000044  159f4064          LDRNE    r4,|L21.176|
000048  158d1000          STRNE    r1,[sp,#0]            ;102
00004c  0a000014          BEQ      |L21.164|
                  |L21.80|
000050  e59d0000          LDR      r0,[sp,#0]
000054  e7940200          LDR      r0,[r4,r0,LSL #4]
000058  e3500000          CMP      r0,#0
00005c  0a00000b          BEQ      |L21.144|
;;;104                        tTime1Event[i].curTick--;
000060  e59d0000          LDR      r0,[sp,#0]
000064  e0842200          ADD      r2,r4,r0,LSL #4
000068  e5921008          LDR      r1,[r2,#8]
00006c  e2511001          SUBS     r1,r1,#1
000070  e5821008          STR      r1,[r2,#8]
;;;105                        if (tTime1Event[i].curTick == 0) {
000074  1a000005          BNE      |L21.144|
;;;106                            (*tTime1Event[i].funPtr)();
000078  e592000c          LDR      r0,[r2,#0xc]
00007c  e12fff30          BLX      r0
;;;107                            tTime1Event[i].curTick = tTime1Event[i].initTick;
000080  e59d0000          LDR      r0,[sp,#0]
000084  e0840200          ADD      r0,r4,r0,LSL #4
000088  e5901004          LDR      r1,[r0,#4]
00008c  e5801008          STR      r1,[r0,#8]
                  |L21.144|
000090  e59d0000          LDR      r0,[sp,#0]            ;102
000094  e2800001          ADD      r0,r0,#1              ;102
000098  e350000a          CMP      r0,#0xa               ;102
00009c  e58d0000          STR      r0,[sp,#0]            ;102
0000a0  baffffea          BLT      |L21.80|
                  |L21.164|
;;;108                        }
;;;109                    }
;;;110                }
;;;111            }
;;;112        }
;;;113    }
0000a4  e8bd8038          POP      {r3-r5,pc}
;;;114    /// @endcond HIDDEN_SYMBOLS
                          ENDP

                  |L21.168|
                          DCD      0xb8001000
                  |L21.172|
                          DCD      ||.data||
                  |L21.176|
                          DCD      ||.bss||+0xa0

                          AREA ||i.sysUTC_To_DOS_Time||, CODE, READONLY, ALIGN=2

                  sysUTC_To_DOS_Time PROC
;;;567    
;;;568    void  sysUTC_To_DOS_Time(UINT32 utc, DateTime_T *dos_tm)
000000  e92d4010          PUSH     {r4,lr}
;;;569    {
000004  e1a04001          MOV      r4,r1
;;;570        int     the_year = 1970;
000008  e59f10a4          LDR      r1,|L22.180|
;;;571        int     i, seconds;
;;;572    
;;;573        while (1) {
;;;574            if (the_year % 4 == 0)
;;;575                seconds = SECONDS_366_DAY;
00000c  e59f30a4          LDR      r3,|L22.184|
;;;576            else
;;;577                seconds = SECONDS_365_DAY;
000010  e59fc0a4          LDR      r12,|L22.188|
                  |L22.20|
000014  e3110003          TST      r1,#3                 ;574
000018  01a02003          MOVEQ    r2,r3                 ;575
00001c  11a0200c          MOVNE    r2,r12
;;;578            if (utc >= seconds) {
000020  e1500002          CMP      r0,r2
;;;579                utc -= seconds;
000024  20400002          SUBCS    r0,r0,r2
000028  22811001          ADDCS    r1,r1,#1
00002c  2afffff8          BCS      |L22.20|
;;;580                the_year++;
;;;581            } else
;;;582                break;
;;;583        }
;;;584    
;;;585        dos_tm->year = the_year;
;;;586    
;;;587        if (the_year % 4 == 0)
000030  e3110003          TST      r1,#3
000034  e5841000          STR      r1,[r4,#0]            ;585
;;;588            month_seconds[1] = 29 * SECONDS_PER_DAY;
000038  e59f3080          LDR      r3,|L22.192|
00003c  059f1080          LDREQ    r1,|L22.196|
;;;589        else
;;;590            month_seconds[1] = 28 * SECONDS_PER_DAY;
000040  159f1080          LDRNE    r1,|L22.200|
000044  e5831004          STR      r1,[r3,#4]  ; month_seconds
;;;591    
;;;592        dos_tm->mon = 1;
000048  e3a01001          MOV      r1,#1
00004c  e5841004          STR      r1,[r4,#4]
;;;593        for (i = 0; i < 11; i++) {
000050  e3a01000          MOV      r1,#0
                  |L22.84|
;;;594            if (utc >= month_seconds[i]) {
000054  e7932101          LDR      r2,[r3,r1,LSL #2]
000058  e1520000          CMP      r2,r0
00005c  8a000006          BHI      |L22.124|
;;;595                utc -= month_seconds[i];
000060  e0400002          SUB      r0,r0,r2
;;;596                dos_tm->mon++;
000064  e5942004          LDR      r2,[r4,#4]
000068  e2811001          ADD      r1,r1,#1
00006c  e2822001          ADD      r2,r2,#1
000070  e351000b          CMP      r1,#0xb               ;593
000074  e5842004          STR      r2,[r4,#4]            ;593
000078  bafffff5          BLT      |L22.84|
                  |L22.124|
;;;597            } else
;;;598                break;
;;;599        }
;;;600    
;;;601        dos_tm->day = 1 + (utc / SECONDS_PER_DAY);
00007c  e59f1048          LDR      r1,|L22.204|
000080  ebfffffe          BL       __aeabi_uidivmod
000084  e2800001          ADD      r0,r0,#1
000088  e5840008          STR      r0,[r4,#8]
;;;602        utc %= SECONDS_PER_DAY;
00008c  e1a00001          MOV      r0,r1
;;;603    
;;;604        dos_tm->hour = utc / SECONDS_PER_HOUR;
000090  e3a01ee1          MOV      r1,#0xe10
000094  ebfffffe          BL       __aeabi_uidivmod
000098  e584000c          STR      r0,[r4,#0xc]
;;;605        utc %= SECONDS_PER_HOUR;
00009c  e1a00001          MOV      r0,r1
;;;606    
;;;607        dos_tm->min = utc / 60;
0000a0  e3a0103c          MOV      r1,#0x3c
0000a4  ebfffffe          BL       __aeabi_uidivmod
;;;608        dos_tm->sec = utc % 60;
0000a8  e5840010          STR      r0,[r4,#0x10]
0000ac  e5841014          STR      r1,[r4,#0x14]
;;;609    }
0000b0  e8bd8010          POP      {r4,pc}
;;;610    
                          ENDP

                  |L22.180|
                          DCD      0x000007b2
                  |L22.184|
                          DCD      0x01e28500
                  |L22.188|
                          DCD      0x01e13380
                  |L22.192|
                          DCD      ||.data||+0x30
                  |L22.196|
                          DCD      0x00263b80
                  |L22.200|
                          DCD      0x0024ea00
                  |L22.204|
                          DCD      0x00015180

                          AREA ||i.sysUpdateTickCount||, CODE, READONLY, ALIGN=2

                  sysUpdateTickCount PROC
;;;172     */
;;;173    INT32 sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount)
000000  e59f2018          LDR      r2,|L23.32|
;;;174    {
;;;175        switch (nTimeNo) {
000004  e3500000          CMP      r0,#0
;;;176            case TIMER0:
;;;177                _sys_uTimer0Count = uCount;
000008  0582100c          STREQ    r1,[r2,#0xc]  ; _sys_uTimer0Count
00000c  0a000001          BEQ      |L23.24|
000010  e3500001          CMP      r0,#1                 ;175
;;;178                break;
;;;179    
;;;180            case TIMER1:
;;;181                _sys_uTimer1Count = uCount;
000014  05821010          STREQ    r1,[r2,#0x10]  ; _sys_uTimer1Count
                  |L23.24|
;;;182                break;
;;;183    
;;;184            default:
;;;185                ;
;;;186        }
;;;187        return 0;
000018  e3a00000          MOV      r0,#0
;;;188    }
00001c  e12fff1e          BX       lr
;;;189    
                          ENDP

                  |L23.32|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  tTime0Event
                          %        160
                  tTime1Event
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  _sys_bIsSetTime0Event
000000  00                DCB      0x00
                  _sys_bIsSetTime1Event
000001  00                DCB      0x00
                  _sys_bIsTimer0Initial
000002  0000              DCB      0x00,0x00
                  _sys_uTimer0ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer1ClockRate
                          DCD      0x00b71b00
                  _sys_uTimer0Count
                          DCD      0x00000000
                  _sys_uTimer1Count
                          DCD      0x00000000
                  _sys_uTime0EventCount
                          DCD      0x00000000
                  _sys_uTime1EventCount
                          DCD      0x00000000
                  _sys_ReferenceTime_Clock
                          DCD      0x00000000
                  _sys_pvOldTimer0Vect
                          DCD      0x00000000
                  _sys_pvOldTimer1Vect
                          DCD      0x00000000
                  _sys_uTimer0TickPerSecond
                          DCD      0x00000000
                  _sys_ReferenceTime_UTC
                          DCD      0x00000000
                  month_seconds
                          DCD      0x0028de80
                          DCD      0x0024ea00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
                          DCD      0x00278d00
                          DCD      0x0028de80
