; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\touchpanel.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\touchpanel.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\touchpanel.crf ..\tslib\TouchPanel.c]
                          ARM

                          AREA ||i.Check_TouchPanel||, CODE, READONLY, ALIGN=2

                  Check_TouchPanel PROC
;;;105    
;;;106    int Check_TouchPanel(void)
000000  e3a00000          MOV      r0,#0
;;;107    {
;;;108    #if 0
;;;109        if ( (inp32(REG_ADC_TSC) & ADC_UD) == ADC_UD)
;;;110            return 1;   //Pen down;
;;;111        else
;;;112            return 0;   //Pen up;
;;;113    #else
;;;114        return 0;
;;;115    #endif
;;;116    }
000004  e12fff1e          BX       lr
;;;117    
                          ENDP


                          AREA ||i.Init_TouchPanel||, CODE, READONLY, ALIGN=2

                  Init_TouchPanel PROC
;;;42     
;;;43     int Init_TouchPanel(void)
000000  e92d4010          PUSH     {r4,lr}
;;;44     {
;;;45         int userdata=0;
000004  e3a04000          MOV      r4,#0
;;;46     //  adc_init();
;;;47     //  adc_open(ADC_TS_4WIRE, XSIZE_PHYS, YSIZE_PHYS);  //320x240
;;;48         adcOpen();
000008  ebfffffe          BL       adcOpen
;;;49         outpw(REG_ADC_CONF,(inpw(REG_ADC_CONF)&~(0xfful<<24))|0xfful<<24);
00000c  e59f005c          LDR      r0,|L2.112|
000010  e5901004          LDR      r1,[r0,#4]
000014  e38114ff          ORR      r1,r1,#0xff000000
000018  e5801004          STR      r1,[r0,#4]
;;;50         adcIoctl(T_ON,(UINT32)TouchXYCallback,userdata);
00001c  e59f1050          LDR      r1,|L2.116|
000020  e1a02004          MOV      r2,r4
000024  e3a00018          MOV      r0,#0x18
000028  ebfffffe          BL       adcIoctl
;;;51         adcIoctl(Z_ON,(UINT32)TouchZCallback,userdata);
00002c  e59f1044          LDR      r1,|L2.120|
000030  e1a02004          MOV      r2,r4
000034  e3a0001c          MOV      r0,#0x1c
000038  ebfffffe          BL       adcIoctl
;;;52         adcIoctl(PEDEF_ON,(UINT32)PenDownCallback,userdata);
00003c  e59f1038          LDR      r1,|L2.124|
000040  e1a02004          MOV      r2,r4
000044  e3a00010          MOV      r0,#0x10
000048  ebfffffe          BL       adcIoctl
;;;53         pendown_complete=0;
00004c  e59f102c          LDR      r1,|L2.128|
000050  e3a00000          MOV      r0,#0
000054  e5810008          STR      r0,[r1,#8]  ; pendown_complete
;;;54         adcIoctl(PEPOWER_ON,0,0);
000058  e1a02000          MOV      r2,r0
00005c  e1a01000          MOV      r1,r0
000060  e3a0000e          MOV      r0,#0xe
000064  ebfffffe          BL       adcIoctl
;;;55         return 1;
000068  e3a00001          MOV      r0,#1
;;;56     }
00006c  e8bd8010          POP      {r4,pc}
;;;57     
                          ENDP

                  |L2.112|
                          DCD      0xb800a000
                  |L2.116|
                          DCD      TouchXYCallback
                  |L2.120|
                          DCD      TouchZCallback
                  |L2.124|
                          DCD      PenDownCallback
                  |L2.128|
                          DCD      ||.data||

                          AREA ||i.PenDownCallback||, CODE, READONLY, ALIGN=2

                  PenDownCallback PROC
;;;34     volatile int pendown_complete=0;
;;;35     INT32 PenDownCallback(UINT32 status, UINT32 userData)
000000  e59f1020          LDR      r1,|L3.40|
;;;36     {
000004  e92d4010          PUSH     {r4,lr}
;;;37         pendown_complete=1;
000008  e3a00001          MOV      r0,#1
00000c  e5810008          STR      r0,[r1,#8]  ; pendown_complete
;;;38         adcIoctl(PEPOWER_OFF,0,0);
000010  e3a02000          MOV      r2,#0
000014  e1a01002          MOV      r1,r2
000018  e3a0000f          MOV      r0,#0xf
00001c  ebfffffe          BL       adcIoctl
;;;39         return 0;
000020  e3a00000          MOV      r0,#0
;;;40     }
000024  e8bd8010          POP      {r4,pc}
;;;41     
                          ENDP

                  |L3.40|
                          DCD      ||.data||

                          AREA ||i.Read_TouchPanel||, CODE, READONLY, ALIGN=2

                  Read_TouchPanel PROC
;;;59     int old_x, old_y;
;;;60     int Read_TouchPanel(int *x, int *y)
000000  e92d407f          PUSH     {r0-r6,lr}
;;;61     {
;;;62     //return 0 fai;ure, 1 success.
;;;63         short adc_x, adc_y,z1,z2;
;;;64         if(pendown_complete!=0)
000004  e59f6100          LDR      r6,|L4.268|
000008  e1a05000          MOV      r5,r0                 ;61
00000c  e5960008          LDR      r0,[r6,#8]  ; pendown_complete
000010  e1a04001          MOV      r4,r1                 ;61
000014  e3500000          CMP      r0,#0
000018  0a000035          BEQ      |L4.244|
;;;65         {
;;;66             adcIoctl(START_MST_POLLING,0,0);
00001c  e3a02000          MOV      r2,#0
000020  e1a01002          MOV      r1,r2
000024  e3a00001          MOV      r0,#1
000028  ebfffffe          BL       adcIoctl
;;;67             adcReadXY(&adc_x,&adc_y,1);
00002c  e3a02001          MOV      r2,#1
000030  e28d1004          ADD      r1,sp,#4
000034  e1a0000d          MOV      r0,sp
000038  ebfffffe          BL       adcReadXY
;;;68             adcReadZ(&z1,&z2,1);
00003c  e3a02001          MOV      r2,#1
000040  e28d100c          ADD      r1,sp,#0xc
000044  e28d0008          ADD      r0,sp,#8
000048  ebfffffe          BL       adcReadZ
;;;69             if( ((inpw(REG_ADC_ZSORT0)&0xfff)<=z_th) ||
00004c  e59f10bc          LDR      r1,|L4.272|
000050  e5910204          LDR      r0,[r1,#0x204]
000054  e1a02a00          LSL      r2,r0,#20
000058  e596000c          LDR      r0,[r6,#0xc]  ; z_th
00005c  e1a02a22          LSR      r2,r2,#20
000060  e1520000          CMP      r2,r0
;;;70                     ((inpw(REG_ADC_ZSORT1)&0xfff)<=z_th) ||
000064  85912208          LDRHI    r2,[r1,#0x208]
000068  81a02a02          LSLHI    r2,r2,#20
00006c  81a02a22          LSRHI    r2,r2,#20
000070  81520000          CMPHI    r2,r0
000074  9a000008          BLS      |L4.156|
;;;71                     ((inpw(REG_ADC_ZSORT2)&0xfff)<=z_th) ||
000078  e591220c          LDR      r2,[r1,#0x20c]
00007c  e1a02a02          LSL      r2,r2,#20
000080  e1a02a22          LSR      r2,r2,#20
000084  e1520000          CMP      r2,r0
;;;72                     ((inpw(REG_ADC_ZSORT3)&0xfff)<=z_th)    )
000088  85911210          LDRHI    r1,[r1,#0x210]
00008c  81a01a01          LSLHI    r1,r1,#20
000090  81a01a21          LSRHI    r1,r1,#20
000094  81510000          CMPHI    r1,r0
000098  8a00000a          BHI      |L4.200|
                  |L4.156|
;;;73             {
;;;74                 //sysprintf("0000000000000\n");
;;;75                 pendown_complete=0;
00009c  e3a00000          MOV      r0,#0
0000a0  e5860008          STR      r0,[r6,#8]  ; pendown_complete
;;;76                 adcIoctl(PEPOWER_ON,0,0);
0000a4  e1a02000          MOV      r2,r0
0000a8  e1a01000          MOV      r1,r0
0000ac  e3a0000e          MOV      r0,#0xe
0000b0  ebfffffe          BL       adcIoctl
;;;77                 *x = old_x;
0000b4  e5960010          LDR      r0,[r6,#0x10]  ; old_x
;;;78                 *y = old_y;
0000b8  e5850000          STR      r0,[r5,#0]
0000bc  e5960014          LDR      r0,[r6,#0x14]  ; old_y
0000c0  e5840000          STR      r0,[r4,#0]
0000c4  ea000007          B        |L4.232|
                  |L4.200|
;;;79             }
;;;80             else
;;;81             {
;;;82                 //*x = (XSIZE_PHYS * (adc_x)) / 4096;
;;;83                 *x = adc_x;
0000c8  e1dd00f0          LDRSH    r0,[sp,#0]
0000cc  e5850000          STR      r0,[r5,#0]
;;;84                 //*y = (YSIZE_PHYS * (4095-adc_y)) / 4096;
;;;85                 *y = adc_y;
0000d0  e1dd00f4          LDRSH    r0,[sp,#4]
;;;86                 old_x = *x;
0000d4  e5840000          STR      r0,[r4,#0]
0000d8  e5950000          LDR      r0,[r5,#0]
;;;87                 old_y = *y;
0000dc  e5860010          STR      r0,[r6,#0x10]  ; old_x
0000e0  e5940000          LDR      r0,[r4,#0]
0000e4  e5860014          STR      r0,[r6,#0x14]  ; old_y
                  |L4.232|
;;;88             }
;;;89     
;;;90             return 1;
0000e8  e3a00001          MOV      r0,#1
                  |L4.236|
0000ec  e28dd010          ADD      sp,sp,#0x10
;;;91         }
;;;92         else
;;;93         {
;;;94             *x = old_x;
;;;95             *y = old_y;
;;;96             return 0;
;;;97         }
;;;98     }
0000f0  e8bd8070          POP      {r4-r6,pc}
                  |L4.244|
0000f4  e5960010          LDR      r0,[r6,#0x10]         ;94  ; old_x
0000f8  e5850000          STR      r0,[r5,#0]            ;95
0000fc  e5960014          LDR      r0,[r6,#0x14]         ;95  ; old_y
000100  e5810000          STR      r0,[r1,#0]            ;95
000104  e3a00000          MOV      r0,#0                 ;96
000108  eafffff7          B        |L4.236|
;;;99     
                          ENDP

                  |L4.268|
                          DCD      ||.data||
                  |L4.272|
                          DCD      0xb800a000

                          AREA ||i.TouchTask||, CODE, READONLY, ALIGN=2

                  TouchTask PROC
;;;126    */
;;;127    void TouchTask(void) {
000000  e92d401c          PUSH     {r2-r4,lr}
;;;128      static U16 xOld;
;;;129      static U16 yOld;
;;;130      static U8  PressedOld;
;;;131      U16 x, y, xDiff, yDiff;
;;;132        int sumx;
;;;133        int sumy;
;;;134      U8  Pressed;
;;;135    
;;;136    //  do {
;;;137        Pressed = pendown_complete; // TBD: Insert function which returns:
000004  e59f40d0          LDR      r4,|L5.220|
000008  e5940008          LDR      r0,[r4,#8]  ; pendown_complete
00000c  e31000ff          TST      r0,#0xff
000010  0a000029          BEQ      |L5.188|
;;;138                  //      1, if the touch screen is pressed
;;;139                  //      0, if the touch screen is released
;;;140        //
;;;141        // Touch screen is pressed
;;;142        //
;;;143        if (Pressed) {
;;;144            Read_TouchPanel(&sumx, &sumy);
000014  e28d1004          ADD      r1,sp,#4
000018  e1a0000d          MOV      r0,sp
00001c  ebfffffe          BL       Read_TouchPanel
;;;145            ts_phy2log(&sumx, &sumy);
000020  e28d1004          ADD      r1,sp,#4
000024  e1a0000d          MOV      r0,sp
000028  ebfffffe          BL       ts_phy2log
;;;146          x = sumx; // TBD: Insert function which reads current x value
00002c  e59d0000          LDR      r0,[sp,#0]
;;;147          y = sumy; // TBD: Insert function which reads current y value
000030  e59d1004          LDR      r1,[sp,#4]
;;;148          //
;;;149          // The touch has already been pressed
;;;150          //
;;;151          if (PressedOld == 1) {
000034  e5d42000          LDRB     r2,[r4,#0]  ; PressedOld
000038  e1a00800          LSL      r0,r0,#16             ;146
00003c  e1a01801          LSL      r1,r1,#16             ;147
000040  e3520001          CMP      r2,#1
000044  e1a00820          LSR      r0,r0,#16             ;146
000048  e1a01821          LSR      r1,r1,#16             ;147
00004c  0a000008          BEQ      |L5.116|
;;;152            //
;;;153            // Calculate difference between new and old position
;;;154            //
;;;155            xDiff = (x > xOld) ? (x - xOld) : (xOld - x);
;;;156            yDiff = (y > yOld) ? (y - yOld) : (yOld - y);
;;;157            //
;;;158            // Store state if new position differs significantly from old position
;;;159            //
;;;160            if (xDiff + yDiff > 2) {
;;;161              xOld = x;
;;;162              yOld = y;
;;;163              GUI_TOUCH_StoreState(x, y);
;;;164            }
;;;165    //      }
;;;166          //
;;;167          // The touch was previously released
;;;168          // Store state regardless position
;;;169          //
;;;170          } else {
;;;171            if ((x != 0) && (y != 0)) {
000050  e3500000          CMP      r0,#0
000054  13510000          CMPNE    r1,#0
000058  0a000004          BEQ      |L5.112|
;;;172              xOld = x;
00005c  e1c400b2          STRH     r0,[r4,#2]  ; xOld
;;;173              yOld = y;
;;;174              PressedOld = 1;
000060  e3a02001          MOV      r2,#1
000064  e1c410b4          STRH     r1,[r4,#4]            ;173  ; yOld
000068  e5c42000          STRB     r2,[r4,#0]  ; PressedOld
                  |L5.108|
00006c  ebfffffe          BL       GUI_TOUCH_StoreState
                  |L5.112|
;;;175              GUI_TOUCH_StoreState(x, y);
;;;176            }
;;;177          }
;;;178        //
;;;179        // Touch screen is not pressed
;;;180        // Store state if it was released recently
;;;181        //
;;;182        } else {
;;;183          if (PressedOld == 1) {
;;;184            PressedOld = 0;
;;;185            GUI_TOUCH_StoreState(-1, -1);
;;;186          }
;;;187        }
;;;188        //
;;;189        // Make sure 
;;;190        //
;;;191    //    GUI_X_Delay(20);
;;;192    //  } while (1);
;;;193    }
000070  e8bd801c          POP      {r2-r4,pc}
                  |L5.116|
000074  e1d420b2          LDRH     r2,[r4,#2]            ;155  ; xOld
000078  e1500002          CMP      r0,r2                 ;155
00007c  80402002          SUBHI    r2,r0,r2              ;155
000080  90422000          SUBLS    r2,r2,r0              ;155
000084  e1a03802          LSL      r3,r2,#16             ;155
000088  e1d420b4          LDRH     r2,[r4,#4]            ;156  ; yOld
00008c  e1a03823          LSR      r3,r3,#16             ;155
000090  e1510002          CMP      r1,r2                 ;156
000094  80412002          SUBHI    r2,r1,r2              ;156
000098  90422001          SUBLS    r2,r2,r1              ;156
00009c  e1a02802          LSL      r2,r2,#16             ;156
0000a0  e1a02822          LSR      r2,r2,#16             ;156
0000a4  e0822003          ADD      r2,r2,r3              ;160
0000a8  e3520002          CMP      r2,#2                 ;160
0000ac  81c400b2          STRHHI   r0,[r4,#2]            ;161  ; xOld
0000b0  81c410b4          STRHHI   r1,[r4,#4]            ;162  ; yOld
0000b4  98bd801c          POPLS    {r2-r4,pc}
0000b8  eaffffeb          B        |L5.108|
                  |L5.188|
0000bc  e5d40000          LDRB     r0,[r4,#0]            ;183  ; PressedOld
0000c0  e3500001          CMP      r0,#1                 ;183
0000c4  18bd801c          POPNE    {r2-r4,pc}
0000c8  e3a00000          MOV      r0,#0                 ;184
0000cc  e3e01000          MVN      r1,#0                 ;185
0000d0  e5c40000          STRB     r0,[r4,#0]            ;184  ; PressedOld
0000d4  e1a00001          MOV      r0,r1                 ;185
0000d8  eaffffe3          B        |L5.108|
                          ENDP

                  |L5.220|
                          DCD      ||.data||

                          AREA ||i.TouchXYCallback||, CODE, READONLY, ALIGN=2

                  TouchXYCallback PROC
;;;14     
;;;15     INT32 TouchXYCallback(UINT32 status, UINT32 userData)
000000  e59f1018          LDR      r1,|L6.32|
;;;16     {
;;;17         /*  The status content that contains Touch x-position and touch y-position.
;;;18          *  X-position = (status & 0xFFF);
;;;19          *  Y-position = ((status>>16) & 0xFFF);
;;;20          */
;;;21         outpw(0xB8003000+0xC4,!inpw(0xB8003000+0xC4));
000004  e59100c4          LDR      r0,[r1,#0xc4]
000008  e3500000          CMP      r0,#0
00000c  03a00001          MOVEQ    r0,#1
000010  13a00000          MOVNE    r0,#0
000014  e58100c4          STR      r0,[r1,#0xc4]
;;;22         return 0;
000018  e3a00000          MOV      r0,#0
;;;23     }
00001c  e12fff1e          BX       lr
;;;24     
                          ENDP

                  |L6.32|
                          DCD      0xb8003000

                          AREA ||i.TouchZCallback||, CODE, READONLY, ALIGN=2

                  TouchZCallback PROC
;;;24     
;;;25     INT32 TouchZCallback(UINT32 status, UINT32 userData)
000000  e3a00000          MOV      r0,#0
;;;26     {
;;;27         /*  The status content that contains touch pressure measure Z1 and touch pressure measure Z2.
;;;28          *  Pressure measure Z1 = (status & 0xFFF);
;;;29          *  Pressure measure Z2 = ((status>>16) & 0xFFF);
;;;30          */
;;;31         return 0;
;;;32     }
000004  e12fff1e          BX       lr
;;;33     
                          ENDP


                          AREA ||i.Uninit_TouchPanel||, CODE, READONLY, ALIGN=2

                  Uninit_TouchPanel PROC
;;;99     
;;;100    int Uninit_TouchPanel(void)
000000  e92d4010          PUSH     {r4,lr}
;;;101    {
;;;102        adcClose();
000004  ebfffffe          BL       adcClose
;;;103        return 1;
000008  e3a00001          MOV      r0,#1
;;;104    }
00000c  e8bd8010          POP      {r4,pc}
;;;105    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  PressedOld
000000  0000              DCB      0x00,0x00
                  xOld
000002  0000              DCB      0x00,0x00
                  yOld
000004  00000000          DCB      0x00,0x00,0x00,0x00
                  pendown_complete
                          DCD      0x00000000
                  z_th
                          DCD      0x0000000a
                  old_x
                          DCD      0x00000000
                  old_y
                          DCD      0x00000000
