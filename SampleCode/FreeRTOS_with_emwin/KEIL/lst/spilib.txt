; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\spilib.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\spilib.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\spilib.crf ..\tslib\spilib.c]
                          ARM

                          AREA ||i.SpiFlash_ChipErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_ChipErase PROC
;;;29     
;;;30     void SpiFlash_ChipErase(void)
000000  e3a03000          MOV      r3,#0
;;;31     {
000004  e92d4010          PUSH     {r4,lr}
;;;32         // /CS: active
;;;33         spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000008  e1a02003          MOV      r2,r3
00000c  e3a01009          MOV      r1,#9
000010  e1a00003          MOV      r0,r3
000014  ebfffffe          BL       spiIoctl
;;;34     
;;;35         // send Command: 0x06, Write enable
;;;36         spiWrite(0, 0, 0x06);
000018  e3a01000          MOV      r1,#0
00001c  e3a02006          MOV      r2,#6
000020  e1a00001          MOV      r0,r1
000024  ebfffffe          BL       spiWrite
;;;37         spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000028  e3a03000          MOV      r3,#0
00002c  e1a02003          MOV      r2,r3
000030  e1a01003          MOV      r1,r3
000034  e1a00003          MOV      r0,r3
000038  ebfffffe          BL       spiIoctl
                  |L1.60|
;;;38         while(spiGetBusyStatus(0));
00003c  e3a00000          MOV      r0,#0
000040  ebfffffe          BL       spiGetBusyStatus
000044  e3500000          CMP      r0,#0
000048  1afffffb          BNE      |L1.60|
;;;39     
;;;40         // /CS: de-active
;;;41         spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
00004c  e3a03000          MOV      r3,#0
000050  e1a02003          MOV      r2,r3
000054  e3a0100a          MOV      r1,#0xa
000058  e1a00003          MOV      r0,r3
00005c  ebfffffe          BL       spiIoctl
;;;42     
;;;43         //////////////////////////////////////////
;;;44     
;;;45         // /CS: active
;;;46         spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000060  e3a03000          MOV      r3,#0
000064  e1a02003          MOV      r2,r3
000068  e3a01009          MOV      r1,#9
00006c  e1a00003          MOV      r0,r3
000070  ebfffffe          BL       spiIoctl
;;;47     
;;;48         // send Command: 0xC7, Chip Erase
;;;49         spiWrite(0, 0, 0xC7);
000074  e3a01000          MOV      r1,#0
000078  e3a020c7          MOV      r2,#0xc7
00007c  e1a00001          MOV      r0,r1
000080  ebfffffe          BL       spiWrite
;;;50         spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000084  e3a03000          MOV      r3,#0
000088  e1a02003          MOV      r2,r3
00008c  e1a01003          MOV      r1,r3
000090  e1a00003          MOV      r0,r3
000094  ebfffffe          BL       spiIoctl
                  |L1.152|
;;;51         while(spiGetBusyStatus(0));
000098  e3a00000          MOV      r0,#0
00009c  ebfffffe          BL       spiGetBusyStatus
0000a0  e3500000          CMP      r0,#0
0000a4  1afffffb          BNE      |L1.152|
;;;52     
;;;53         // /CS: de-active
;;;54         spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
0000a8  e3a03000          MOV      r3,#0
0000ac  e8bd4010          POP      {r4,lr}
0000b0  e1a02003          MOV      r2,r3
0000b4  e3a0100a          MOV      r1,#0xa
0000b8  e1a00003          MOV      r0,r3
0000bc  eafffffe          B        spiIoctl
;;;55     }
;;;56     
                          ENDP


                          AREA ||i.SpiFlash_NormalPageProgram||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalPageProgram PROC
;;;158    
;;;159    static int SpiFlash_NormalPageProgram(uint32_t StartAddress, uint8_t *u8DataBuffer)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;160    {
;;;161        uint32_t i = 0;
;;;162    
;;;163        // /CS: active
;;;164        spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000004  e3a03000          MOV      r3,#0
000008  e1a05001          MOV      r5,r1                 ;160
00000c  e1a04000          MOV      r4,r0                 ;160
000010  e1a02003          MOV      r2,r3
000014  e3a01009          MOV      r1,#9
000018  e1a00003          MOV      r0,r3
00001c  ebfffffe          BL       spiIoctl
;;;165    
;;;166        // send Command: 0x06, Write enable
;;;167        spiWrite(0, 0, 0x06);
000020  e3a01000          MOV      r1,#0
000024  e3a02006          MOV      r2,#6
000028  e1a00001          MOV      r0,r1
00002c  ebfffffe          BL       spiWrite
;;;168        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000030  e3a03000          MOV      r3,#0
000034  e1a02003          MOV      r2,r3
000038  e1a01003          MOV      r1,r3
00003c  e1a00003          MOV      r0,r3
000040  ebfffffe          BL       spiIoctl
                  |L2.68|
;;;169        while(spiGetBusyStatus(0))
000044  e3a00000          MOV      r0,#0
000048  ebfffffe          BL       spiGetBusyStatus
00004c  e3500000          CMP      r0,#0
000050  1afffffb          BNE      |L2.68|
;;;170        {
;;;171            ;
;;;172        }
;;;173    
;;;174        // /CS: de-active
;;;175        spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
000054  e3a03000          MOV      r3,#0
000058  e1a02003          MOV      r2,r3
00005c  e3a0100a          MOV      r1,#0xa
000060  e1a00003          MOV      r0,r3
000064  ebfffffe          BL       spiIoctl
;;;176    
;;;177    
;;;178        // /CS: active
;;;179        spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000068  e3a03000          MOV      r3,#0
00006c  e1a02003          MOV      r2,r3
000070  e3a01009          MOV      r1,#9
000074  e1a00003          MOV      r0,r3
000078  ebfffffe          BL       spiIoctl
;;;180    
;;;181        // send Command: 0x02, Page program
;;;182        spiWrite(0, 0, 0x02);
00007c  e3a01000          MOV      r1,#0
000080  e3a02002          MOV      r2,#2
000084  e1a00001          MOV      r0,r1
000088  ebfffffe          BL       spiWrite
;;;183        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
00008c  e3a03000          MOV      r3,#0
000090  e1a02003          MOV      r2,r3
000094  e1a01003          MOV      r1,r3
000098  e1a00003          MOV      r0,r3
00009c  ebfffffe          BL       spiIoctl
                  |L2.160|
;;;184        while(spiGetBusyStatus(0))
0000a0  e3a00000          MOV      r0,#0
0000a4  ebfffffe          BL       spiGetBusyStatus
0000a8  e3500000          CMP      r0,#0
0000ac  1afffffb          BNE      |L2.160|
;;;185        {
;;;186            ;
;;;187        }
;;;188    
;;;189        // send 24-bit start address
;;;190        spiWrite(0, 0, (StartAddress>>16) & 0xFF);
0000b0  e1a00404          LSL      r0,r4,#8
0000b4  e1a02c20          LSR      r2,r0,#24
0000b8  e3a01000          MOV      r1,#0
0000bc  e1a00001          MOV      r0,r1
0000c0  ebfffffe          BL       spiWrite
;;;191        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0000c4  e3a03000          MOV      r3,#0
0000c8  e1a02003          MOV      r2,r3
0000cc  e1a01003          MOV      r1,r3
0000d0  e1a00003          MOV      r0,r3
0000d4  ebfffffe          BL       spiIoctl
                  |L2.216|
;;;192        while(spiGetBusyStatus(0))
0000d8  e3a00000          MOV      r0,#0
0000dc  ebfffffe          BL       spiGetBusyStatus
0000e0  e3500000          CMP      r0,#0
0000e4  1afffffb          BNE      |L2.216|
;;;193        {
;;;194            ;
;;;195        }
;;;196    
;;;197        spiWrite(0, 0, (StartAddress>>8) & 0xFF);
0000e8  e1a00804          LSL      r0,r4,#16
0000ec  e1a02c20          LSR      r2,r0,#24
0000f0  e3a01000          MOV      r1,#0
0000f4  e1a00001          MOV      r0,r1
0000f8  ebfffffe          BL       spiWrite
;;;198        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0000fc  e3a03000          MOV      r3,#0
000100  e1a02003          MOV      r2,r3
000104  e1a01003          MOV      r1,r3
000108  e1a00003          MOV      r0,r3
00010c  ebfffffe          BL       spiIoctl
                  |L2.272|
;;;199        while(spiGetBusyStatus(0))
000110  e3a00000          MOV      r0,#0
000114  ebfffffe          BL       spiGetBusyStatus
000118  e3500000          CMP      r0,#0
00011c  1afffffb          BNE      |L2.272|
;;;200        {
;;;201            ;
;;;202        }
;;;203    
;;;204        spiWrite(0, 0, StartAddress & 0xFF);
000120  e3a01000          MOV      r1,#0
000124  e20420ff          AND      r2,r4,#0xff
000128  e1a00001          MOV      r0,r1
00012c  ebfffffe          BL       spiWrite
;;;205        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000130  e3a03000          MOV      r3,#0
000134  e1a02003          MOV      r2,r3
000138  e1a01003          MOV      r1,r3
00013c  e1a00003          MOV      r0,r3
000140  ebfffffe          BL       spiIoctl
                  |L2.324|
;;;206        while(spiGetBusyStatus(0))
000144  e3a00000          MOV      r0,#0
000148  ebfffffe          BL       spiGetBusyStatus
00014c  e3500000          CMP      r0,#0
;;;207        {
;;;208            ;
;;;209        }
;;;210    
;;;211        // write data
;;;212        for(i=0; i<28; i++)
000150  03a04000          MOVEQ    r4,#0
000154  1afffffa          BNE      |L2.324|
                  |L2.344|
;;;213        {
;;;214            spiWrite(0, 0, u8DataBuffer[i]);
000158  e3a01000          MOV      r1,#0
00015c  e7d52004          LDRB     r2,[r5,r4]
000160  e1a00001          MOV      r0,r1
000164  ebfffffe          BL       spiWrite
;;;215            spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000168  e3a03000          MOV      r3,#0
00016c  e1a02003          MOV      r2,r3
000170  e1a01003          MOV      r1,r3
000174  e1a00003          MOV      r0,r3
000178  ebfffffe          BL       spiIoctl
                  |L2.380|
;;;216            while(spiGetBusyStatus(0));
00017c  e3a00000          MOV      r0,#0
000180  ebfffffe          BL       spiGetBusyStatus
000184  e3500000          CMP      r0,#0
000188  1afffffb          BNE      |L2.380|
00018c  e2844001          ADD      r4,r4,#1
000190  e354001c          CMP      r4,#0x1c              ;212
000194  3affffef          BCC      |L2.344|
;;;217        }
;;;218    
;;;219        spiWrite(0, 0, 0x5A);
000198  e3a01000          MOV      r1,#0
00019c  e3a0205a          MOV      r2,#0x5a
0001a0  e1a00001          MOV      r0,r1
0001a4  ebfffffe          BL       spiWrite
;;;220        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0001a8  e3a03000          MOV      r3,#0
0001ac  e1a02003          MOV      r2,r3
0001b0  e1a01003          MOV      r1,r3
0001b4  e1a00003          MOV      r0,r3
0001b8  ebfffffe          BL       spiIoctl
                  |L2.444|
;;;221        while(spiGetBusyStatus(0));
0001bc  e3a00000          MOV      r0,#0
0001c0  ebfffffe          BL       spiGetBusyStatus
0001c4  e3500000          CMP      r0,#0
0001c8  1afffffb          BNE      |L2.444|
;;;222    
;;;223        spiWrite(0, 0, 0xA5);
0001cc  e3a01000          MOV      r1,#0
0001d0  e3a020a5          MOV      r2,#0xa5
0001d4  e1a00001          MOV      r0,r1
0001d8  ebfffffe          BL       spiWrite
;;;224        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0001dc  e3a03000          MOV      r3,#0
0001e0  e1a02003          MOV      r2,r3
0001e4  e1a01003          MOV      r1,r3
0001e8  e1a00003          MOV      r0,r3
0001ec  ebfffffe          BL       spiIoctl
                  |L2.496|
;;;225        while(spiGetBusyStatus(0));
0001f0  e3a00000          MOV      r0,#0
0001f4  ebfffffe          BL       spiGetBusyStatus
0001f8  e3500000          CMP      r0,#0
0001fc  1afffffb          BNE      |L2.496|
;;;226    
;;;227        spiWrite(0, 0, 0xAA);
000200  e3a01000          MOV      r1,#0
000204  e3a020aa          MOV      r2,#0xaa
000208  e1a00001          MOV      r0,r1
00020c  ebfffffe          BL       spiWrite
;;;228        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000210  e3a03000          MOV      r3,#0
000214  e1a02003          MOV      r2,r3
000218  e1a01003          MOV      r1,r3
00021c  e1a00003          MOV      r0,r3
000220  ebfffffe          BL       spiIoctl
                  |L2.548|
;;;229        while(spiGetBusyStatus(0));
000224  e3a00000          MOV      r0,#0
000228  ebfffffe          BL       spiGetBusyStatus
00022c  e3500000          CMP      r0,#0
000230  1afffffb          BNE      |L2.548|
;;;230    
;;;231        spiWrite(0, 0, 0x55);
000234  e3a01000          MOV      r1,#0
000238  e3a02055          MOV      r2,#0x55
00023c  e1a00001          MOV      r0,r1
000240  ebfffffe          BL       spiWrite
;;;232        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000244  e3a03000          MOV      r3,#0
000248  e1a02003          MOV      r2,r3
00024c  e1a01003          MOV      r1,r3
000250  e1a00003          MOV      r0,r3
000254  ebfffffe          BL       spiIoctl
                  |L2.600|
;;;233        while(spiGetBusyStatus(0));
000258  e3a00000          MOV      r0,#0
00025c  ebfffffe          BL       spiGetBusyStatus
000260  e3500000          CMP      r0,#0
000264  1afffffb          BNE      |L2.600|
;;;234    
;;;235        // /CS: de-active
;;;236        spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
000268  e3a03000          MOV      r3,#0
00026c  e1a02003          MOV      r2,r3
000270  e3a0100a          MOV      r1,#0xa
000274  e1a00003          MOV      r0,r3
000278  ebfffffe          BL       spiIoctl
;;;237    
;;;238        return 0;
00027c  e3a00000          MOV      r0,#0
;;;239    }
000280  e8bd8070          POP      {r4-r6,pc}
;;;240    
                          ENDP


                          AREA ||i.SpiFlash_NormalPageRead||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalPageRead PROC
;;;266    
;;;267    static int SpiFlash_NormalPageRead(uint32_t StartAddress, uint8_t *u8DataBuffer)
000000  e92d4070          PUSH     {r4-r6,lr}
;;;268    {
;;;269        uint32_t i;
;;;270    
;;;271        /* Check if page alignment */
;;;272        if (StartAddress % PAGE_SIZE)
000004  e31000ff          TST      r0,#0xff
000008  e1a05001          MOV      r5,r1                 ;268
00000c  e1a04000          MOV      r4,r0                 ;268
000010  0a000005          BEQ      |L3.44|
;;;273        {
;;;274            sysprintf("\nRead address 0x%x is not 0x%x alignment!\n",StartAddress,PAGE_SIZE);
000014  e3a02c01          MOV      r2,#0x100
000018  e1a01004          MOV      r1,r4
00001c  e28f0e15          ADR      r0,|L3.372|
000020  ebfffffe          BL       sysprintf
;;;275            return ERR_ALIGNMENT;
000024  e3e00001          MVN      r0,#1
;;;276        }
;;;277    
;;;278        // /CS: active
;;;279        spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
;;;280    
;;;281        // send Command: 0x03, Read data
;;;282        spiWrite(0, 0, 0x03);
;;;283        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;284        while(spiGetBusyStatus(0))
;;;285        {
;;;286            ;
;;;287        }
;;;288    
;;;289        // send 24-bit start address
;;;290        spiWrite(0, 0, (StartAddress>>16) & 0xFF);
;;;291        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;292        while(spiGetBusyStatus(0))
;;;293        {
;;;294            ;
;;;295        }
;;;296    
;;;297        spiWrite(0, 0, (StartAddress>>8) & 0xFF);
;;;298        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;299        while(spiGetBusyStatus(0))
;;;300        {
;;;301            ;
;;;302        }
;;;303    
;;;304        spiWrite(0, 0, StartAddress & 0xFF);
;;;305        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;306        while(spiGetBusyStatus(0))
;;;307        {
;;;308            ;
;;;309        }
;;;310    
;;;311        // read data
;;;312        for(i=0; i < PAGE_SIZE; i++)
;;;313        {
;;;314            spiWrite(0, 0, 0x00);
;;;315            spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;316            while(spiGetBusyStatus(0))
;;;317            {
;;;318                ;
;;;319            }
;;;320            u8DataBuffer[i] = spiRead(0, 0);
;;;321        }
;;;322    
;;;323        return 0;
;;;324    }
000028  e8bd8070          POP      {r4-r6,pc}
                  |L3.44|
00002c  e3a03000          MOV      r3,#0                 ;279
000030  e1a02003          MOV      r2,r3                 ;279
000034  e3a01009          MOV      r1,#9                 ;279
000038  e1a00003          MOV      r0,r3                 ;279
00003c  ebfffffe          BL       spiIoctl
000040  e3a01000          MOV      r1,#0                 ;282
000044  e3a02003          MOV      r2,#3                 ;282
000048  e1a00001          MOV      r0,r1                 ;282
00004c  ebfffffe          BL       spiWrite
000050  e3a03000          MOV      r3,#0                 ;283
000054  e1a02003          MOV      r2,r3                 ;283
000058  e1a01003          MOV      r1,r3                 ;283
00005c  e1a00003          MOV      r0,r3                 ;283
000060  ebfffffe          BL       spiIoctl
                  |L3.100|
000064  e3a00000          MOV      r0,#0                 ;284
000068  ebfffffe          BL       spiGetBusyStatus
00006c  e3500000          CMP      r0,#0                 ;284
000070  1afffffb          BNE      |L3.100|
000074  e1a00404          LSL      r0,r4,#8              ;290
000078  e1a02c20          LSR      r2,r0,#24             ;290
00007c  e3a01000          MOV      r1,#0                 ;290
000080  e1a00001          MOV      r0,r1                 ;290
000084  ebfffffe          BL       spiWrite
000088  e3a03000          MOV      r3,#0                 ;291
00008c  e1a02003          MOV      r2,r3                 ;291
000090  e1a01003          MOV      r1,r3                 ;291
000094  e1a00003          MOV      r0,r3                 ;291
000098  ebfffffe          BL       spiIoctl
                  |L3.156|
00009c  e3a00000          MOV      r0,#0                 ;292
0000a0  ebfffffe          BL       spiGetBusyStatus
0000a4  e3500000          CMP      r0,#0                 ;292
0000a8  1afffffb          BNE      |L3.156|
0000ac  e1a00804          LSL      r0,r4,#16             ;297
0000b0  e1a02c20          LSR      r2,r0,#24             ;297
0000b4  e3a01000          MOV      r1,#0                 ;297
0000b8  e1a00001          MOV      r0,r1                 ;297
0000bc  ebfffffe          BL       spiWrite
0000c0  e3a03000          MOV      r3,#0                 ;298
0000c4  e1a02003          MOV      r2,r3                 ;298
0000c8  e1a01003          MOV      r1,r3                 ;298
0000cc  e1a00003          MOV      r0,r3                 ;298
0000d0  ebfffffe          BL       spiIoctl
                  |L3.212|
0000d4  e3a00000          MOV      r0,#0                 ;299
0000d8  ebfffffe          BL       spiGetBusyStatus
0000dc  e3500000          CMP      r0,#0                 ;299
0000e0  1afffffb          BNE      |L3.212|
0000e4  e3a01000          MOV      r1,#0                 ;304
0000e8  e20420ff          AND      r2,r4,#0xff           ;304
0000ec  e1a00001          MOV      r0,r1                 ;304
0000f0  ebfffffe          BL       spiWrite
0000f4  e3a03000          MOV      r3,#0                 ;305
0000f8  e1a02003          MOV      r2,r3                 ;305
0000fc  e1a01003          MOV      r1,r3                 ;305
000100  e1a00003          MOV      r0,r3                 ;305
000104  ebfffffe          BL       spiIoctl
                  |L3.264|
000108  e3a00000          MOV      r0,#0                 ;306
00010c  ebfffffe          BL       spiGetBusyStatus
000110  e3500000          CMP      r0,#0                 ;306
000114  03a04000          MOVEQ    r4,#0                 ;312
000118  1afffffa          BNE      |L3.264|
                  |L3.284|
00011c  e3a02000          MOV      r2,#0                 ;314
000120  e1a01002          MOV      r1,r2                 ;314
000124  e1a00002          MOV      r0,r2                 ;314
000128  ebfffffe          BL       spiWrite
00012c  e3a03000          MOV      r3,#0                 ;315
000130  e1a02003          MOV      r2,r3                 ;315
000134  e1a01003          MOV      r1,r3                 ;315
000138  e1a00003          MOV      r0,r3                 ;315
00013c  ebfffffe          BL       spiIoctl
                  |L3.320|
000140  e3a00000          MOV      r0,#0                 ;316
000144  ebfffffe          BL       spiGetBusyStatus
000148  e3500000          CMP      r0,#0                 ;316
00014c  1afffffb          BNE      |L3.320|
000150  e3a01000          MOV      r1,#0                 ;320
000154  e1a00001          MOV      r0,r1                 ;320
000158  ebfffffe          BL       spiRead
00015c  e7c50004          STRB     r0,[r5,r4]            ;320
000160  e2844001          ADD      r4,r4,#1              ;320
000164  e3540c01          CMP      r4,#0x100             ;312
000168  23a00000          MOVCS    r0,#0                 ;323
00016c  3affffea          BCC      |L3.284|
000170  e8bd8070          POP      {r4-r6,pc}
;;;325    
                          ENDP

                  |L3.372|
000174  0a526561          DCB      "\nRead address 0x%x is not 0x%x alignment!\n",0
000178  64206164
00017c  64726573
000180  73203078
000184  25782069
000188  73206e6f
00018c  74203078
000190  25782061
000194  6c69676e
000198  6d656e74
00019c  210a00  
00019f  00                DCB      0

                          AREA ||i.SpiFlash_NormalProgram||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalProgram PROC
;;;240    
;;;241    int SpiFlash_NormalProgram(uint32_t StartAddress, uint8_t *u8DataBuffer, uint32_t data_len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;242    {
;;;243        uint32_t i = 0;
;;;244        uint32_t page_no;
;;;245    
;;;246        /* Check if page alignment */
;;;247        if (StartAddress % PAGE_SIZE)
000004  e31000ff          TST      r0,#0xff
000008  e1a07001          MOV      r7,r1                 ;242
00000c  e1a06000          MOV      r6,r0                 ;242
000010  e3a04000          MOV      r4,#0                 ;243
000014  0a000005          BEQ      |L4.48|
;;;248        {
;;;249            sysprintf("\nProgram address 0x%x is not 0x%x alignment!\n",StartAddress,PAGE_SIZE);
000018  e3a02c01          MOV      r2,#0x100
00001c  e1a01006          MOV      r1,r6
000020  e28f003c          ADR      r0,|L4.100|
000024  ebfffffe          BL       sysprintf
;;;250            return ERR_ALIGNMENT;
000028  e3e00001          MVN      r0,#1
;;;251        }
;;;252    
;;;253        page_no = data_len/PAGE_SIZE;
;;;254        if (data_len % PAGE_SIZE)
;;;255            page_no++;
;;;256    
;;;257        for (i = 0; i < page_no; i++)
;;;258        {
;;;259            SpiFlash_NormalPageProgram((StartAddress + (PAGE_SIZE*i)), (u8DataBuffer + (PAGE_SIZE*i) ));
;;;260            SpiFlash_WaitReady();
;;;261        }
;;;262    
;;;263        return 0;
;;;264    }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L4.48|
000030  e31200ff          TST      r2,#0xff              ;254
000034  e1a05422          LSR      r5,r2,#8              ;253
000038  12855001          ADDNE    r5,r5,#1              ;254
00003c  ea000004          B        |L4.84|
                  |L4.64|
000040  e0871404          ADD      r1,r7,r4,LSL #8       ;259
000044  e0860404          ADD      r0,r6,r4,LSL #8       ;259
000048  ebfffffe          BL       SpiFlash_NormalPageProgram
00004c  ebfffffe          BL       SpiFlash_WaitReady
000050  e2844001          ADD      r4,r4,#1              ;260
                  |L4.84|
000054  e1540005          CMP      r4,r5                 ;257
000058  23a00000          MOVCS    r0,#0                 ;263
00005c  3afffff7          BCC      |L4.64|
000060  e8bd81f0          POP      {r4-r8,pc}
;;;265    
                          ENDP

                  |L4.100|
000064  0a50726f          DCB      "\nProgram address 0x%x is not 0x%x alignment!\n",0
000068  6772616d
00006c  20616464
000070  72657373
000074  20307825
000078  78206973
00007c  206e6f74
000080  20307825
000084  7820616c
000088  69676e6d
00008c  656e7421
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0

                          AREA ||i.SpiFlash_NormalRead||, CODE, READONLY, ALIGN=2

                  SpiFlash_NormalRead PROC
;;;325    
;;;326    int SpiFlash_NormalRead(uint32_t StartAddress, uint8_t *u8DataBuffer, uint32_t data_len)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;327    {
;;;328        uint32_t i;
;;;329        uint32_t page_no;
;;;330        uint8_t *pData = u8DataBuffer;
;;;331    
;;;332        /* Check if page alignment */
;;;333        if (StartAddress % PAGE_SIZE)
000004  e31000ff          TST      r0,#0xff
000008  e1a06001          MOV      r6,r1                 ;327
00000c  e1a05000          MOV      r5,r0                 ;327
000010  0a000005          BEQ      |L5.44|
;;;334        {
;;;335            sysprintf("\nRead address 0x%x is not 0x%x alignment!\n",StartAddress,PAGE_SIZE);
000014  e3a02c01          MOV      r2,#0x100
000018  e1a01005          MOV      r1,r5
00001c  e28f0048          ADR      r0,|L5.108|
000020  ebfffffe          BL       sysprintf
;;;336            return ERR_ALIGNMENT;
000024  e3e00001          MVN      r0,#1
;;;337        }
;;;338    
;;;339        page_no = data_len/PAGE_SIZE;
;;;340        if (data_len % PAGE_SIZE)
;;;341            page_no++;
;;;342    
;;;343        // read data
;;;344        for(i=0; i < page_no; i++)
;;;345        {
;;;346            SpiFlash_NormalPageRead(StartAddress, pData);
;;;347            SpiFlash_WaitReady();
;;;348            StartAddress += PAGE_SIZE;
;;;349            pData += PAGE_SIZE;
;;;350        }
;;;351    
;;;352        return 0;
;;;353    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L5.44|
00002c  e31200ff          TST      r2,#0xff              ;340
000030  e1a07422          LSR      r7,r2,#8              ;339
000034  12877001          ADDNE    r7,r7,#1              ;340
000038  e3a04000          MOV      r4,#0                 ;344
00003c  ea000006          B        |L5.92|
                  |L5.64|
000040  e1a01006          MOV      r1,r6                 ;346
000044  e1a00005          MOV      r0,r5                 ;346
000048  ebfffffe          BL       SpiFlash_NormalPageRead
00004c  ebfffffe          BL       SpiFlash_WaitReady
000050  e2844001          ADD      r4,r4,#1              ;347
000054  e2855c01          ADD      r5,r5,#0x100          ;347
000058  e2866c01          ADD      r6,r6,#0x100          ;347
                  |L5.92|
00005c  e1540007          CMP      r4,r7                 ;344
000060  23a00000          MOVCS    r0,#0                 ;352
000064  3afffff5          BCC      |L5.64|
000068  e8bd81f0          POP      {r4-r8,pc}
;;;354    
                          ENDP

                  |L5.108|
00006c  0a526561          DCB      "\nRead address 0x%x is not 0x%x alignment!\n",0
000070  64206164
000074  64726573
000078  73203078
00007c  25782069
000080  73206e6f
000084  74203078
000088  25782061
00008c  6c69676e
000090  6d656e74
000094  210a00  
000097  00                DCB      0

                          AREA ||i.SpiFlash_ReadMidDid||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadMidDid PROC
;;;355    
;;;356    uint16_t SpiFlash_ReadMidDid(void)
000000  e92d4038          PUSH     {r3-r5,lr}
;;;357    {
;;;358        uint8_t u8RxData[2];
;;;359    
;;;360        // /CS: active
;;;361        spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000004  e3a03000          MOV      r3,#0
000008  e1a02003          MOV      r2,r3
00000c  e3a01009          MOV      r1,#9
000010  e1a00003          MOV      r0,r3
000014  ebfffffe          BL       spiIoctl
;;;362    
;;;363        // send Command: 0x90, Read Manufacturer/Device ID
;;;364        spiWrite(0, 0, 0x90);
000018  e3a01000          MOV      r1,#0
00001c  e3a02090          MOV      r2,#0x90
000020  e1a00001          MOV      r0,r1
000024  ebfffffe          BL       spiWrite
;;;365        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000028  e3a03000          MOV      r3,#0
00002c  e1a02003          MOV      r2,r3
000030  e1a01003          MOV      r1,r3
000034  e1a00003          MOV      r0,r3
000038  ebfffffe          BL       spiIoctl
                  |L6.60|
;;;366        while(spiGetBusyStatus(0));
00003c  e3a00000          MOV      r0,#0
000040  ebfffffe          BL       spiGetBusyStatus
000044  e3500000          CMP      r0,#0
000048  1afffffb          BNE      |L6.60|
;;;367    
;;;368        // send 24-bit '0', dummy
;;;369        spiWrite(0, 0, 0x00);
00004c  e3a02000          MOV      r2,#0
000050  e1a01002          MOV      r1,r2
000054  e1a00002          MOV      r0,r2
000058  ebfffffe          BL       spiWrite
;;;370        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
00005c  e3a03000          MOV      r3,#0
000060  e1a02003          MOV      r2,r3
000064  e1a01003          MOV      r1,r3
000068  e1a00003          MOV      r0,r3
00006c  ebfffffe          BL       spiIoctl
                  |L6.112|
;;;371        while(spiGetBusyStatus(0));
000070  e3a00000          MOV      r0,#0
000074  ebfffffe          BL       spiGetBusyStatus
000078  e3500000          CMP      r0,#0
00007c  1afffffb          BNE      |L6.112|
;;;372    
;;;373        spiWrite(0, 0, 0x00);
000080  e3a02000          MOV      r2,#0
000084  e1a01002          MOV      r1,r2
000088  e1a00002          MOV      r0,r2
00008c  ebfffffe          BL       spiWrite
;;;374        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000090  e3a03000          MOV      r3,#0
000094  e1a02003          MOV      r2,r3
000098  e1a01003          MOV      r1,r3
00009c  e1a00003          MOV      r0,r3
0000a0  ebfffffe          BL       spiIoctl
                  |L6.164|
;;;375        while(spiGetBusyStatus(0));
0000a4  e3a00000          MOV      r0,#0
0000a8  ebfffffe          BL       spiGetBusyStatus
0000ac  e3500000          CMP      r0,#0
0000b0  1afffffb          BNE      |L6.164|
;;;376    
;;;377        spiWrite(0, 0, 0x00);
0000b4  e3a02000          MOV      r2,#0
0000b8  e1a01002          MOV      r1,r2
0000bc  e1a00002          MOV      r0,r2
0000c0  ebfffffe          BL       spiWrite
;;;378        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0000c4  e3a03000          MOV      r3,#0
0000c8  e1a02003          MOV      r2,r3
0000cc  e1a01003          MOV      r1,r3
0000d0  e1a00003          MOV      r0,r3
0000d4  ebfffffe          BL       spiIoctl
                  |L6.216|
;;;379        while(spiGetBusyStatus(0));
0000d8  e3a00000          MOV      r0,#0
0000dc  ebfffffe          BL       spiGetBusyStatus
0000e0  e3500000          CMP      r0,#0
0000e4  1afffffb          BNE      |L6.216|
;;;380    
;;;381        // receive 16-bit
;;;382        spiWrite(0, 0, 0x00);
0000e8  e3a02000          MOV      r2,#0
0000ec  e1a01002          MOV      r1,r2
0000f0  e1a00002          MOV      r0,r2
0000f4  ebfffffe          BL       spiWrite
;;;383        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
0000f8  e3a03000          MOV      r3,#0
0000fc  e1a02003          MOV      r2,r3
000100  e1a01003          MOV      r1,r3
000104  e1a00003          MOV      r0,r3
000108  ebfffffe          BL       spiIoctl
                  |L6.268|
;;;384        while(spiGetBusyStatus(0));
00010c  e3a00000          MOV      r0,#0
000110  ebfffffe          BL       spiGetBusyStatus
000114  e3500000          CMP      r0,#0
000118  1afffffb          BNE      |L6.268|
;;;385        u8RxData[0] = spiRead(0, 0);
00011c  e3a01000          MOV      r1,#0
000120  e1a00001          MOV      r0,r1
000124  ebfffffe          BL       spiRead
;;;386    
;;;387        spiWrite(0, 0, 0x00);
000128  e3a02000          MOV      r2,#0
00012c  e5cd0000          STRB     r0,[sp,#0]            ;385
000130  e1a01002          MOV      r1,r2
000134  e1a00002          MOV      r0,r2
000138  ebfffffe          BL       spiWrite
;;;388        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
00013c  e3a03000          MOV      r3,#0
000140  e1a02003          MOV      r2,r3
000144  e1a01003          MOV      r1,r3
000148  e1a00003          MOV      r0,r3
00014c  ebfffffe          BL       spiIoctl
                  |L6.336|
;;;389        while(spiGetBusyStatus(0));
000150  e3a00000          MOV      r0,#0
000154  ebfffffe          BL       spiGetBusyStatus
000158  e3500000          CMP      r0,#0
00015c  1afffffb          BNE      |L6.336|
;;;390        u8RxData[1] = spiRead(0, 0);
000160  e3a01000          MOV      r1,#0
000164  e1a00001          MOV      r0,r1
000168  ebfffffe          BL       spiRead
;;;391    
;;;392        // /CS: de-active
;;;393        spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
00016c  e3a03000          MOV      r3,#0
000170  e20040ff          AND      r4,r0,#0xff           ;390
000174  e1a02003          MOV      r2,r3
000178  e3a0100a          MOV      r1,#0xa
00017c  e1a00003          MOV      r0,r3
000180  ebfffffe          BL       spiIoctl
;;;394    
;;;395        return ( (u8RxData[0]<<8) | u8RxData[1] );
000184  e5dd0000          LDRB     r0,[sp,#0]
000188  e1840400          ORR      r0,r4,r0,LSL #8
;;;396    }
00018c  e8bd8038          POP      {r3-r5,pc}
                          ENDP


                          AREA ||i.SpiFlash_ReadStatusReg||, CODE, READONLY, ALIGN=2

                  SpiFlash_ReadStatusReg PROC
;;;122    
;;;123    uint8_t SpiFlash_ReadStatusReg(void)
000000  e3a03000          MOV      r3,#0
;;;124    {
000004  e92d4010          PUSH     {r4,lr}
;;;125        uint8_t u8Status;
;;;126    
;;;127        // /CS: active
;;;128        spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
000008  e1a02003          MOV      r2,r3
00000c  e3a01009          MOV      r1,#9
000010  e1a00003          MOV      r0,r3
000014  ebfffffe          BL       spiIoctl
;;;129    
;;;130        // send Command: 0x05, Read status register
;;;131        spiWrite(0, 0, 0x05);
000018  e3a01000          MOV      r1,#0
00001c  e3a02005          MOV      r2,#5
000020  e1a00001          MOV      r0,r1
000024  ebfffffe          BL       spiWrite
;;;132        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
000028  e3a03000          MOV      r3,#0
00002c  e1a02003          MOV      r2,r3
000030  e1a01003          MOV      r1,r3
000034  e1a00003          MOV      r0,r3
000038  ebfffffe          BL       spiIoctl
                  |L7.60|
;;;133        while(spiGetBusyStatus(0));
00003c  e3a00000          MOV      r0,#0
000040  ebfffffe          BL       spiGetBusyStatus
000044  e3500000          CMP      r0,#0
000048  1afffffb          BNE      |L7.60|
;;;134    
;;;135        // read status
;;;136        spiWrite(0, 0, 0x00);
00004c  e3a02000          MOV      r2,#0
000050  e1a01002          MOV      r1,r2
000054  e1a00002          MOV      r0,r2
000058  ebfffffe          BL       spiWrite
;;;137        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
00005c  e3a03000          MOV      r3,#0
000060  e1a02003          MOV      r2,r3
000064  e1a01003          MOV      r1,r3
000068  e1a00003          MOV      r0,r3
00006c  ebfffffe          BL       spiIoctl
                  |L7.112|
;;;138        while(spiGetBusyStatus(0));
000070  e3a00000          MOV      r0,#0
000074  ebfffffe          BL       spiGetBusyStatus
000078  e3500000          CMP      r0,#0
00007c  1afffffb          BNE      |L7.112|
;;;139        u8Status = spiRead(0, 0);
000080  e3a01000          MOV      r1,#0
000084  e1a00001          MOV      r0,r1
000088  ebfffffe          BL       spiRead
;;;140    
;;;141        // /CS: de-active
;;;142        spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
00008c  e3a03000          MOV      r3,#0
000090  e20040ff          AND      r4,r0,#0xff           ;139
000094  e1a02003          MOV      r2,r3
000098  e3a0100a          MOV      r1,#0xa
00009c  e1a00003          MOV      r0,r3
0000a0  ebfffffe          BL       spiIoctl
;;;143    
;;;144        return u8Status;
0000a4  e1a00004          MOV      r0,r4
;;;145    }
0000a8  e8bd8010          POP      {r4,pc}
;;;146    
                          ENDP


                          AREA ||i.SpiFlash_SectorErase||, CODE, READONLY, ALIGN=2

                  SpiFlash_SectorErase PROC
;;;56     
;;;57     int SpiFlash_SectorErase(uint32_t StartAddress)
000000  e92d4010          PUSH     {r4,lr}
;;;58     {
000004  e1a04000          MOV      r4,r0
;;;59         /* Check if sector alignment */
;;;60         if (StartAddress % SECTOR_SIZE)
000008  e1b00a00          LSLS     r0,r0,#20
00000c  0a000005          BEQ      |L8.40|
;;;61         {
;;;62             sysprintf("\nErase address 0x%x is not 0x%x alignment!\n",StartAddress,SECTOR_SIZE);
000010  e3a02a01          MOV      r2,#0x1000
000014  e1a01004          MOV      r1,r4
000018  e28f0f5b          ADR      r0,|L8.396|
00001c  ebfffffe          BL       sysprintf
;;;63             return ERR_ALIGNMENT;
000020  e3e00001          MVN      r0,#1
;;;64         }
;;;65     
;;;66         // /CS: active
;;;67         spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
;;;68     
;;;69         // send Command: 0x06, Write enable
;;;70         spiWrite(0, 0, 0x06);
;;;71         spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;72         while(spiGetBusyStatus(0))
;;;73         {
;;;74             ;
;;;75         }
;;;76     
;;;77         // /CS: de-active
;;;78         spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
;;;79     
;;;80         //////////////////////////////////////////
;;;81     
;;;82         // /CS: active
;;;83         spiIoctl(0, SPI_IOC_ENABLE_SS, SPI_SS_SS0, 0);
;;;84     
;;;85         // send Command: 0x20, Sector Erase
;;;86         spiWrite(0, 0, 0x20);
;;;87         spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;88         while(spiGetBusyStatus(0))
;;;89         {
;;;90             ;
;;;91         }
;;;92     
;;;93         // send 24-bit start address
;;;94         spiWrite(0, 0, (StartAddress>>16) & 0xFF);
;;;95         spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;96         while(spiGetBusyStatus(0))
;;;97         {
;;;98             ;
;;;99         }
;;;100    
;;;101        spiWrite(0, 0, (StartAddress>>8) & 0xFF);
;;;102        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;103        while(spiGetBusyStatus(0))
;;;104        {
;;;105            ;
;;;106        }
;;;107    
;;;108        spiWrite(0, 0, StartAddress & 0xFF);
;;;109        spiIoctl(0, SPI_IOC_TRIGGER, 0, 0);
;;;110        while(spiGetBusyStatus(0))
;;;111        {
;;;112            ;
;;;113        }
;;;114    
;;;115    
;;;116        // /CS: de-active
;;;117        spiIoctl(0, SPI_IOC_DISABLE_SS, SPI_SS_SS0, 0);
;;;118    
;;;119        return 0;
;;;120    }
000024  e8bd8010          POP      {r4,pc}
                  |L8.40|
000028  e3a03000          MOV      r3,#0                 ;67
00002c  e1a02003          MOV      r2,r3                 ;67
000030  e3a01009          MOV      r1,#9                 ;67
000034  e1a00003          MOV      r0,r3                 ;67
000038  ebfffffe          BL       spiIoctl
00003c  e3a01000          MOV      r1,#0                 ;70
000040  e3a02006          MOV      r2,#6                 ;70
000044  e1a00001          MOV      r0,r1                 ;70
000048  ebfffffe          BL       spiWrite
00004c  e3a03000          MOV      r3,#0                 ;71
000050  e1a02003          MOV      r2,r3                 ;71
000054  e1a01003          MOV      r1,r3                 ;71
000058  e1a00003          MOV      r0,r3                 ;71
00005c  ebfffffe          BL       spiIoctl
                  |L8.96|
000060  e3a00000          MOV      r0,#0                 ;72
000064  ebfffffe          BL       spiGetBusyStatus
000068  e3500000          CMP      r0,#0                 ;72
00006c  1afffffb          BNE      |L8.96|
000070  e3a03000          MOV      r3,#0                 ;78
000074  e1a02003          MOV      r2,r3                 ;78
000078  e3a0100a          MOV      r1,#0xa               ;78
00007c  e1a00003          MOV      r0,r3                 ;78
000080  ebfffffe          BL       spiIoctl
000084  e3a03000          MOV      r3,#0                 ;83
000088  e1a02003          MOV      r2,r3                 ;83
00008c  e3a01009          MOV      r1,#9                 ;83
000090  e1a00003          MOV      r0,r3                 ;83
000094  ebfffffe          BL       spiIoctl
000098  e3a01000          MOV      r1,#0                 ;86
00009c  e3a02020          MOV      r2,#0x20              ;86
0000a0  e1a00001          MOV      r0,r1                 ;86
0000a4  ebfffffe          BL       spiWrite
0000a8  e3a03000          MOV      r3,#0                 ;87
0000ac  e1a02003          MOV      r2,r3                 ;87
0000b0  e1a01003          MOV      r1,r3                 ;87
0000b4  e1a00003          MOV      r0,r3                 ;87
0000b8  ebfffffe          BL       spiIoctl
                  |L8.188|
0000bc  e3a00000          MOV      r0,#0                 ;88
0000c0  ebfffffe          BL       spiGetBusyStatus
0000c4  e3500000          CMP      r0,#0                 ;88
0000c8  1afffffb          BNE      |L8.188|
0000cc  e1a00404          LSL      r0,r4,#8              ;94
0000d0  e1a02c20          LSR      r2,r0,#24             ;94
0000d4  e3a01000          MOV      r1,#0                 ;94
0000d8  e1a00001          MOV      r0,r1                 ;94
0000dc  ebfffffe          BL       spiWrite
0000e0  e3a03000          MOV      r3,#0                 ;95
0000e4  e1a02003          MOV      r2,r3                 ;95
0000e8  e1a01003          MOV      r1,r3                 ;95
0000ec  e1a00003          MOV      r0,r3                 ;95
0000f0  ebfffffe          BL       spiIoctl
                  |L8.244|
0000f4  e3a00000          MOV      r0,#0                 ;96
0000f8  ebfffffe          BL       spiGetBusyStatus
0000fc  e3500000          CMP      r0,#0                 ;96
000100  1afffffb          BNE      |L8.244|
000104  e1a00804          LSL      r0,r4,#16             ;101
000108  e1a02c20          LSR      r2,r0,#24             ;101
00010c  e3a01000          MOV      r1,#0                 ;101
000110  e1a00001          MOV      r0,r1                 ;101
000114  ebfffffe          BL       spiWrite
000118  e3a03000          MOV      r3,#0                 ;102
00011c  e1a02003          MOV      r2,r3                 ;102
000120  e1a01003          MOV      r1,r3                 ;102
000124  e1a00003          MOV      r0,r3                 ;102
000128  ebfffffe          BL       spiIoctl
                  |L8.300|
00012c  e3a00000          MOV      r0,#0                 ;103
000130  ebfffffe          BL       spiGetBusyStatus
000134  e3500000          CMP      r0,#0                 ;103
000138  1afffffb          BNE      |L8.300|
00013c  e3a01000          MOV      r1,#0                 ;108
000140  e20420ff          AND      r2,r4,#0xff           ;108
000144  e1a00001          MOV      r0,r1                 ;108
000148  ebfffffe          BL       spiWrite
00014c  e3a03000          MOV      r3,#0                 ;109
000150  e1a02003          MOV      r2,r3                 ;109
000154  e1a01003          MOV      r1,r3                 ;109
000158  e1a00003          MOV      r0,r3                 ;109
00015c  ebfffffe          BL       spiIoctl
                  |L8.352|
000160  e3a00000          MOV      r0,#0                 ;110
000164  ebfffffe          BL       spiGetBusyStatus
000168  e3500000          CMP      r0,#0                 ;110
00016c  1afffffb          BNE      |L8.352|
000170  e3a03000          MOV      r3,#0                 ;117
000174  e1a02003          MOV      r2,r3                 ;117
000178  e3a0100a          MOV      r1,#0xa               ;117
00017c  e1a00003          MOV      r0,r3                 ;117
000180  ebfffffe          BL       spiIoctl
000184  e3a00000          MOV      r0,#0                 ;119
000188  e8bd8010          POP      {r4,pc}
;;;121    
                          ENDP

                  |L8.396|
00018c  0a457261          DCB      "\nErase address 0x%x is not 0x%x alignment!\n",0
000190  73652061
000194  64647265
000198  73732030
00019c  78257820
0001a0  6973206e
0001a4  6f742030
0001a8  78257820
0001ac  616c6967
0001b0  6e6d656e
0001b4  74210a00

                          AREA ||i.SpiFlash_WaitReady||, CODE, READONLY, ALIGN=2

                  SpiFlash_WaitReady PROC
;;;146    
;;;147    void SpiFlash_WaitReady(void)
000000  e92d4010          PUSH     {r4,lr}
                  |L9.4|
;;;148    {
;;;149        uint8_t ReturnValue;
;;;150    
;;;151        do
;;;152        {
;;;153            ReturnValue = SpiFlash_ReadStatusReg();
000004  ebfffffe          BL       SpiFlash_ReadStatusReg
;;;154            ReturnValue = ReturnValue & 1;
000008  e3100001          TST      r0,#1
;;;155        }
;;;156        while(ReturnValue!=0);   // check the BUSY bit
00000c  1afffffc          BNE      |L9.4|
;;;157    }
000010  e8bd8010          POP      {r4,pc}
;;;158    
                          ENDP


                          AREA ||i._DemoSpiInit||, CODE, READONLY, ALIGN=2

                  _DemoSpiInit PROC
;;;12     
;;;13     void _DemoSpiInit(void)
000000  e92d4010          PUSH     {r4,lr}
;;;14     {
;;;15         /* Configure multi function pins to SPI0 */
;;;16         outpw(REG_SYS_GPB_MFPL, (inpw(REG_SYS_GPB_MFPL) & ~0xff000000) | 0xBB000000);
000004  e3a0020b          MOV      r0,#0xb0000000
000008  e5901078          LDR      r1,[r0,#0x78]
00000c  e3c114ff          BIC      r1,r1,#0xff000000
000010  e38114bb          ORR      r1,r1,#0xbb000000
000014  e5801078          STR      r1,[r0,#0x78]
;;;17         outpw(REG_SYS_GPB_MFPH, (inpw(REG_SYS_GPB_MFPH) & ~0xff) | 0xBB);
000018  e590107c          LDR      r1,[r0,#0x7c]
00001c  e3c110ff          BIC      r1,r1,#0xff
000020  e38110bb          ORR      r1,r1,#0xbb
000024  e580107c          STR      r1,[r0,#0x7c]
;;;18     
;;;19         spiInit(0);
000028  e3a00000          MOV      r0,#0
00002c  ebfffffe          BL       spiInit
;;;20         spiOpen(0);
000030  e3a00000          MOV      r0,#0
000034  ebfffffe          BL       spiOpen
;;;21     
;;;22         // set spi interface speed to 2MHz
;;;23         spiIoctl(0, SPI_IOC_SET_SPEED, 2000000, 0);
000038  e3a03000          MOV      r3,#0
00003c  e59f2034          LDR      r2,|L10.120|
000040  e3a01002          MOV      r1,#2
000044  e1a00003          MOV      r0,r3
000048  ebfffffe          BL       spiIoctl
;;;24         // set transfer length to 8-bit
;;;25         spiIoctl(0, SPI_IOC_SET_TX_BITLEN, 8, 0);
00004c  e3a03000          MOV      r3,#0
000050  e3a02008          MOV      r2,#8
000054  e3a01007          MOV      r1,#7
000058  e1a00003          MOV      r0,r3
00005c  ebfffffe          BL       spiIoctl
;;;26         // set transfer mode to mode-0
;;;27         spiIoctl(0, SPI_IOC_SET_MODE, 0, 0);
000060  e3a03000          MOV      r3,#0
000064  e8bd4010          POP      {r4,lr}
000068  e1a02003          MOV      r2,r3
00006c  e3a01008          MOV      r1,#8
000070  e1a00003          MOV      r0,r3
000074  eafffffe          B        spiIoctl
;;;28     }
;;;29     
                          ENDP

                  |L10.120|
                          DCD      0x001e8480
