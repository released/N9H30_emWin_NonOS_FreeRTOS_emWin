; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\ts_calibrate.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\ts_calibrate.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\ts_calibrate.crf ..\tslib\ts_calibrate.c]
                          ARM

                          AREA ||i.get_sample||, CODE, READONLY, ALIGN=2

                  get_sample PROC
;;;240    
;;;241    static void get_sample (calibration *cal,int index, int x, int y, char *name)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;242    {
;;;243        static int last_x = -1, last_y;
;;;244    
;;;245        if (last_x != -1)
000004  e59f6114          LDR      r6,|L1.288|
000008  e1a07003          MOV      r7,r3                 ;242
00000c  e5964000          LDR      r4,[r6,#0]  ; last_x
000010  e1a08002          MOV      r8,r2                 ;242
000014  e3740001          CMN      r4,#1
000018  e1a0a001          MOV      r10,r1                ;242
00001c  e1a0b000          MOV      r11,r0                ;242
000020  0a000027          BEQ      |L1.196|
;;;246        {
;;;247    #define NR_STEPS 10
;;;248            int dx = ((x - last_x) << 16) / NR_STEPS;
000024  e0480004          SUB      r0,r8,r4
000028  e1a00800          LSL      r0,r0,#16
00002c  e3a0100a          MOV      r1,#0xa
000030  ebfffffe          BL       __aeabi_idivmod
000034  e1a09000          MOV      r9,r0
;;;249            int dy = ((y - last_y) << 16) / NR_STEPS;
000038  e1d600b4          LDRH     r0,[r6,#4]  ; last_y
00003c  e3a0100a          MOV      r1,#0xa
000040  e58d0000          STR      r0,[sp,#0]
000044  e0470000          SUB      r0,r7,r0
000048  e1a00800          LSL      r0,r0,#16
00004c  ebfffffe          BL       __aeabi_idivmod
000050  e1a05000          MOV      r5,r0
;;;250            int i;
;;;251            last_x <<= 16;
000054  e1a00804          LSL      r0,r4,#16
000058  e5860000          STR      r0,[r6,#0]  ; last_x
00005c  e59d0000          LDR      r0,[sp,#0]
;;;252            last_y <<= 16;
;;;253            for (i = 0; i < NR_STEPS; i++)
000060  e3a04000          MOV      r4,#0
000064  e1a00800          LSL      r0,r0,#16             ;252
000068  e5860004          STR      r0,[r6,#4]  ; last_y
                  |L1.108|
;;;254            {
;;;255                put_cross (last_x >> 16, last_y >> 16, 2 | XORMODE);
00006c  e1a01840          ASR      r1,r0,#16
000070  e5960000          LDR      r0,[r6,#0]  ; last_x
000074  e3a0210a          MOV      r2,#0x80000002
000078  e1a00840          ASR      r0,r0,#16
00007c  ebfffffe          BL       put_cross
;;;256                //usleep (1000);
;;;257                GUI_Delay(10);
000080  e3a0000a          MOV      r0,#0xa
000084  ebfffffe          BL       GUI_Delay
;;;258                put_cross (last_x >> 16, last_y >> 16, 2 | XORMODE);
000088  e5960004          LDR      r0,[r6,#4]  ; last_y
00008c  e3a0210a          MOV      r2,#0x80000002
000090  e1a01840          ASR      r1,r0,#16
000094  e5960000          LDR      r0,[r6,#0]  ; last_x
000098  e1a00840          ASR      r0,r0,#16
00009c  ebfffffe          BL       put_cross
;;;259                last_x += dx;
0000a0  e5960000          LDR      r0,[r6,#0]  ; last_x
;;;260                last_y += dy;
0000a4  e2844001          ADD      r4,r4,#1
0000a8  e0800009          ADD      r0,r0,r9              ;259
0000ac  e5860000          STR      r0,[r6,#0]  ; last_x
0000b0  e5960004          LDR      r0,[r6,#4]  ; last_y
0000b4  e354000a          CMP      r4,#0xa               ;253
0000b8  e0800005          ADD      r0,r0,r5
0000bc  e5860004          STR      r0,[r6,#4]            ;253  ; last_y
0000c0  baffffe9          BLT      |L1.108|
                  |L1.196|
;;;261            }
;;;262        }
;;;263    
;;;264    
;;;265        put_cross(x, y, 2 | XORMODE);
0000c4  e3a0210a          MOV      r2,#0x80000002
0000c8  e1a01007          MOV      r1,r7
0000cc  e1a00008          MOV      r0,r8
0000d0  ebfffffe          BL       put_cross
;;;266        getxy (&cal->x [index], &cal->y [index]);
0000d4  e08b410a          ADD      r4,r11,r10,LSL #2
0000d8  e2841028          ADD      r1,r4,#0x28
0000dc  e1a00004          MOV      r0,r4
0000e0  ebfffffe          BL       getxy
;;;267        put_cross(x, y, 2 | XORMODE);
0000e4  e3a0210a          MOV      r2,#0x80000002
0000e8  e1a01007          MOV      r1,r7
0000ec  e1a00008          MOV      r0,r8
0000f0  ebfffffe          BL       put_cross
;;;268    
;;;269        last_x = cal->xfb [index] = x;
0000f4  e5848014          STR      r8,[r4,#0x14]
;;;270        last_y = cal->yfb [index] = y;
0000f8  e5868000          STR      r8,[r6,#0]  ; last_x
0000fc  e584703c          STR      r7,[r4,#0x3c]
;;;271    
;;;272        sysprintf("%s : X = %4d Y = %4d\n", name, cal->x [index], cal->y [index]);
000100  e5867004          STR      r7,[r6,#4]  ; last_y
000104  e5943028          LDR      r3,[r4,#0x28]
000108  e79b210a          LDR      r2,[r11,r10,LSL #2]
00010c  e59d1028          LDR      r1,[sp,#0x28]
000110  e28dd004          ADD      sp,sp,#4
000114  e8bd4ff0          POP      {r4-r11,lr}
000118  e28f0004          ADR      r0,|L1.292|
00011c  eafffffe          B        sysprintf
;;;273    }
;;;274    
                          ENDP

                  |L1.288|
                          DCD      ||.data||
                  |L1.292|
000124  2573203a          DCB      "%s : X = %4d Y = %4d\n",0
000128  2058203d
00012c  20253464
000130  2059203d
000134  20253464
000138  0a00    
00013a  00                DCB      0
00013b  00                DCB      0

                          AREA ||i.perform_calibration||, CODE, READONLY, ALIGN=2

                  perform_calibration PROC
;;;165    
;;;166    int perform_calibration(calibration *cal)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;167    {
000004  e1a04000          MOV      r4,r0
;;;168        int j;
;;;169        float n, x, y, x2, y2, xy, z, zx, zy;
;;;170        float det, a, b, c, e, f, i;
;;;171        float scaling = 65536.0;
000008  e59f0504          LDR      r0,|L2.1300|
00000c  e24dd024          SUB      sp,sp,#0x24           ;167
000010  e58d0008          STR      r0,[sp,#8]
;;;172    
;;;173    // Get sums for matrix
;;;174        n = x = y = x2 = y2 = xy = 0;
000014  e3a00000          MOV      r0,#0
000018  e1a08000          MOV      r8,r0
00001c  e1a09008          MOV      r9,r8
000020  e1a0a009          MOV      r10,r9
000024  e1a0b00a          MOV      r11,r10
;;;175        for(j=0; j<5; j++)
000028  e1a05000          MOV      r5,r0
00002c  e58d0000          STR      r0,[sp,#0]            ;174
000030  e58d0004          STR      r0,[sp,#4]            ;174
                  |L2.52|
;;;176        {
;;;177            n += 1.0f;
000034  e59d0004          LDR      r0,[sp,#4]
000038  e3a015fe          MOV      r1,#0x3f800000
00003c  ebfffffe          BL       __aeabi_fadd
000040  e58d0004          STR      r0,[sp,#4]
;;;178            x += (float)cal->x[j];
000044  e7947105          LDR      r7,[r4,r5,LSL #2]
000048  e1a00007          MOV      r0,r7
00004c  ebfffffe          BL       __aeabi_i2f
000050  e59d1000          LDR      r1,[sp,#0]
000054  ebfffffe          BL       __aeabi_fadd
000058  e58d0000          STR      r0,[sp,#0]
;;;179            y += (float)cal->y[j];
00005c  e0840105          ADD      r0,r4,r5,LSL #2
000060  e5906028          LDR      r6,[r0,#0x28]
000064  e1a00006          MOV      r0,r6
000068  ebfffffe          BL       __aeabi_i2f
00006c  e1a0100b          MOV      r1,r11
000070  ebfffffe          BL       __aeabi_fadd
000074  e1a0b000          MOV      r11,r0
;;;180            x2 += (float)(cal->x[j]*cal->x[j]);
000078  e0000797          MUL      r0,r7,r7
00007c  ebfffffe          BL       __aeabi_i2f
000080  e1a0100a          MOV      r1,r10
000084  ebfffffe          BL       __aeabi_fadd
000088  e1a0a000          MOV      r10,r0
;;;181            y2 += (float)(cal->y[j]*cal->y[j]);
00008c  e0000696          MUL      r0,r6,r6
000090  ebfffffe          BL       __aeabi_i2f
000094  e1a01009          MOV      r1,r9
000098  ebfffffe          BL       __aeabi_fadd
00009c  e1a09000          MOV      r9,r0
;;;182            xy += (float)(cal->x[j]*cal->y[j]);
0000a0  e0000697          MUL      r0,r7,r6
0000a4  ebfffffe          BL       __aeabi_i2f
0000a8  e1a01008          MOV      r1,r8
0000ac  ebfffffe          BL       __aeabi_fadd
0000b0  e2855001          ADD      r5,r5,#1
0000b4  e3550005          CMP      r5,#5                 ;175
0000b8  e1a08000          MOV      r8,r0
0000bc  baffffdc          BLT      |L2.52|
;;;183        }
;;;184    // Get determinant of matrix -- check if determinant is too small
;;;185        det = n*(x2*y2 - xy*xy) + x*(xy*y - x*y2) + y*(x*xy - y*x2);
0000c0  e1a0100a          MOV      r1,r10
0000c4  e1a0000b          MOV      r0,r11
0000c8  ebfffffe          BL       __aeabi_fmul
0000cc  e1a05000          MOV      r5,r0
0000d0  e59d0000          LDR      r0,[sp,#0]
0000d4  e1a01008          MOV      r1,r8
0000d8  ebfffffe          BL       __aeabi_fmul
0000dc  e1a01005          MOV      r1,r5
0000e0  ebfffffe          BL       __aeabi_fsub
0000e4  e1a0100b          MOV      r1,r11
0000e8  e58d000c          STR      r0,[sp,#0xc]
0000ec  ebfffffe          BL       __aeabi_fmul
0000f0  e1a07000          MOV      r7,r0
0000f4  e59d0000          LDR      r0,[sp,#0]
0000f8  e1a01009          MOV      r1,r9
0000fc  ebfffffe          BL       __aeabi_fmul
000100  e1a05000          MOV      r5,r0
000104  e1a0100b          MOV      r1,r11
000108  e1a00008          MOV      r0,r8
00010c  ebfffffe          BL       __aeabi_fmul
000110  e1a01005          MOV      r1,r5
000114  ebfffffe          BL       __aeabi_fsub
000118  e59d1000          LDR      r1,[sp,#0]
00011c  e58d0010          STR      r0,[sp,#0x10]
000120  ebfffffe          BL       __aeabi_fmul
000124  e1a05000          MOV      r5,r0
000128  e1a01008          MOV      r1,r8
00012c  e1a00001          MOV      r0,r1
000130  ebfffffe          BL       __aeabi_fmul
000134  e1a06000          MOV      r6,r0
000138  e1a01009          MOV      r1,r9
00013c  e1a0000a          MOV      r0,r10
000140  ebfffffe          BL       __aeabi_fmul
000144  e1a01006          MOV      r1,r6
000148  ebfffffe          BL       __aeabi_fsub
00014c  e59d1004          LDR      r1,[sp,#4]
000150  e1a06000          MOV      r6,r0
000154  ebfffffe          BL       __aeabi_fmul
000158  e1a01005          MOV      r1,r5
00015c  ebfffffe          BL       __aeabi_fadd
000160  e1a01007          MOV      r1,r7
000164  ebfffffe          BL       __aeabi_fadd
;;;186        if(det < 0.1f && det > -0.1f)
000168  e59f13a8          LDR      r1,|L2.1304|
00016c  e1a05000          MOV      r5,r0                 ;185
000170  e1510005          CMP      r1,r5
000174  da00000b          BLE      |L2.424|
000178  e1810e81          ORR      r0,r1,r1,LSL #29
00017c  e1550000          CMP      r5,r0
000180  2a000008          BCS      |L2.424|
;;;187        {
;;;188            sysprintf("ts_calibrate: determinant is too small -- %f\n",det);
000184  e1a00005          MOV      r0,r5
000188  ebfffffe          BL       __aeabi_f2d
00018c  e1a02000          MOV      r2,r0
000190  e1a03001          MOV      r3,r1
000194  e28f0d0e          ADR      r0,|L2.1308|
000198  ebfffffe          BL       sysprintf
;;;189            return 0;
00019c  e3a00000          MOV      r0,#0
                  |L2.416|
0001a0  e28dd024          ADD      sp,sp,#0x24
;;;190        }
;;;191    
;;;192    // Get elements of inverse matrix
;;;193        a = (x2*y2 - xy*xy)/det;
;;;194        b = (xy*y - x*y2)/det;
;;;195        c = (x*xy - y*x2)/det;
;;;196        e = (n*y2 - y*y)/det;
;;;197        f = (x*y - n*xy)/det;
;;;198        i = (n*x2 - x*x)/det;
;;;199    
;;;200    // Get sums for x calibration
;;;201        z = zx = zy = 0;
;;;202        for(j=0; j<5; j++)
;;;203        {
;;;204            z += (float)cal->xfb[j];
;;;205            zx += (float)(cal->xfb[j]*cal->x[j]);
;;;206            zy += (float)(cal->xfb[j]*cal->y[j]);
;;;207        }
;;;208    
;;;209    // Now multiply out to get the calibration for framebuffer x coord
;;;210        cal->a[0] = (int)((a*z + b*zx + c*zy)*(scaling));
;;;211        cal->a[1] = (int)((b*z + e*zx + f*zy)*(scaling));
;;;212        cal->a[2] = (int)((c*z + f*zx + i*zy)*(scaling));
;;;213    #if 0 //close
;;;214        sysprintf("%f %f %f\n",(a*z + b*zx + c*zy),
;;;215                  (b*z + e*zx + f*zy),
;;;216                  (c*z + f*zx + i*zy));
;;;217    #endif
;;;218    // Get sums for y calibration
;;;219        z = zx = zy = 0;
;;;220        for(j=0; j<5; j++)
;;;221        {
;;;222            z += (float)cal->yfb[j];
;;;223            zx += (float)(cal->yfb[j]*cal->x[j]);
;;;224            zy += (float)(cal->yfb[j]*cal->y[j]);
;;;225        }
;;;226    
;;;227    // Now multiply out to get the calibration for framebuffer y coord
;;;228        cal->a[3] = (int)((a*z + b*zx + c*zy)*(scaling));
;;;229        cal->a[4] = (int)((b*z + e*zx + f*zy)*(scaling));
;;;230        cal->a[5] = (int)((c*z + f*zx + i*zy)*(scaling));
;;;231    #if 0  // closed
;;;232        sysprintf("%f %f %f\n",(a*z + b*zx + c*zy),
;;;233                  (b*z + e*zx + f*zy),
;;;234                  (c*z + f*zx + i*zy));
;;;235    #endif
;;;236    // If we got here, we're OK, so assign scaling to a[6] and return
;;;237        cal->a[6] = (int)scaling;
;;;238        return 1;
;;;239    }
0001a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.424|
0001a8  e1a00006          MOV      r0,r6                 ;189
0001ac  e1a01005          MOV      r1,r5                 ;193
0001b0  ebfffffe          BL       __aeabi_fdiv
0001b4  e58d0018          STR      r0,[sp,#0x18]         ;193
0001b8  e59d0010          LDR      r0,[sp,#0x10]         ;194
0001bc  e1a01005          MOV      r1,r5                 ;194
0001c0  ebfffffe          BL       __aeabi_fdiv
0001c4  e58d0010          STR      r0,[sp,#0x10]         ;194
0001c8  e59d000c          LDR      r0,[sp,#0xc]          ;195
0001cc  e1a01005          MOV      r1,r5                 ;195
0001d0  ebfffffe          BL       __aeabi_fdiv
0001d4  e1a0100b          MOV      r1,r11                ;196
0001d8  e58d0014          STR      r0,[sp,#0x14]         ;196
0001dc  e1a00001          MOV      r0,r1                 ;196
0001e0  ebfffffe          BL       __aeabi_fmul
0001e4  e1a06000          MOV      r6,r0                 ;196
0001e8  e59d0004          LDR      r0,[sp,#4]            ;196
0001ec  e1a01009          MOV      r1,r9                 ;196
0001f0  ebfffffe          BL       __aeabi_fmul
0001f4  e1a01006          MOV      r1,r6                 ;196
0001f8  ebfffffe          BL       __aeabi_fsub
0001fc  e1a01005          MOV      r1,r5                 ;196
000200  ebfffffe          BL       __aeabi_fdiv
000204  e58d001c          STR      r0,[sp,#0x1c]         ;197
000208  e59d0004          LDR      r0,[sp,#4]            ;197
00020c  e1a01008          MOV      r1,r8                 ;197
000210  ebfffffe          BL       __aeabi_fmul
000214  e1a06000          MOV      r6,r0                 ;197
000218  e59d0000          LDR      r0,[sp,#0]            ;197
00021c  e1a0100b          MOV      r1,r11                ;197
000220  ebfffffe          BL       __aeabi_fmul
000224  e1a01006          MOV      r1,r6                 ;197
000228  ebfffffe          BL       __aeabi_fsub
00022c  e1a01005          MOV      r1,r5                 ;197
000230  ebfffffe          BL       __aeabi_fdiv
000234  e59d1000          LDR      r1,[sp,#0]            ;198
000238  e58d000c          STR      r0,[sp,#0xc]          ;198
00023c  e1a00001          MOV      r0,r1                 ;198
000240  ebfffffe          BL       __aeabi_fmul
000244  e1a06000          MOV      r6,r0                 ;198
000248  e59d0004          LDR      r0,[sp,#4]            ;198
00024c  e1a0100a          MOV      r1,r10                ;198
000250  ebfffffe          BL       __aeabi_fmul
000254  e1a01006          MOV      r1,r6                 ;198
000258  ebfffffe          BL       __aeabi_fsub
00025c  e1a01005          MOV      r1,r5                 ;198
000260  ebfffffe          BL       __aeabi_fdiv
000264  e3a09000          MOV      r9,#0                 ;201
000268  e1a0b009          MOV      r11,r9                ;201
00026c  e1a08000          MOV      r8,r0                 ;198
000270  e1a0a00b          MOV      r10,r11               ;201
000274  e1a05009          MOV      r5,r9                 ;202
                  |L2.632|
000278  e0847105          ADD      r7,r4,r5,LSL #2       ;204
00027c  e5976014          LDR      r6,[r7,#0x14]         ;204
000280  e1a00006          MOV      r0,r6                 ;204
000284  ebfffffe          BL       __aeabi_i2f
000288  e1a0100a          MOV      r1,r10                ;204
00028c  ebfffffe          BL       __aeabi_fadd
000290  e1a0a000          MOV      r10,r0                ;204
000294  e7940105          LDR      r0,[r4,r5,LSL #2]     ;205
000298  e0000096          MUL      r0,r6,r0              ;205
00029c  ebfffffe          BL       __aeabi_i2f
0002a0  e1a0100b          MOV      r1,r11                ;205
0002a4  ebfffffe          BL       __aeabi_fadd
0002a8  e1a0b000          MOV      r11,r0                ;205
0002ac  e5970028          LDR      r0,[r7,#0x28]         ;206
0002b0  e0000096          MUL      r0,r6,r0              ;206
0002b4  ebfffffe          BL       __aeabi_i2f
0002b8  e1a01009          MOV      r1,r9                 ;206
0002bc  ebfffffe          BL       __aeabi_fadd
0002c0  e2855001          ADD      r5,r5,#1              ;206
0002c4  e3550005          CMP      r5,#5                 ;202
0002c8  e1a09000          MOV      r9,r0                 ;206
0002cc  baffffe9          BLT      |L2.632|
0002d0  e1a01000          MOV      r1,r0                 ;210
0002d4  e59d0014          LDR      r0,[sp,#0x14]         ;210
0002d8  ebfffffe          BL       __aeabi_fmul
0002dc  e1a05000          MOV      r5,r0                 ;210
0002e0  e59d0010          LDR      r0,[sp,#0x10]         ;210
0002e4  e1a0100b          MOV      r1,r11                ;210
0002e8  ebfffffe          BL       __aeabi_fmul
0002ec  e1a06000          MOV      r6,r0                 ;210
0002f0  e59d0018          LDR      r0,[sp,#0x18]         ;210
0002f4  e1a0100a          MOV      r1,r10                ;210
0002f8  ebfffffe          BL       __aeabi_fmul
0002fc  e1a01006          MOV      r1,r6                 ;210
000300  ebfffffe          BL       __aeabi_fadd
000304  e1a01005          MOV      r1,r5                 ;210
000308  ebfffffe          BL       __aeabi_fadd
00030c  e59d1008          LDR      r1,[sp,#8]            ;210
000310  ebfffffe          BL       __aeabi_fmul
000314  ebfffffe          BL       __aeabi_f2iz
000318  e5840050          STR      r0,[r4,#0x50]         ;211
00031c  e59d000c          LDR      r0,[sp,#0xc]          ;211
000320  e1a01009          MOV      r1,r9                 ;211
000324  ebfffffe          BL       __aeabi_fmul
000328  e1a05000          MOV      r5,r0                 ;211
00032c  e59d001c          LDR      r0,[sp,#0x1c]         ;211
000330  e1a0100b          MOV      r1,r11                ;211
000334  ebfffffe          BL       __aeabi_fmul
000338  e1a06000          MOV      r6,r0                 ;211
00033c  e59d0010          LDR      r0,[sp,#0x10]         ;211
000340  e1a0100a          MOV      r1,r10                ;211
000344  ebfffffe          BL       __aeabi_fmul
000348  e1a01006          MOV      r1,r6                 ;211
00034c  ebfffffe          BL       __aeabi_fadd
000350  e1a01005          MOV      r1,r5                 ;211
000354  ebfffffe          BL       __aeabi_fadd
000358  e59d1008          LDR      r1,[sp,#8]            ;211
00035c  ebfffffe          BL       __aeabi_fmul
000360  ebfffffe          BL       __aeabi_f2iz
000364  e5840054          STR      r0,[r4,#0x54]         ;212
000368  e1a01009          MOV      r1,r9                 ;212
00036c  e1a00008          MOV      r0,r8                 ;212
000370  ebfffffe          BL       __aeabi_fmul
000374  e1a05000          MOV      r5,r0                 ;212
000378  e59d000c          LDR      r0,[sp,#0xc]          ;212
00037c  e1a0100b          MOV      r1,r11                ;212
000380  ebfffffe          BL       __aeabi_fmul
000384  e1a06000          MOV      r6,r0                 ;212
000388  e59d0014          LDR      r0,[sp,#0x14]         ;212
00038c  e1a0100a          MOV      r1,r10                ;212
000390  ebfffffe          BL       __aeabi_fmul
000394  e1a01006          MOV      r1,r6                 ;212
000398  ebfffffe          BL       __aeabi_fadd
00039c  e1a01005          MOV      r1,r5                 ;212
0003a0  ebfffffe          BL       __aeabi_fadd
0003a4  e59d1008          LDR      r1,[sp,#8]            ;212
0003a8  ebfffffe          BL       __aeabi_fmul
0003ac  ebfffffe          BL       __aeabi_f2iz
0003b0  e3a09000          MOV      r9,#0                 ;219
0003b4  e1a0b009          MOV      r11,r9                ;219
0003b8  e1a0a00b          MOV      r10,r11               ;219
0003bc  e1a05009          MOV      r5,r9                 ;220
0003c0  e5840058          STR      r0,[r4,#0x58]         ;220
                  |L2.964|
0003c4  e0847105          ADD      r7,r4,r5,LSL #2       ;222
0003c8  e597603c          LDR      r6,[r7,#0x3c]         ;222
0003cc  e1a00006          MOV      r0,r6                 ;222
0003d0  ebfffffe          BL       __aeabi_i2f
0003d4  e1a0100a          MOV      r1,r10                ;222
0003d8  ebfffffe          BL       __aeabi_fadd
0003dc  e1a0a000          MOV      r10,r0                ;222
0003e0  e7940105          LDR      r0,[r4,r5,LSL #2]     ;223
0003e4  e0000096          MUL      r0,r6,r0              ;223
0003e8  ebfffffe          BL       __aeabi_i2f
0003ec  e1a0100b          MOV      r1,r11                ;223
0003f0  ebfffffe          BL       __aeabi_fadd
0003f4  e1a0b000          MOV      r11,r0                ;223
0003f8  e5970028          LDR      r0,[r7,#0x28]         ;224
0003fc  e0000096          MUL      r0,r6,r0              ;224
000400  ebfffffe          BL       __aeabi_i2f
000404  e1a01009          MOV      r1,r9                 ;224
000408  ebfffffe          BL       __aeabi_fadd
00040c  e2855001          ADD      r5,r5,#1              ;224
000410  e3550005          CMP      r5,#5                 ;220
000414  e1a09000          MOV      r9,r0                 ;224
000418  baffffe9          BLT      |L2.964|
00041c  e1a01000          MOV      r1,r0                 ;228
000420  e59d0014          LDR      r0,[sp,#0x14]         ;228
000424  ebfffffe          BL       __aeabi_fmul
000428  e1a05000          MOV      r5,r0                 ;228
00042c  e59d0010          LDR      r0,[sp,#0x10]         ;228
000430  e1a0100b          MOV      r1,r11                ;228
000434  ebfffffe          BL       __aeabi_fmul
000438  e1a06000          MOV      r6,r0                 ;228
00043c  e59d0018          LDR      r0,[sp,#0x18]         ;228
000440  e1a0100a          MOV      r1,r10                ;228
000444  ebfffffe          BL       __aeabi_fmul
000448  e1a01006          MOV      r1,r6                 ;228
00044c  ebfffffe          BL       __aeabi_fadd
000450  e1a01005          MOV      r1,r5                 ;228
000454  ebfffffe          BL       __aeabi_fadd
000458  e59d1008          LDR      r1,[sp,#8]            ;228
00045c  ebfffffe          BL       __aeabi_fmul
000460  ebfffffe          BL       __aeabi_f2iz
000464  e584005c          STR      r0,[r4,#0x5c]         ;229
000468  e59d000c          LDR      r0,[sp,#0xc]          ;229
00046c  e1a01009          MOV      r1,r9                 ;229
000470  ebfffffe          BL       __aeabi_fmul
000474  e1a05000          MOV      r5,r0                 ;229
000478  e59d001c          LDR      r0,[sp,#0x1c]         ;229
00047c  e1a0100b          MOV      r1,r11                ;229
000480  ebfffffe          BL       __aeabi_fmul
000484  e1a06000          MOV      r6,r0                 ;229
000488  e59d0010          LDR      r0,[sp,#0x10]         ;229
00048c  e1a0100a          MOV      r1,r10                ;229
000490  ebfffffe          BL       __aeabi_fmul
000494  e1a01006          MOV      r1,r6                 ;229
000498  ebfffffe          BL       __aeabi_fadd
00049c  e1a01005          MOV      r1,r5                 ;229
0004a0  ebfffffe          BL       __aeabi_fadd
0004a4  e59d1008          LDR      r1,[sp,#8]            ;229
0004a8  ebfffffe          BL       __aeabi_fmul
0004ac  ebfffffe          BL       __aeabi_f2iz
0004b0  e5840060          STR      r0,[r4,#0x60]         ;230
0004b4  e1a01009          MOV      r1,r9                 ;230
0004b8  e1a00008          MOV      r0,r8                 ;230
0004bc  ebfffffe          BL       __aeabi_fmul
0004c0  e1a05000          MOV      r5,r0                 ;230
0004c4  e59d000c          LDR      r0,[sp,#0xc]          ;230
0004c8  e1a0100b          MOV      r1,r11                ;230
0004cc  ebfffffe          BL       __aeabi_fmul
0004d0  e1a06000          MOV      r6,r0                 ;230
0004d4  e59d0014          LDR      r0,[sp,#0x14]         ;230
0004d8  e1a0100a          MOV      r1,r10                ;230
0004dc  ebfffffe          BL       __aeabi_fmul
0004e0  e1a01006          MOV      r1,r6                 ;230
0004e4  ebfffffe          BL       __aeabi_fadd
0004e8  e1a01005          MOV      r1,r5                 ;230
0004ec  ebfffffe          BL       __aeabi_fadd
0004f0  e59d1008          LDR      r1,[sp,#8]            ;230
0004f4  ebfffffe          BL       __aeabi_fmul
0004f8  ebfffffe          BL       __aeabi_f2iz
0004fc  e5840064          STR      r0,[r4,#0x64]         ;237
000500  e59d0008          LDR      r0,[sp,#8]            ;237
000504  ebfffffe          BL       __aeabi_f2iz
000508  e5840068          STR      r0,[r4,#0x68]         ;237
00050c  e3a00001          MOV      r0,#1                 ;238
000510  eaffff22          B        |L2.416|
                  |L2.1300|
                          DCD      0x47800000
                  |L2.1304|
                          DCD      0x3dcccccd
                  |L2.1308|
00051c  74735f63          DCB      "ts_calibrate: determinant is too small -- %f\n",0
000520  616c6962
000524  72617465
000528  3a206465
00052c  7465726d
000530  696e616e
000534  74206973
000538  20746f6f
00053c  20736d61
000540  6c6c202d
000544  2d202566
000548  0a00    
00054a  00                DCB      0
00054b  00                DCB      0
                          ENDP


                          AREA ||i.ts_calibrate||, CODE, READONLY, ALIGN=2

                  ts_calibrate PROC
;;;274    
;;;275    int ts_calibrate(int xsize, int ysize)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;276    {
;;;277        int i;
;;;278    
;;;279        xres = xsize;
000004  e59f61b8          LDR      r6,|L3.452|
;;;280        yres = ysize;
000008  e59f71b8          LDR      r7,|L3.456|
;;;281    
;;;282        for (i = 0; i < NR_COLORS; i++)
;;;283            setcolor (i, palette [i]);
00000c  e59f51b8          LDR      r5,|L3.460|
000010  e5860000          STR      r0,[r6,#0]            ;280  ; xres
000014  e3a04000          MOV      r4,#0                 ;282
000018  e5871000          STR      r1,[r7,#0]  ; yres
                  |L3.28|
00001c  e7951104          LDR      r1,[r5,r4,LSL #2]
000020  e1a00004          MOV      r0,r4
000024  ebfffffe          BL       setcolor
000028  e2844001          ADD      r4,r4,#1
00002c  e3540007          CMP      r4,#7                 ;282
000030  3afffff9          BCC      |L3.28|
;;;284    
;;;285    //    put_string_center (xres / 2, yres / 4,
;;;286    //                       "TSLIB calibration utility", 1);
;;;287    //    put_string_center (xres / 2, yres / 4 + 20,
;;;288    //                       "Touch crosshair to calibrate", 2);
;;;289    
;;;290        GUI_SetColor(palette [1]);
000034  e5950004          LDR      r0,[r5,#4]  ; palette
000038  ebfffffe          BL       GUI_SetColor
;;;291        GUI_DispStringHCenterAt("TSLIB calibration utility", xres / 2, yres / 4);
00003c  e5970000          LDR      r0,[r7,#0]  ; yres
000040  e1a02120          LSR      r2,r0,#2
000044  e5960000          LDR      r0,[r6,#0]  ; xres
000048  e1a010a0          LSR      r1,r0,#1
00004c  e28f0f5f          ADR      r0,|L3.464|
000050  ebfffffe          BL       GUI_DispStringHCenterAt
;;;292    
;;;293        GUI_SetColor(palette [2]);
000054  e5950008          LDR      r0,[r5,#8]  ; palette
000058  ebfffffe          BL       GUI_SetColor
;;;294        GUI_DispStringHCenterAt("Touch crosshair to calibrate", xres / 2, yres / 4 + 20);
00005c  e5970000          LDR      r0,[r7,#0]  ; yres
000060  e3a01014          MOV      r1,#0x14
000064  e0812120          ADD      r2,r1,r0,LSR #2
000068  e5960000          LDR      r0,[r6,#0]  ; xres
00006c  e1a010a0          LSR      r1,r0,#1
000070  e28f0f5d          ADR      r0,|L3.492|
000074  ebfffffe          BL       GUI_DispStringHCenterAt
;;;295    
;;;296        sysprintf("xres = %d, yres = %d\n", xres, yres);
000078  e5972000          LDR      r2,[r7,#0]  ; yres
00007c  e5961000          LDR      r1,[r6,#0]  ; xres
000080  e28f0f61          ADR      r0,|L3.524|
000084  ebfffffe          BL       sysprintf
;;;297    
;;;298    // Read a touchscreen event to clear the buffer
;;;299        //getxy(ts, 0, 0);
;;;300    
;;;301        get_sample (&cal, 0, 50,        50,        "Top left");
000088  e28f0f65          ADR      r0,|L3.548|
00008c  e3a03032          MOV      r3,#0x32
000090  e58d0000          STR      r0,[sp,#0]
000094  e59f0194          LDR      r0,|L3.560|
000098  e1a02003          MOV      r2,r3
00009c  e3a01000          MOV      r1,#0
0000a0  ebfffffe          BL       get_sample
;;;302    //  GUI_Delay(200);
;;;303        get_sample (&cal, 1, xres - 50, 50,        "Top right");
0000a4  e28f0f62          ADR      r0,|L3.564|
0000a8  e58d0000          STR      r0,[sp,#0]
0000ac  e5960000          LDR      r0,[r6,#0]  ; xres
0000b0  e3a03032          MOV      r3,#0x32
0000b4  e2402032          SUB      r2,r0,#0x32
0000b8  e59f0170          LDR      r0,|L3.560|
0000bc  e3a01001          MOV      r1,#1
0000c0  ebfffffe          BL       get_sample
;;;304        //GUI_Delay(200);
;;;305        get_sample (&cal, 2, xres - 50, yres - 50, "Bot right");
0000c4  e28f0f5d          ADR      r0,|L3.576|
0000c8  e58d0000          STR      r0,[sp,#0]
0000cc  e5970000          LDR      r0,[r7,#0]  ; yres
0000d0  e3a01002          MOV      r1,#2
0000d4  e2403032          SUB      r3,r0,#0x32
0000d8  e5960000          LDR      r0,[r6,#0]  ; xres
0000dc  e2402032          SUB      r2,r0,#0x32
0000e0  e59f0148          LDR      r0,|L3.560|
0000e4  ebfffffe          BL       get_sample
;;;306    //  GUI_Delay(200);
;;;307        get_sample (&cal, 3, 50,        yres - 50, "Bot left");
0000e8  e28f0f57          ADR      r0,|L3.588|
0000ec  e58d0000          STR      r0,[sp,#0]
0000f0  e5970000          LDR      r0,[r7,#0]  ; yres
0000f4  e3a02032          MOV      r2,#0x32
0000f8  e2403032          SUB      r3,r0,#0x32
0000fc  e59f012c          LDR      r0,|L3.560|
000100  e3a01003          MOV      r1,#3
000104  ebfffffe          BL       get_sample
;;;308    //  GUI_Delay(200);
;;;309        get_sample (&cal, 4, xres / 2,  yres / 2,  "Center");
000108  e28f0f52          ADR      r0,|L3.600|
00010c  e58d0000          STR      r0,[sp,#0]
000110  e5970000          LDR      r0,[r7,#0]  ; yres
000114  e3a01004          MOV      r1,#4
000118  e1a030a0          LSR      r3,r0,#1
00011c  e5960000          LDR      r0,[r6,#0]  ; xres
000120  e1a020a0          LSR      r2,r0,#1
000124  e59f0104          LDR      r0,|L3.560|
000128  ebfffffe          BL       get_sample
;;;310    //  GUI_Delay(200);
;;;311        if (perform_calibration (&cal))
00012c  e59f00fc          LDR      r0,|L3.560|
000130  ebfffffe          BL       perform_calibration
000134  e59f50f4          LDR      r5,|L3.560|
000138  e3500000          CMP      r0,#0
00013c  0a00000c          BEQ      |L3.372|
;;;312        {
;;;313            sysprintf ("Calibration constants: ");
000140  e28f0f46          ADR      r0,|L3.608|
000144  ebfffffe          BL       sysprintf
;;;314            for (i = 0; i < 7; i++) sysprintf("%d ", cal.a [i]);
000148  e3a04000          MOV      r4,#0
                  |L3.332|
00014c  e0850104          ADD      r0,r5,r4,LSL #2
000150  e5901050          LDR      r1,[r0,#0x50]
000154  e28f0f47          ADR      r0,|L3.632|
000158  ebfffffe          BL       sysprintf
00015c  e2844001          ADD      r4,r4,#1
000160  e3540007          CMP      r4,#7
000164  bafffff8          BLT      |L3.332|
;;;315            sysprintf("\n");
000168  e28f00b0          ADR      r0,|L3.544|
00016c  ebfffffe          BL       sysprintf
000170  ea000002          B        |L3.384|
                  |L3.372|
;;;316        }
;;;317        else
;;;318        {
;;;319            sysprintf("Calibration failed.\n");
000174  e28f0c01          ADR      r0,|L3.636|
000178  ebfffffe          BL       sysprintf
;;;320            i = -1;
00017c  e3e04000          MVN      r4,#0
                  |L3.384|
;;;321        }
;;;322        final_cal.a[0] = cal.a[1];
000180  e59f010c          LDR      r0,|L3.660|
000184  e5951054          LDR      r1,[r5,#0x54]  ; cal
;;;323        final_cal.a[1] = cal.a[2];
000188  e5801050          STR      r1,[r0,#0x50]  ; final_cal
00018c  e5951058          LDR      r1,[r5,#0x58]  ; cal
;;;324        final_cal.a[2] = cal.a[0];
000190  e5801054          STR      r1,[r0,#0x54]  ; final_cal
000194  e5951050          LDR      r1,[r5,#0x50]  ; cal
;;;325        final_cal.a[3] = cal.a[4];
000198  e5801058          STR      r1,[r0,#0x58]  ; final_cal
00019c  e5951060          LDR      r1,[r5,#0x60]  ; cal
;;;326        final_cal.a[4] = cal.a[5];
0001a0  e580105c          STR      r1,[r0,#0x5c]  ; final_cal
0001a4  e5951064          LDR      r1,[r5,#0x64]  ; cal
;;;327        final_cal.a[5] = cal.a[3];
0001a8  e5801060          STR      r1,[r0,#0x60]  ; final_cal
0001ac  e595105c          LDR      r1,[r5,#0x5c]  ; cal
;;;328        final_cal.a[6] = cal.a[6];
0001b0  e5801064          STR      r1,[r0,#0x64]  ; final_cal
0001b4  e5951068          LDR      r1,[r5,#0x68]  ; cal
0001b8  e5801068          STR      r1,[r0,#0x68]  ; final_cal
;;;329        return i;
0001bc  e1a00004          MOV      r0,r4
;;;330    }
0001c0  e8bd80f8          POP      {r3-r7,pc}
;;;331    #if 0
                          ENDP

                  |L3.452|
                          DCD      xres
                  |L3.456|
                          DCD      yres
                  |L3.460|
                          DCD      ||.data||+0x8
                  |L3.464|
0001d0  54534c49          DCB      "TSLIB calibration utility",0
0001d4  42206361
0001d8  6c696272
0001dc  6174696f
0001e0  6e207574
0001e4  696c6974
0001e8  7900    
0001ea  00                DCB      0
0001eb  00                DCB      0
                  |L3.492|
0001ec  546f7563          DCB      "Touch crosshair to calibrate",0
0001f0  68206372
0001f4  6f737368
0001f8  61697220
0001fc  746f2063
000200  616c6962
000204  72617465
000208  00      
000209  00                DCB      0
00020a  00                DCB      0
00020b  00                DCB      0
                  |L3.524|
00020c  78726573          DCB      "xres = %d, yres = %d"
000210  203d2025
000214  642c2079
000218  72657320
00021c  3d202564
                  |L3.544|
000220  0a00              DCB      "\n",0
000222  00                DCB      0
000223  00                DCB      0
                  |L3.548|
000224  546f7020          DCB      "Top left",0
000228  6c656674
00022c  00      
00022d  00                DCB      0
00022e  00                DCB      0
00022f  00                DCB      0
                  |L3.560|
                          DCD      ||.bss||
                  |L3.564|
000234  546f7020          DCB      "Top right",0
000238  72696768
00023c  7400    
00023e  00                DCB      0
00023f  00                DCB      0
                  |L3.576|
000240  426f7420          DCB      "Bot right",0
000244  72696768
000248  7400    
00024a  00                DCB      0
00024b  00                DCB      0
                  |L3.588|
00024c  426f7420          DCB      "Bot left",0
000250  6c656674
000254  00      
000255  00                DCB      0
000256  00                DCB      0
000257  00                DCB      0
                  |L3.600|
000258  43656e74          DCB      "Center",0
00025c  657200  
00025f  00                DCB      0
                  |L3.608|
000260  43616c69          DCB      "Calibration constants: ",0
000264  62726174
000268  696f6e20
00026c  636f6e73
000270  74616e74
000274  733a2000
                  |L3.632|
000278  25642000          DCB      "%d ",0
                  |L3.636|
00027c  43616c69          DCB      "Calibration failed.\n",0
000280  62726174
000284  696f6e20
000288  6661696c
00028c  65642e0a
000290  00      
000291  00                DCB      0
000292  00                DCB      0
000293  00                DCB      0
                  |L3.660|
                          DCD      ||.bss||+0x6c

                          AREA ||i.ts_phy2log||, CODE, READONLY, ALIGN=2

                  ts_phy2log PROC
;;;358    #endif
;;;359    int ts_phy2log(int *sumx, int *sumy)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;360    {
;;;361        int xtemp,ytemp;
;;;362    
;;;363        xtemp = *sumx;
;;;364        ytemp = *sumy;
;;;365        *sumx = ( final_cal.a[2] +
000004  e59f4054          LDR      r4,|L4.96|
000008  e5906000          LDR      r6,[r0,#0]            ;364
00000c  e5915000          LDR      r5,[r1,#0]
000010  e1a07001          MOV      r7,r1                 ;360
000014  e1a08000          MOV      r8,r0                 ;360
000018  e5940058          LDR      r0,[r4,#0x58]  ; final_cal, final_cal
00001c  e5941050          LDR      r1,[r4,#0x50]
000020  e0200691          MLA      r0,r1,r6,r0
000024  e5941054          LDR      r1,[r4,#0x54]  ; final_cal
000028  e0200591          MLA      r0,r1,r5,r0
00002c  e5941068          LDR      r1,[r4,#0x68]  ; final_cal
000030  ebfffffe          BL       __aeabi_idivmod
;;;366                  final_cal.a[0]*xtemp +
;;;367                  final_cal.a[1]*ytemp ) / final_cal.a[6];
;;;368        *sumy = ( final_cal.a[5] +
000034  e5880000          STR      r0,[r8,#0]
000038  e5940064          LDR      r0,[r4,#0x64]  ; final_cal, final_cal
00003c  e594105c          LDR      r1,[r4,#0x5c]
000040  e0200691          MLA      r0,r1,r6,r0
000044  e5941060          LDR      r1,[r4,#0x60]  ; final_cal
000048  e0200591          MLA      r0,r1,r5,r0
00004c  e5941068          LDR      r1,[r4,#0x68]  ; final_cal
000050  ebfffffe          BL       __aeabi_idivmod
000054  e5870000          STR      r0,[r7,#0]
;;;369                  final_cal.a[3]*xtemp +
;;;370                  final_cal.a[4]*ytemp ) / final_cal.a[6];
;;;371    //sysprintf("After X=%d, Y=%d\n",*sumx, *sumy);
;;;372        return 1;
000058  e3a00001          MOV      r0,#1
;;;373    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;374    
                          ENDP

                  |L4.96|
                          DCD      ||.bss||+0x6c

                          AREA ||i.ts_readfile||, CODE, READONLY, ALIGN=2

                  ts_readfile PROC
;;;398    
;;;399    int ts_readfile(void)
000000  e59f0044          LDR      r0,|L5.76|
;;;400    {
;;;401    #ifdef __USE_SD__
;;;402        size_t cnt;
;;;403        FRESULT res;
;;;404        res = f_lseek(&hFile, 0);
;;;405        if (res != FR_OK)
;;;406        {
;;;407            sysprintf("CANNOT seek the calibration into file\n");
;;;408            return -1;
;;;409        }
;;;410    
;;;411        res = f_read(&hFile, (char *)&final_cal.a[0], 28, &cnt);
;;;412        if (res != FR_OK)
;;;413        {
;;;414            sysprintf("CANNOT read the calibration into file, %d\n", cnt);
;;;415            return -1;
;;;416        }
;;;417    #else
;;;418        final_cal.a[0] = g_pu32Res[0];
000004  e59f1044          LDR      r1,|L5.80|
000008  e5900000          LDR      r0,[r0,#0]  ; g_pu32Res
00000c  e5902000          LDR      r2,[r0,#0]
;;;419        final_cal.a[1] = g_pu32Res[1];
000010  e5812050          STR      r2,[r1,#0x50]  ; final_cal
000014  e5902004          LDR      r2,[r0,#4]
;;;420        final_cal.a[2] = g_pu32Res[2];
000018  e5812054          STR      r2,[r1,#0x54]  ; final_cal
00001c  e5902008          LDR      r2,[r0,#8]
;;;421        final_cal.a[3] = g_pu32Res[3];
000020  e5812058          STR      r2,[r1,#0x58]  ; final_cal
000024  e590200c          LDR      r2,[r0,#0xc]
;;;422        final_cal.a[4] = g_pu32Res[4];
000028  e581205c          STR      r2,[r1,#0x5c]  ; final_cal
00002c  e5902010          LDR      r2,[r0,#0x10]
;;;423        final_cal.a[5] = g_pu32Res[5];
000030  e5812060          STR      r2,[r1,#0x60]  ; final_cal
000034  e5902014          LDR      r2,[r0,#0x14]
;;;424        final_cal.a[6] = g_pu32Res[6];
000038  e5812064          STR      r2,[r1,#0x64]  ; final_cal
00003c  e5900018          LDR      r0,[r0,#0x18]
000040  e5810068          STR      r0,[r1,#0x68]  ; final_cal
;;;425    #endif
;;;426        return 0;
000044  e3a00000          MOV      r0,#0
;;;427    }
000048  e12fff1e          BX       lr
                          ENDP

                  |L5.76|
                          DCD      g_pu32Res
                  |L5.80|
                          DCD      ||.bss||+0x6c

                          AREA ||i.ts_writefile||, CODE, READONLY, ALIGN=2

                  ts_writefile PROC
;;;374    
;;;375    int ts_writefile(void)
000000  e92d4010          PUSH     {r4,lr}
;;;376    {
;;;377    #ifdef __USE_SD__
;;;378        size_t cnt;
;;;379        FRESULT res;
;;;380        res = f_lseek(&hFile, 0);
;;;381        if (res != FR_OK)
;;;382        {
;;;383            sysprintf("CANNOT seek the calibration into file\n");
;;;384            return -1;
;;;385        }
;;;386    
;;;387        res = f_write(&hFile, (char *)&final_cal.a[0], 28, &cnt);
;;;388        if (res != FR_OK)
;;;389        {
;;;390            sysprintf("CANNOT write the calibration into file, %d\n", cnt);
;;;391            return -1;
;;;392        }
;;;393    #else
;;;394        SpiFlash_NormalProgram(__DEMO_TSFILE_ADDR__, (uint8_t *)&final_cal.a[0], 32);
000004  e59f1010          LDR      r1,|L6.28|
000008  e3a02020          MOV      r2,#0x20
00000c  e3a00706          MOV      r0,#0x180000
000010  ebfffffe          BL       SpiFlash_NormalProgram
;;;395    #endif
;;;396        return 0;
000014  e3a00000          MOV      r0,#0
;;;397    }
000018  e8bd8010          POP      {r4,pc}
;;;398    
                          ENDP

                  |L6.28|
                          DCD      ||.bss||+0xbc

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||cal||
                          %        108
                  final_cal
                          %        108

                          AREA ||.data||, DATA, ALIGN=2

                  last_x
                          DCD      0xffffffff
                  last_y
                          DCD      0x00000000
                  palette
                          DCD      0xff000000
                          DCD      0xffffe080
                          DCD      0xffffffff
                          DCD      0xffe0c0a0
                          DCD      0xff001f7f
                          DCD      0xff1f2020
                          DCD      0xff1f3f5f
