#line 1 "..\\..\\..\\Driver\\Source\\2d.c"
 





 
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"
 
 
 





 






 







 




  
 








#line 47 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"


  



    typedef unsigned int size_t;    









 
 

 



    typedef struct __va_list __va_list;






   




 




typedef struct __fpos_t_struct {
    unsigned __int64 __pos;
    



 
    struct {
        unsigned int __state1, __state2;
    } __mbstate;
} fpos_t;
   


 


   

 

typedef struct __FILE FILE;
   






 

#line 136 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"


extern FILE __stdin, __stdout, __stderr;
extern FILE *__aeabi_stdin, *__aeabi_stdout, *__aeabi_stderr;

#line 166 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"
    

    

    





     



   


 


   


 

   



 

   


 




   


 





    


 






extern __declspec(__nothrow) int remove(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int rename(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) FILE *tmpfile(void);
   




 
extern __declspec(__nothrow) char *tmpnam(char *  );
   











 

extern __declspec(__nothrow) int fclose(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) int fflush(FILE *  );
   







 
extern __declspec(__nothrow) FILE *fopen(const char * __restrict  ,
                           const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   








































 
extern __declspec(__nothrow) FILE *freopen(const char * __restrict  ,
                    const char * __restrict  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(2,3)));
   








 
extern __declspec(__nothrow) void setbuf(FILE * __restrict  ,
                    char * __restrict  ) __attribute__((__nonnull__(1)));
   




 
extern __declspec(__nothrow) int setvbuf(FILE * __restrict  ,
                   char * __restrict  ,
                   int  , size_t  ) __attribute__((__nonnull__(1)));
   















 
#pragma __printf_args
extern __declspec(__nothrow) int fprintf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   


















 
#pragma __printf_args
extern __declspec(__nothrow) int _fprintf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   




 
#pragma __printf_args
extern __declspec(__nothrow) int _printf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __printf_args
extern __declspec(__nothrow) int sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






 
#pragma __printf_args
extern __declspec(__nothrow) int _sprintf(char * __restrict  , const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

#pragma __printf_args
extern __declspec(__nothrow) int __ARM_snprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(3)));


#pragma __printf_args
extern __declspec(__nothrow) int snprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   















 

#pragma __printf_args
extern __declspec(__nothrow) int _snprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , ...) __attribute__((__nonnull__(3)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int fscanf(FILE * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   






























 
#pragma __scanf_args
extern __declspec(__nothrow) int _fscanf(FILE * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   






 
#pragma __scanf_args
extern __declspec(__nothrow) int _scanf(const char * __restrict  , ...) __attribute__((__nonnull__(1)));
   



 
#pragma __scanf_args
extern __declspec(__nothrow) int sscanf(const char * __restrict  ,
                    const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   








 
#pragma __scanf_args
extern __declspec(__nothrow) int _sscanf(const char * __restrict  ,
                     const char * __restrict  , ...) __attribute__((__nonnull__(1,2)));
   



 

 
extern __declspec(__nothrow) int vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int _vfscanf(FILE * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int _vscanf(const char * __restrict  , __va_list) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) int _vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) int __ARM_vsscanf(const char * __restrict  , const char * __restrict  , __va_list) __attribute__((__nonnull__(1,2)));

extern __declspec(__nothrow) int vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int _vprintf(const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) int vfprintf(FILE * __restrict  ,
                    const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int vsprintf(char * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int __ARM_vsnprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));

extern __declspec(__nothrow) int vsnprintf(char * __restrict  , size_t  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   







 

extern __declspec(__nothrow) int _vsprintf(char * __restrict  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vfprintf(FILE * __restrict  ,
                     const char * __restrict  , __va_list  ) __attribute__((__nonnull__(1,2)));
   



 
extern __declspec(__nothrow) int _vsnprintf(char * __restrict  , size_t  ,
                      const char * __restrict  , __va_list  ) __attribute__((__nonnull__(3)));
   



 

#pragma __printf_args
extern __declspec(__nothrow) int asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) int vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));

#pragma __printf_args
extern __declspec(__nothrow) int __ARM_asprintf(char **  , const char * __restrict  , ...) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) int __ARM_vasprintf(char **  , const char * __restrict  , __va_list  ) __attribute__((__nonnull__(2)));
   








 

extern __declspec(__nothrow) int fgetc(FILE *  ) __attribute__((__nonnull__(1)));
   







 
extern __declspec(__nothrow) char *fgets(char * __restrict  , int  ,
                    FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   










 
extern __declspec(__nothrow) int fputc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   







 
extern __declspec(__nothrow) int fputs(const char * __restrict  , FILE * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) int getc(FILE *  ) __attribute__((__nonnull__(1)));
   







 




    extern __declspec(__nothrow) int (getchar)(void);

   





 
extern __declspec(__nothrow) char *gets(char *  ) __attribute__((__nonnull__(1)));
   









 
extern __declspec(__nothrow) int putc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   





 




    extern __declspec(__nothrow) int (putchar)(int  );

   



 
extern __declspec(__nothrow) int puts(const char *  ) __attribute__((__nonnull__(1)));
   





 
extern __declspec(__nothrow) int ungetc(int  , FILE *  ) __attribute__((__nonnull__(2)));
   






















 

extern __declspec(__nothrow) size_t fread(void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   











 

extern __declspec(__nothrow) size_t __fread_bytes_avail(void * __restrict  ,
                    size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,3)));
   











 

extern __declspec(__nothrow) size_t fwrite(const void * __restrict  ,
                    size_t  , size_t  , FILE * __restrict  ) __attribute__((__nonnull__(1,4)));
   







 

extern __declspec(__nothrow) int fgetpos(FILE * __restrict  , fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   








 
extern __declspec(__nothrow) int fseek(FILE *  , long int  , int  ) __attribute__((__nonnull__(1)));
   














 
extern __declspec(__nothrow) int fsetpos(FILE * __restrict  , const fpos_t * __restrict  ) __attribute__((__nonnull__(1,2)));
   










 
extern __declspec(__nothrow) long int ftell(FILE *  ) __attribute__((__nonnull__(1)));
   











 
extern __declspec(__nothrow) void rewind(FILE *  ) __attribute__((__nonnull__(1)));
   





 

extern __declspec(__nothrow) void clearerr(FILE *  ) __attribute__((__nonnull__(1)));
   




 

extern __declspec(__nothrow) int feof(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) int ferror(FILE *  ) __attribute__((__nonnull__(1)));
   


 
extern __declspec(__nothrow) void perror(const char *  );
   









 

extern __declspec(__nothrow) int _fisatty(FILE *   ) __attribute__((__nonnull__(1)));
    
 

extern __declspec(__nothrow) void __use_no_semihosting_swi(void);
extern __declspec(__nothrow) void __use_no_semihosting(void);
    





 











#line 1021 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdio.h"



 

#line 9 "..\\..\\..\\Driver\\Source\\2d.c"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"
 
 
 




 
 



 






   














  


 








#line 54 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"


  



    typedef unsigned int size_t;    
#line 70 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"






    



    typedef unsigned short wchar_t;  
#line 91 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"

typedef struct div_t { int quot, rem; } div_t;
    
typedef struct ldiv_t { long int quot, rem; } ldiv_t;
    

typedef struct lldiv_t { long long quot, rem; } lldiv_t;
    


#line 112 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"
   



 

   




 
#line 131 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"
   


 
extern __declspec(__nothrow) int __aeabi_MB_CUR_MAX(void);

   




 

   




 




extern __declspec(__nothrow) double atof(const char *  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) int atoi(const char *  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) long int atol(const char *  ) __attribute__((__nonnull__(1)));
   



 

extern __declspec(__nothrow) long long atoll(const char *  ) __attribute__((__nonnull__(1)));
   



 


extern __declspec(__nothrow) double strtod(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
   

















 

extern __declspec(__nothrow) float strtof(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
extern __declspec(__nothrow) long double strtold(const char * __restrict  , char ** __restrict  ) __attribute__((__nonnull__(1)));
   

 

extern __declspec(__nothrow) long int strtol(const char * __restrict  ,
                        char ** __restrict  , int  ) __attribute__((__nonnull__(1)));
   



























 
extern __declspec(__nothrow) unsigned long int strtoul(const char * __restrict  ,
                                       char ** __restrict  , int  ) __attribute__((__nonnull__(1)));
   


























 

 
extern __declspec(__nothrow) long long strtoll(const char * __restrict  ,
                                  char ** __restrict  , int  )
                          __attribute__((__nonnull__(1)));
   




 
extern __declspec(__nothrow) unsigned long long strtoull(const char * __restrict  ,
                                            char ** __restrict  , int  )
                                   __attribute__((__nonnull__(1)));
   



 

extern __declspec(__nothrow) int rand(void);
   







 
extern __declspec(__nothrow) void srand(unsigned int  );
   






 

struct _rand_state { int __x[57]; };
extern __declspec(__nothrow) int _rand_r(struct _rand_state *);
extern __declspec(__nothrow) void _srand_r(struct _rand_state *, unsigned int);
struct _ANSI_rand_state { int __x[1]; };
extern __declspec(__nothrow) int _ANSI_rand_r(struct _ANSI_rand_state *);
extern __declspec(__nothrow) void _ANSI_srand_r(struct _ANSI_rand_state *, unsigned int);
   


 

extern __declspec(__nothrow) void *calloc(size_t  , size_t  );
   



 
extern __declspec(__nothrow) void free(void *  );
   





 
extern __declspec(__nothrow) void *malloc(size_t  );
   



 
extern __declspec(__nothrow) void *realloc(void *  , size_t  );
   













 

extern __declspec(__nothrow) int posix_memalign(void **  , size_t  , size_t  );
   









 

typedef int (*__heapprt)(void *, char const *, ...);
extern __declspec(__nothrow) void __heapstats(int (*  )(void *  ,
                                           char const *  , ...),
                        void *  ) __attribute__((__nonnull__(1)));
   










 
extern __declspec(__nothrow) int __heapvalid(int (*  )(void *  ,
                                           char const *  , ...),
                       void *  , int  ) __attribute__((__nonnull__(1)));
   














 
extern __declspec(__nothrow) __declspec(__noreturn) void abort(void);
   







 

extern __declspec(__nothrow) int atexit(void (*  )(void)) __attribute__((__nonnull__(1)));
   




 
#line 436 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"


extern __declspec(__nothrow) __declspec(__noreturn) void exit(int  );
   












 

extern __declspec(__nothrow) __declspec(__noreturn) void _Exit(int  );
   







      

extern __declspec(__nothrow) char *getenv(const char *  ) __attribute__((__nonnull__(1)));
   









 

extern __declspec(__nothrow) int  system(const char *  );
   









 

extern  void *bsearch(const void *  , const void *  ,
              size_t  , size_t  ,
              int (*  )(const void *, const void *)) __attribute__((__nonnull__(1,2,5)));
   












 
#line 524 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"


extern  void qsort(void *  , size_t  , size_t  ,
           int (*  )(const void *, const void *)) __attribute__((__nonnull__(1,4)));
   









 

#line 553 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"

extern __declspec(__nothrow) __attribute__((const)) int abs(int  );
   



 

extern __declspec(__nothrow) __attribute__((const)) div_t div(int  , int  );
   









 
extern __declspec(__nothrow) __attribute__((const)) long int labs(long int  );
   



 




extern __declspec(__nothrow) __attribute__((const)) ldiv_t ldiv(long int  , long int  );
   











 







extern __declspec(__nothrow) __attribute__((const)) long long llabs(long long  );
   



 




extern __declspec(__nothrow) __attribute__((const)) lldiv_t lldiv(long long  , long long  );
   











 
#line 634 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"




 
typedef struct __sdiv32by16 { int quot, rem; } __sdiv32by16;
typedef struct __udiv32by16 { unsigned int quot, rem; } __udiv32by16;
    
typedef struct __sdiv64by32 { int rem, quot; } __sdiv64by32;

__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv32by16 __rt_sdiv32by16(
     int  ,
     short int  );
   

 
__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __udiv32by16 __rt_udiv32by16(
     unsigned int  ,
     unsigned short  );
   

 
__value_in_regs extern __declspec(__nothrow) __attribute__((const)) __sdiv64by32 __rt_sdiv64by32(
     int  , unsigned int  ,
     int  );
   

 




 
extern __declspec(__nothrow) unsigned int __fp_status(unsigned int  , unsigned int  );
   







 























 
extern __declspec(__nothrow) int mblen(const char *  , size_t  );
   












 
extern __declspec(__nothrow) int mbtowc(wchar_t * __restrict  ,
                   const char * __restrict  , size_t  );
   















 
extern __declspec(__nothrow) int wctomb(char *  , wchar_t  );
   













 





 
extern __declspec(__nothrow) size_t mbstowcs(wchar_t * __restrict  ,
                      const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
   














 
extern __declspec(__nothrow) size_t wcstombs(char * __restrict  ,
                      const wchar_t * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
   














 

extern __declspec(__nothrow) void __use_realtime_heap(void);
extern __declspec(__nothrow) void __use_realtime_division(void);
extern __declspec(__nothrow) void __use_two_region_memory(void);
extern __declspec(__nothrow) void __use_no_heap(void);
extern __declspec(__nothrow) void __use_no_heap_region(void);

extern __declspec(__nothrow) char const *__C_library_version_string(void);
extern __declspec(__nothrow) int __C_library_version_number(void);











#line 892 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdlib.h"





 
#line 10 "..\\..\\..\\Driver\\Source\\2d.c"
#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
 
 
 
 




 








 












#line 38 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"


  



    typedef unsigned int size_t;    
#line 54 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"




extern __declspec(__nothrow) void *memcpy(void * __restrict  ,
                    const void * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) void *memmove(void *  ,
                    const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
   







 
extern __declspec(__nothrow) char *strcpy(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) char *strncpy(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   





 

extern __declspec(__nothrow) char *strcat(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) char *strncat(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 






 

extern __declspec(__nothrow) int memcmp(const void *  , const void *  , size_t  ) __attribute__((__nonnull__(1,2)));
   





 
extern __declspec(__nothrow) int strcmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   




 
extern __declspec(__nothrow) int strncmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int strcasecmp(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   





 
extern __declspec(__nothrow) int strncasecmp(const char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






 
extern __declspec(__nothrow) int strcoll(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   







 

extern __declspec(__nothrow) size_t strxfrm(char * __restrict  , const char * __restrict  , size_t  ) __attribute__((__nonnull__(2)));
   













 


#line 193 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) void *memchr(const void *  , int  , size_t  ) __attribute__((__nonnull__(1)));

   





 

#line 209 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strchr(const char *  , int  ) __attribute__((__nonnull__(1)));

   




 

extern __declspec(__nothrow) size_t strcspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   




 

#line 232 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strpbrk(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));

   




 

#line 247 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strrchr(const char *  , int  ) __attribute__((__nonnull__(1)));

   





 

extern __declspec(__nothrow) size_t strspn(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));
   



 

#line 270 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"
extern __declspec(__nothrow) char *strstr(const char *  , const char *  ) __attribute__((__nonnull__(1,2)));

   





 

extern __declspec(__nothrow) char *strtok(char * __restrict  , const char * __restrict  ) __attribute__((__nonnull__(2)));
extern __declspec(__nothrow) char *_strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));

extern __declspec(__nothrow) char *strtok_r(char *  , const char *  , char **  ) __attribute__((__nonnull__(2,3)));

   

































 

extern __declspec(__nothrow) void *memset(void *  , int  , size_t  ) __attribute__((__nonnull__(1)));
   



 
extern __declspec(__nothrow) char *strerror(int  );
   





 
extern __declspec(__nothrow) size_t strlen(const char *  ) __attribute__((__nonnull__(1)));
   



 

extern __declspec(__nothrow) size_t strlcpy(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   
















 

extern __declspec(__nothrow) size_t strlcat(char *  , const char *  , size_t  ) __attribute__((__nonnull__(1,2)));
   






















 

extern __declspec(__nothrow) void _membitcpybl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpybb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpyhl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpyhb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpywl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitcpywb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovebl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovebb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovehl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovehb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovewl(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
extern __declspec(__nothrow) void _membitmovewb(void *  , const void *  , int  , int  , size_t  ) __attribute__((__nonnull__(1,2)));
    














































 







#line 502 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\string.h"



 

#line 11 "..\\..\\..\\Driver\\Source\\2d.c"

#line 1 "..\\..\\..\\Driver\\Include\\N9H30.h"
 







 






































 




#line 1 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
 
 





 









     
#line 27 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"
     











#line 46 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"





 

     

     
typedef   signed          char int8_t;
typedef   signed short     int int16_t;
typedef   signed           int int32_t;
typedef   signed       __int64 int64_t;

     
typedef unsigned          char uint8_t;
typedef unsigned short     int uint16_t;
typedef unsigned           int uint32_t;
typedef unsigned       __int64 uint64_t;

     

     
     
typedef   signed          char int_least8_t;
typedef   signed short     int int_least16_t;
typedef   signed           int int_least32_t;
typedef   signed       __int64 int_least64_t;

     
typedef unsigned          char uint_least8_t;
typedef unsigned short     int uint_least16_t;
typedef unsigned           int uint_least32_t;
typedef unsigned       __int64 uint_least64_t;

     

     
typedef   signed           int int_fast8_t;
typedef   signed           int int_fast16_t;
typedef   signed           int int_fast32_t;
typedef   signed       __int64 int_fast64_t;

     
typedef unsigned           int uint_fast8_t;
typedef unsigned           int uint_fast16_t;
typedef unsigned           int uint_fast32_t;
typedef unsigned       __int64 uint_fast64_t;

     




typedef   signed           int intptr_t;
typedef unsigned           int uintptr_t;


     
typedef   signed     long long intmax_t;
typedef unsigned     long long uintmax_t;




     

     





     





     





     

     





     





     





     

     





     





     





     

     






     






     






     

     


     


     


     

     
#line 216 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     



     






     
    
 



#line 241 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"

     







     










     











#line 305 "C:\\Keil_v5\\ARM\\ARMCC\\Bin\\..\\include\\stdint.h"






 
#line 54 "..\\..\\..\\Driver\\Include\\N9H30.h"




 

 
#line 78 "..\\..\\..\\Driver\\Include\\N9H30.h"

 
#line 115 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 
 
 



 

 



 

#line 169 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 195 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 211 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 255 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 290 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 324 "..\\..\\..\\Driver\\Include\\N9H30.h"

   



 



 
#line 357 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 368 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 379 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 390 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 401 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 412 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 423 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 434 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 445 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 456 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 467 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 478 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 491 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 535 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 562 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 603 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

 
#line 619 "..\\..\\..\\Driver\\Include\\N9H30.h"





 
#line 633 "..\\..\\..\\Driver\\Include\\N9H30.h"

 
#line 650 "..\\..\\..\\Driver\\Include\\N9H30.h"

 
#line 664 "..\\..\\..\\Driver\\Include\\N9H30.h"

 
#line 672 "..\\..\\..\\Driver\\Include\\N9H30.h"

 



   


 



 

 
#line 693 "..\\..\\..\\Driver\\Include\\N9H30.h"





 
#line 708 "..\\..\\..\\Driver\\Include\\N9H30.h"

   



 



 

#line 735 "..\\..\\..\\Driver\\Include\\N9H30.h"






 
#line 758 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 778 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 798 "..\\..\\..\\Driver\\Include\\N9H30.h"




 
#line 819 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 839 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 859 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 879 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 899 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 919 "..\\..\\..\\Driver\\Include\\N9H30.h"



 
#line 939 "..\\..\\..\\Driver\\Include\\N9H30.h"


   


 



 























   

 



 

#line 987 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 995 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1003 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1011 "..\\..\\..\\Driver\\Include\\N9H30.h"
   

 



 




   

 



 






   

 



 

#line 1059 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1076 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 1122 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 1144 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1157 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1170 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1183 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1196 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1209 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1222 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1235 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1248 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1261 "..\\..\\..\\Driver\\Include\\N9H30.h"




   


 



 

#line 1305 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 1320 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1327 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 1348 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1360 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 1387 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 

#line 1421 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 1457 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 1479 "..\\..\\..\\Driver\\Include\\N9H30.h"

   

 



 

#line 1527 "..\\..\\..\\Driver\\Include\\N9H30.h"

#line 1567 "..\\..\\..\\Driver\\Include\\N9H30.h"

   


 



 
#line 1619 "..\\..\\..\\Driver\\Include\\N9H30.h"

   



   





 

typedef volatile unsigned char  vu8;        
typedef volatile unsigned short vu16;       
typedef volatile unsigned long  vu32;       





 







 







 








 







 








 







 







 






 








 







 








 







 







 






 



   

 
 
 



 
typedef void *            PVOID;    
typedef void              VOID;     
typedef char              BOOL;     
typedef char *            PBOOL;    

typedef char              INT8;     
typedef char              CHAR;     
typedef char *            PINT8;    
typedef char *            PCHAR;    
typedef unsigned char     UINT8;    
typedef unsigned char     UCHAR;    
typedef unsigned char *   PUINT8;   
typedef unsigned char *   PUCHAR;   
typedef char *            PSTR;     
typedef const char *      PCSTR;    

typedef short             SHORT;    
typedef short *           PSHORT;   
typedef unsigned short    USHORT;   
typedef unsigned short *  PUSHORT;  

typedef short             INT16;    
typedef short *           PINT16;   
typedef unsigned short    UINT16;   
typedef unsigned short *  PUINT16;  

typedef int               INT;      
typedef int *             PINT;     
typedef unsigned int      UINT;     
typedef unsigned int *    PUINT;    

typedef int               INT32;    
typedef int *             PINT32;   
typedef unsigned int      UINT32;   
typedef unsigned int *    PUINT32;  

typedef __int64           INT64;    
typedef unsigned __int64  UINT64;   

typedef float             FLOAT;    
typedef float *           PFLOAT;   

typedef double            DOUBLE;   
typedef double *          PDOUBLE;  

typedef int               SIZE_T;   

typedef unsigned char     REG8;     
typedef unsigned short    REG16;    
typedef unsigned int      REG32;    
















 
#line 1866 "..\\..\\..\\Driver\\Include\\N9H30.h"

 













   
#line 13 "..\\..\\..\\Driver\\Source\\2d.c"
#line 1 "..\\..\\..\\Driver\\Include\\sys.h"
 





 











 



 



 



 
typedef enum IRQn {

     

    WDT_IRQn                = 1,        
    WWDT_IRQn               = 2,        
    LVD_IRQn                = 3,        
    EINT0_IRQn              = 4,        
    EINT1_IRQn              = 5,        
    EINT2_IRQn              = 6,        
    EINT3_IRQn              = 7,        
    EINT4_IRQn              = 8,        
    EINT5_IRQn              = 9,        
    EINT6_IRQn              = 10,       
    EINT7_IRQn              = 11,       
    ACTL_IRQn               = 12,       
    LCD_IRQn                = 13,       
    CAP_IRQn                = 14,       
    RTC_IRQn                = 15,       
    TMR0_IRQn               = 16,       
    TMR1_IRQn               = 17,       
    ADC_IRQn                = 18,       
    EMC0_RX_IRQn            = 19,       
    EMC1_RX_IRQn            = 20,       
    EMC0_TX_IRQn            = 21,       
    EMC1_TX_IRQn            = 22,       
    EHCI_IRQn               = 23,       
    OHCI_IRQn               = 24,       
    GDMA0_IRQn              = 25,       
    GDMA1_IRQn              = 26,       
    SDH_IRQn                = 27,       
    FMI_IRQn                = 28,       
    USBD_IRQn               = 29,       
    TMR2_IRQn               = 30,       
    TMR3_IRQn               = 31,       
    TMR4_IRQn               = 32,       
    JPEG_IRQn               = 33,       
    GE2D_IRQn               = 34,       
    UART0_IRQn              = 36,       
    UART1_IRQn              = 37,       
    UART2_IRQn              = 38,       
    UART4_IRQn              = 39,       
    UART6_IRQn              = 40,       
    UART8_IRQn              = 41,       
    UART10_IRQn             = 42,       
    UART3_IRQn              = 43,       
    UART5_IRQn              = 44,       
    UART7_IRQn              = 45,       
    UART9_IRQn              = 46,       
    ETMR0_IRQn              = 47,       
    ETMR1_IRQn              = 48,       
    ETMR2_IRQn              = 49,       
    ETMR3_IRQn              = 50,       
    SPI0_IRQn               = 51,       
    SPI1_IRQn               = 52,       
    I2C0_IRQn               = 53,       
    I2C1_IRQn               = 54,       
    SC0_IRQn                = 55,       
    SC1_IRQn                = 56,       
    GPIO_IRQn               = 57,       
    CAN0_IRQn               = 58,       
    CAN1_IRQn               = 59,       
    PWM_IRQn                = 60,       
}
IRQn_Type;

 








 
#line 116 "..\\..\\..\\Driver\\Include\\sys.h"






 





 
#line 135 "..\\..\\..\\Driver\\Include\\sys.h"

 





 
typedef enum CLKn {

    SYS_UPLL     = 1,    
    SYS_APLL     = 2,    
    SYS_SYSTEM   = 3,    
    SYS_HCLK1    = 4,    
    SYS_HCLK234  = 5,    
    SYS_PCLK     = 6,    
    SYS_CPU      = 7,    

}  CLK_Type;




typedef struct datetime_t {
    UINT32  year;
    UINT32  mon;
    UINT32  day;
    UINT32  hour;
    UINT32  min;
    UINT32  sec;
} DateTime_T;

 





 







 
#line 189 "..\\..\\..\\Driver\\Include\\sys.h"




   




 

 
UINT32  sysGetTicks (INT32 nTimeNo);
INT32   sysResetTicks (INT32 nTimeNo);
INT32   sysUpdateTickCount(INT32 nTimeNo, UINT32 uCount);
INT32   sysSetTimerReferenceClock (INT32 nTimeNo, UINT32 uClockRate);
INT32   sysStartTimer (INT32 nTimeNo, UINT32 uTicksPerSecond, INT32 nOpMode);
INT32   sysStopTimer (INT32 nTimeNo);
void    sysClearWatchDogTimerCount (void);
void    sysClearWatchDogTimerInterruptStatus(void);
void    sysDisableWatchDogTimer (void);
void    sysDisableWatchDogTimerReset(void);
void    sysEnableWatchDogTimer (void);
void    sysEnableWatchDogTimerReset(void);
PVOID   sysInstallWatchDogTimerISR (INT32 nIntTypeLevel, PVOID pvNewISR);
INT32   sysSetWatchDogTimerInterval (INT32 nWdtInterval);
INT32   sysSetTimerEvent(INT32 nTimeNo, UINT32 uTimeTick, PVOID pvFun);
void    sysClearTimerEvent(INT32 nTimeNo, UINT32 uTimeEventNo);
void    sysSetLocalTime(DateTime_T ltime);           
void    sysGetCurrentTime(DateTime_T *curTime);      
void    sysDelay(UINT32 uTicks);

 
INT8    sysGetChar (void);
INT32   sysInitializeUART (void);
void    sysprintf (PINT8 pcStr,...);
void    sysPutChar (UINT8 ucCh);
INT     sysIsKbHit(void);

 
INT32   sysDisableInterrupt (IRQn_Type eIntNo);
INT32   sysEnableInterrupt (IRQn_Type eIntNo);
BOOL    sysGetIBitState(void);               
UINT32  sysGetInterruptEnableStatus(void);   
UINT32  sysGetInterruptEnableStatusH(void);  
PVOID   sysInstallExceptionHandler (INT32 nExceptType, PVOID pvNewHandler);
PVOID   sysInstallFiqHandler (PVOID pvNewISR);
PVOID   sysInstallIrqHandler (PVOID pvNewISR);
PVOID   sysInstallISR (INT32 nIntTypeLevel, IRQn_Type eIntNo, PVOID pvNewISR);
INT32   sysSetGlobalInterrupt (INT32 nIntState);     
INT32   sysSetInterruptPriorityLevel (IRQn_Type eIntNo, UINT32 uIntLevel);
INT32   sysSetInterruptType (IRQn_Type eIntNo, UINT32 uIntSourceType);       
INT32   sysSetLocalInterrupt (INT32 nIntState);


 
void    sysDisableCache(void);
INT32   sysEnableCache(UINT32 uCacheOpMode);
void    sysFlushCache(INT32 nCacheType);     
BOOL    sysGetCacheState(void);              
INT32   sysGetSdramSizebyMB(void);           
void    sysInvalidCache(void);               
INT32   sysSetCachePages(UINT32 addr, INT32 size, INT32 cache_mode);     

int sysSetMMUMappingMethod(int mode);    

UINT32 sysGetClock(CLK_Type clk);

typedef void (*sys_pvFunPtr)();    

extern sys_pvFunPtr sysIrqHandlerTable[];
extern BOOL volatile _sys_bIsAICInitial;





   

   

   



 

#line 14 "..\\..\\..\\Driver\\Source\\2d.c"
#line 1 "..\\..\\..\\Driver\\Include\\2d.h"
 





 











 



 



 


typedef struct {
    UINT32    PatternA;
    UINT32    PatternB;
} MONOPATTERN;







#line 56 "..\\..\\..\\Driver\\Include\\2d.h"




#line 66 "..\\..\\..\\Driver\\Include\\2d.h"































#line 103 "..\\..\\..\\Driver\\Include\\2d.h"























   



 

void ge2dClearScreen(int color);
void ge2dSetWriteMask(int mask);
void ge2dSetSourceOriginStarting(void *ptr);
void ge2dSetDestinationOriginStarting(void *ptr);
void ge2dInit(int bpp, int width, int height, void *destination);
void ge2dReset(void);
void ge2dResetFIFO(void);
void ge2dBitblt_SetDrawMode(int opt, int ckey, int mask);
int ge2dBitblt_SetAlphaMode(int opt, int ks, int kd);
void ge2dBitblt_ScreenToScreen(int srcx, int srcy, int destx, int desty, int width, int height);
void ge2dBitblt_ScreenToScreenRop(int srcx, int srcy, int destx, int desty, int width, int height, int rop);
void ge2dBitblt_SourceToDestination(int srcx, int srcy, int destx, int desty, int width, int height, int srcpitch, int destpitch);
void ge2dClip_SetClip(int x1, int y1, int x2, int y2);
void ge2dClip_SetClipMode(int opt);
void ge2dDrawFrame(int x1, int y1, int x2, int y2, int color, int opt);
void ge2dLine_DrawSolidLine(int x1, int y1, int x2, int y2, int color);
void ge2dLine_DrawStyledLine(int x1, int y1, int x2, int y2, int style, int fgcolor, int bkcolor, int draw_mode);
void ge2dFill_Solid(int dx, int dy, int width, int height, int color);
void ge2dFill_Solid_RGB565(int dx, int dy, int width, int height, int color);
void ge2dFill_SolidBackground(int dx, int dy, int width, int height, int color);
void ge2dFill_ColorPattern(int dx, int dy, int width, int height);
void ge2dFill_MonoPattern(int dx, int dy, int width, int height, int opt);
void ge2dFill_ColorPatternROP(int sx, int sy, int width, int height, int rop);
void ge2dFill_MonoPatternROP(int sx, int sy, int width, int height, int rop, int opt);
void ge2dFill_TileBlt(int srcx, int srcy, int destx, int desty, int width, int height, int x_count, int y_count);
void ge2dHostBlt_Write(int x, int y, int width, int height, void *buf);
void ge2dHostBlt_Read(int x, int y, int width, int height, void *buf);
void ge2dHostBlt_Sprite(int x, int y, int width, int height, void *buf);
void ge2dRotation(int srcx, int srcy, int destx, int desty, int width, int height, int ctl);
void ge2dSpriteBlt_Screen(int destx, int desty, int sprite_width, int sprite_height, void *buf);
void ge2dSpriteBltx_Screen(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf);
void ge2dSpriteBlt_ScreenRop(int x, int y, int sprite_width, int sprite_height, void *buf, int rop);
void ge2dSpriteBltx_ScreenRop(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf, int rop);
void ge2dColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf);
void ge2dHostColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf);
void ge2dInitMonoPattern(int opt, int fore_color, int back_color);
void ge2dInitMonoInputPattern(UINT32 PatternA, UINT32 PatternB, int fore_color, int back_color);
void ge2dInitColorPattern(int patformat, void *patdata);
void ge2dFont_PutChar(int x, int y, char asc_code, int fore_color, int back_color, int draw_mode, int font_id);
void ge2dFont_PutString(int x, int y, char *str, int fore_color, int back_color, int draw_mode, int font_id);

   

   

   








 
#line 15 "..\\..\\..\\Driver\\Source\\2d.c"



 



 



 


static unsigned int GFX_Mem = 0;
static unsigned int GFX_BPP;
static unsigned int GFX_WIDTH;
static unsigned int GFX_HEIGHT;
static unsigned int GFX_PITCH;
static unsigned int GFX_SIZE;

static __align(32) void *GFX_START_ADDR;
static __align(32) void *MONO_SOURCE_ADDR;
static __align(32) void *COLOR_SOURCE_ADDR;
static __align(32) void *CMODEL_START_ADDR;
static __align(32) void *GFX_OFFSCREEN_ADDR;
static __align(32) void *GFX_PAT_ADDR;

void *Orig_GFX_START_ADDR;
void *Orig_MONO_SOURCE_ADDR;
void *Orig_COLOR_SOURCE_ADDR;
void *Orig_CMODEL_START_ADDR;
void *Orig_GFX_OFFSCREEN_ADDR;
void *Orig_GFX_PAT_ADDR;









 

#line 68 "..\\..\\..\\Driver\\Source\\2d.c"

static MONOPATTERN MonoPatternData[6] = {
    {0x00000000, 0xff000000}, 
    {0x08080808, 0x08080808}, 
    {0x80402010, 0x08040201}, 
    {0x01020408, 0x10204080}, 
    {0x08080808, 0xff080808}, 
    {0x81422418, 0x18244281}  
};

static char _DrawMode = 0;
static UINT32 _ColorKey;
static UINT32 _ColorKeyMask;

static BOOL _EnableAlpha = (0);
static int _AlphaKs, _AlphaKd;
static BOOL _ClipEnable = (0);
static BOOL _OutsideClip = (0);
static UINT32 _ClipTL, _ClipBR;
static int _PatternType;

static unsigned	char FontData8[256][8] = {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},  
    {0x7E,0x81,0xA5,0x81,0xBD,0x99,0x81,0x7E},  
    {0x7E,0xFF,0xDB,0xFF,0xC3,0xE7,0xFF,0x7E},  
    {0x6C,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00},  
    {0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00},  
    {0x38,0x7C,0x38,0xFE,0xFE,0x92,0x10,0x7C},  
    {0x00,0x10,0x38,0x7C,0xFE,0x7C,0x38,0x7C},  
    {0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00},  
    {0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF},  
    {0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00},  
    {0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF},  
    {0x0F,0x07,0x0F,0x7D,0xCC,0xCC,0xCC,0x78},  
    {0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18},  
    {0x3F,0x33,0x3F,0x30,0x30,0x70,0xF0,0xE0},  
    {0x7F,0x63,0x7F,0x63,0x63,0x67,0xE6,0xC0},  
    {0x99,0x5A,0x3C,0xE7,0xE7,0x3C,0x5A,0x99},  
    {0x80,0xE0,0xF8,0xFE,0xF8,0xE0,0x80,0x00},  
    {0x02,0x0E,0x3E,0xFE,0x3E,0x0E,0x02,0x00},  
    {0x18,0x3C,0x7E,0x18,0x18,0x7E,0x3C,0x18},  
    {0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x00},  
    {0x7F,0xDB,0xDB,0x7B,0x1B,0x1B,0x1B,0x00},  
    {0x3E,0x63,0x38,0x6C,0x6C,0x38,0x86,0xFC},  
    {0x00,0x00,0x00,0x00,0x7E,0x7E,0x7E,0x00},  
    {0x18,0x3C,0x7E,0x18,0x7E,0x3C,0x18,0xFF},  
    {0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x00},  
    {0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00},  
    {0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00},  
    {0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00},  
    {0x00,0x00,0xC0,0xC0,0xC0,0xFE,0x00,0x00},  
    {0x00,0x24,0x66,0xFF,0x66,0x24,0x00,0x00},  
    {0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x00,0x00},  
    {0x00,0xFF,0xFF,0x7E,0x3C,0x18,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},  
    {0x18,0x3C,0x3C,0x18,0x18,0x00,0x18,0x00},  
    {0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00},  
    {0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00},  
    {0x18,0x7E,0xC0,0x7C,0x06,0xFC,0x18,0x00},  
    {0x00,0xC6,0xCC,0x18,0x30,0x66,0xC6,0x00},  
    {0x38,0x6C,0x38,0x76,0xDC,0xCC,0x76,0x00},  
    {0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00},  
    {0x18,0x30,0x60,0x60,0x60,0x30,0x18,0x00},  
    {0x60,0x30,0x18,0x18,0x18,0x30,0x60,0x00},  
    {0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00},  
    {0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30},  
    {0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00},  
    {0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00},  
    {0x7C,0xCE,0xDE,0xF6,0xE6,0xC6,0x7C,0x00},  
    {0x30,0x70,0x30,0x30,0x30,0x30,0xFC,0x00},  
    {0x78,0xCC,0x0C,0x38,0x60,0xCC,0xFC,0x00},  
    {0x78,0xCC,0x0C,0x38,0x0C,0xCC,0x78,0x00},  
    {0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x1E,0x00},  
    {0xFC,0xC0,0xF8,0x0C,0x0C,0xCC,0x78,0x00},  
    {0x38,0x60,0xC0,0xF8,0xCC,0xCC,0x78,0x00},  
    {0xFC,0xCC,0x0C,0x18,0x30,0x30,0x30,0x00},  
    {0x78,0xCC,0xCC,0x78,0xCC,0xCC,0x78,0x00},  
    {0x78,0xCC,0xCC,0x7C,0x0C,0x18,0x70,0x00},  
    {0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x00},  
    {0x00,0x18,0x18,0x00,0x00,0x18,0x18,0x30},  
    {0x18,0x30,0x60,0xC0,0x60,0x30,0x18,0x00},  
    {0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00},  
    {0x60,0x30,0x18,0x0C,0x18,0x30,0x60,0x00},  
    {0x3C,0x66,0x0C,0x18,0x18,0x00,0x18,0x00},  
    {0x7C,0xC6,0xDE,0xDE,0xDC,0xC0,0x7C,0x00},  
    {0x30,0x78,0xCC,0xCC,0xFC,0xCC,0xCC,0x00},  
    {0xFC,0x66,0x66,0x7C,0x66,0x66,0xFC,0x00},  
    {0x3C,0x66,0xC0,0xC0,0xC0,0x66,0x3C,0x00},  
    {0xF8,0x6C,0x66,0x66,0x66,0x6C,0xF8,0x00},  
    {0xFE,0x62,0x68,0x78,0x68,0x62,0xFE,0x00},  
    {0xFE,0x62,0x68,0x78,0x68,0x60,0xF0,0x00},  
    {0x3C,0x66,0xC0,0xC0,0xCE,0x66,0x3A,0x00},  
    {0xCC,0xCC,0xCC,0xFC,0xCC,0xCC,0xCC,0x00},  
    {0x78,0x30,0x30,0x30,0x30,0x30,0x78,0x00},  
    {0x1E,0x0C,0x0C,0x0C,0xCC,0xCC,0x78,0x00},  
    {0xE6,0x66,0x6C,0x78,0x6C,0x66,0xE6,0x00},  
    {0xF0,0x60,0x60,0x60,0x62,0x66,0xFE,0x00},  
    {0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0x00},  
    {0xC6,0xE6,0xF6,0xDE,0xCE,0xC6,0xC6,0x00},  
    {0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00},  
    {0xFC,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00},  
    {0x7C,0xC6,0xC6,0xC6,0xD6,0x7C,0x0E,0x00},  
    {0xFC,0x66,0x66,0x7C,0x6C,0x66,0xE6,0x00},  
    {0x7C,0xC6,0xE0,0x78,0x0E,0xC6,0x7C,0x00},  
    {0xFC,0xB4,0x30,0x30,0x30,0x30,0x78,0x00},  
    {0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0xFC,0x00},  
    {0xCC,0xCC,0xCC,0xCC,0xCC,0x78,0x30,0x00},  
    {0xC6,0xC6,0xC6,0xC6,0xD6,0xFE,0x6C,0x00},  
    {0xC6,0xC6,0x6C,0x38,0x6C,0xC6,0xC6,0x00},  
    {0xCC,0xCC,0xCC,0x78,0x30,0x30,0x78,0x00},  
    {0xFE,0xC6,0x8C,0x18,0x32,0x66,0xFE,0x00},  
    {0x78,0x60,0x60,0x60,0x60,0x60,0x78,0x00},  
    {0xC0,0x60,0x30,0x18,0x0C,0x06,0x02,0x00},  
    {0x78,0x18,0x18,0x18,0x18,0x18,0x78,0x00},  
    {0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF},  
    {0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00},  
    {0x00,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00},  
    {0xE0,0x60,0x60,0x7C,0x66,0x66,0xDC,0x00},  
    {0x00,0x00,0x78,0xCC,0xC0,0xCC,0x78,0x00},  
    {0x1C,0x0C,0x0C,0x7C,0xCC,0xCC,0x76,0x00},  
    {0x00,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00},  
    {0x38,0x6C,0x64,0xF0,0x60,0x60,0xF0,0x00},  
    {0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0xF8},  
    {0xE0,0x60,0x6C,0x76,0x66,0x66,0xE6,0x00},  
    {0x30,0x00,0x70,0x30,0x30,0x30,0x78,0x00},  
    {0x0C,0x00,0x1C,0x0C,0x0C,0xCC,0xCC,0x78},  
    {0xE0,0x60,0x66,0x6C,0x78,0x6C,0xE6,0x00},  
    {0x70,0x30,0x30,0x30,0x30,0x30,0x78,0x00},  
    {0x00,0x00,0xCC,0xFE,0xFE,0xD6,0xD6,0x00},  
    {0x00,0x00,0xB8,0xCC,0xCC,0xCC,0xCC,0x00},  
    {0x00,0x00,0x78,0xCC,0xCC,0xCC,0x78,0x00},  
    {0x00,0x00,0xDC,0x66,0x66,0x7C,0x60,0xF0},  
    {0x00,0x00,0x76,0xCC,0xCC,0x7C,0x0C,0x1E},  
    {0x00,0x00,0xDC,0x76,0x62,0x60,0xF0,0x00},  
    {0x00,0x00,0x7C,0xC0,0x70,0x1C,0xF8,0x00},  
    {0x10,0x30,0xFC,0x30,0x30,0x34,0x18,0x00},  
    {0x00,0x00,0xCC,0xCC,0xCC,0xCC,0x76,0x00},  
    {0x00,0x00,0xCC,0xCC,0xCC,0x78,0x30,0x00},  
    {0x00,0x00,0xC6,0xC6,0xD6,0xFE,0x6C,0x00},  
    {0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00},  
    {0x00,0x00,0xCC,0xCC,0xCC,0x7C,0x0C,0xF8},  
    {0x00,0x00,0xFC,0x98,0x30,0x64,0xFC,0x00},  
    {0x1C,0x30,0x30,0xE0,0x30,0x30,0x1C,0x00},  
    {0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x00},  
    {0xE0,0x30,0x30,0x1C,0x30,0x30,0xE0,0x00},  
    {0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00},  
    {0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0x00},  
    {0x7C,0xC6,0xC0,0xC6,0x7C,0x0C,0x06,0x7C},  
    {0x00,0xCC,0x00,0xCC,0xCC,0xCC,0x76,0x00},  
    {0x1C,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00},  
    {0x7E,0x81,0x3C,0x06,0x3E,0x66,0x3B,0x00},  
    {0xCC,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00},  
    {0xE0,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00},  
    {0x30,0x30,0x78,0x0C,0x7C,0xCC,0x76,0x00},  
    {0x00,0x00,0x7C,0xC6,0xC0,0x78,0x0C,0x38},  
    {0x7E,0x81,0x3C,0x66,0x7E,0x60,0x3C,0x00},  
    {0xCC,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00},  
    {0xE0,0x00,0x78,0xCC,0xFC,0xC0,0x78,0x00},  
    {0xCC,0x00,0x70,0x30,0x30,0x30,0x78,0x00},  
    {0x7C,0x82,0x38,0x18,0x18,0x18,0x3C,0x00},  
    {0xE0,0x00,0x70,0x30,0x30,0x30,0x78,0x00},  
    {0xC6,0x10,0x7C,0xC6,0xFE,0xC6,0xC6,0x00},  
    {0x30,0x30,0x00,0x78,0xCC,0xFC,0xCC,0x00},  
    {0x1C,0x00,0xFC,0x60,0x78,0x60,0xFC,0x00},  
    {0x00,0x00,0x7F,0x0C,0x7F,0xCC,0x7F,0x00},  
    {0x3E,0x6C,0xCC,0xFE,0xCC,0xCC,0xCE,0x00},  
    {0x78,0x84,0x00,0x78,0xCC,0xCC,0x78,0x00},  
    {0x00,0xCC,0x00,0x78,0xCC,0xCC,0x78,0x00},  
    {0x00,0xE0,0x00,0x78,0xCC,0xCC,0x78,0x00},  
    {0x78,0x84,0x00,0xCC,0xCC,0xCC,0x76,0x00},  
    {0x00,0xE0,0x00,0xCC,0xCC,0xCC,0x76,0x00},  
    {0x00,0xCC,0x00,0xCC,0xCC,0x7C,0x0C,0xF8},  
    {0xC3,0x18,0x3C,0x66,0x66,0x3C,0x18,0x00},  
    {0xCC,0x00,0xCC,0xCC,0xCC,0xCC,0x78,0x00},  
    {0x18,0x18,0x7E,0xC0,0xC0,0x7E,0x18,0x18},  
    {0x38,0x6C,0x64,0xF0,0x60,0xE6,0xFC,0x00},  
    {0xCC,0xCC,0x78,0x30,0xFC,0x30,0xFC,0x30},  
    {0xF8,0xCC,0xCC,0xFA,0xC6,0xCF,0xC6,0xC3},  
    {0x0E,0x1B,0x18,0x3C,0x18,0x18,0xD8,0x70},  
    {0x1C,0x00,0x78,0x0C,0x7C,0xCC,0x76,0x00},  
    {0x38,0x00,0x70,0x30,0x30,0x30,0x78,0x00},  
    {0x00,0x1C,0x00,0x78,0xCC,0xCC,0x78,0x00},  
    {0x00,0x1C,0x00,0xCC,0xCC,0xCC,0x76,0x00},  
    {0x00,0xF8,0x00,0xB8,0xCC,0xCC,0xCC,0x00},  
    {0xFC,0x00,0xCC,0xEC,0xFC,0xDC,0xCC,0x00},  
    {0x3C,0x6C,0x6C,0x3E,0x00,0x7E,0x00,0x00},  
    {0x38,0x6C,0x6C,0x38,0x00,0x7C,0x00,0x00},  
    {0x18,0x00,0x18,0x18,0x30,0x66,0x3C,0x00},  
    {0x00,0x00,0x00,0xFC,0xC0,0xC0,0x00,0x00},  
    {0x00,0x00,0x00,0xFC,0x0C,0x0C,0x00,0x00},  
    {0xC6,0xCC,0xD8,0x36,0x6B,0xC2,0x84,0x0F},  
    {0xC3,0xC6,0xCC,0xDB,0x37,0x6D,0xCF,0x03},  
    {0x18,0x00,0x18,0x18,0x3C,0x3C,0x18,0x00},  
    {0x00,0x33,0x66,0xCC,0x66,0x33,0x00,0x00},  
    {0x00,0xCC,0x66,0x33,0x66,0xCC,0x00,0x00},  
    {0x22,0x88,0x22,0x88,0x22,0x88,0x22,0x88},  
    {0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA},  
    {0xDB,0xF6,0xDB,0x6F,0xDB,0x7E,0xD7,0xED},  
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18},  
    {0x18,0x18,0x18,0x18,0xF8,0x18,0x18,0x18},  
    {0x18,0x18,0xF8,0x18,0xF8,0x18,0x18,0x18},  
    {0x36,0x36,0x36,0x36,0xF6,0x36,0x36,0x36},  
    {0x00,0x00,0x00,0x00,0xFE,0x36,0x36,0x36},  
    {0x00,0x00,0xF8,0x18,0xF8,0x18,0x18,0x18},  
    {0x36,0x36,0xF6,0x06,0xF6,0x36,0x36,0x36},  
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36},  
    {0x00,0x00,0xFE,0x06,0xF6,0x36,0x36,0x36},  
    {0x36,0x36,0xF6,0x06,0xFE,0x00,0x00,0x00},  
    {0x36,0x36,0x36,0x36,0xFE,0x00,0x00,0x00},  
    {0x18,0x18,0xF8,0x18,0xF8,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0xF8,0x18,0x18,0x18},  
    {0x18,0x18,0x18,0x18,0x1F,0x00,0x00,0x00},  
    {0x18,0x18,0x18,0x18,0xFF,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0xFF,0x18,0x18,0x18},  
    {0x18,0x18,0x18,0x18,0x1F,0x18,0x18,0x18},  
    {0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00},  
    {0x18,0x18,0x18,0x18,0xFF,0x18,0x18,0x18},  
    {0x18,0x18,0x1F,0x18,0x1F,0x18,0x18,0x18},  
    {0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36},  
    {0x36,0x36,0x37,0x30,0x3F,0x00,0x00,0x00},  
    {0x00,0x00,0x3F,0x30,0x37,0x36,0x36,0x36},  
    {0x36,0x36,0xF7,0x00,0xFF,0x00,0x00,0x00},  
    {0x00,0x00,0xFF,0x00,0xF7,0x36,0x36,0x36},  
    {0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36},  
    {0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00},  
    {0x36,0x36,0xF7,0x00,0xF7,0x36,0x36,0x36},  
    {0x18,0x18,0xFF,0x00,0xFF,0x00,0x00,0x00},  
    {0x36,0x36,0x36,0x36,0xFF,0x00,0x00,0x00},  
    {0x00,0x00,0xFF,0x00,0xFF,0x18,0x18,0x18},  
    {0x00,0x00,0x00,0x00,0xFF,0x36,0x36,0x36},  
    {0x36,0x36,0x36,0x36,0x3F,0x00,0x00,0x00},  
    {0x18,0x18,0x1F,0x18,0x1F,0x00,0x00,0x00},  
    {0x00,0x00,0x1F,0x18,0x1F,0x18,0x18,0x18},  
    {0x00,0x00,0x00,0x00,0x3F,0x36,0x36,0x36},  
    {0x36,0x36,0x36,0x36,0xFF,0x36,0x36,0x36},  
    {0x18,0x18,0xFF,0x18,0xFF,0x18,0x18,0x18},  
    {0x18,0x18,0x18,0x18,0xF8,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x1F,0x18,0x18,0x18},  
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF},  
    {0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF},  
    {0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0},  
    {0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F},  
    {0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00},  
    {0x00,0x00,0x76,0xDC,0xC8,0xDC,0x76,0x00},  
    {0x00,0x78,0xCC,0xF8,0xCC,0xF8,0xC0,0xC0},  
    {0x00,0xFC,0xCC,0xC0,0xC0,0xC0,0xC0,0x00},  
    {0x00,0x00,0xFE,0x6C,0x6C,0x6C,0x6C,0x00},  
    {0xFC,0xCC,0x60,0x30,0x60,0xCC,0xFC,0x00},  
    {0x00,0x00,0x7E,0xD8,0xD8,0xD8,0x70,0x00},  
    {0x00,0x66,0x66,0x66,0x66,0x7C,0x60,0xC0},  
    {0x00,0x76,0xDC,0x18,0x18,0x18,0x18,0x00},  
    {0xFC,0x30,0x78,0xCC,0xCC,0x78,0x30,0xFC},  
    {0x38,0x6C,0xC6,0xFE,0xC6,0x6C,0x38,0x00},  
    {0x38,0x6C,0xC6,0xC6,0x6C,0x6C,0xEE,0x00},  
    {0x1C,0x30,0x18,0x7C,0xCC,0xCC,0x78,0x00},  
    {0x00,0x00,0x7E,0xDB,0xDB,0x7E,0x00,0x00},  
    {0x06,0x0C,0x7E,0xDB,0xDB,0x7E,0x60,0xC0},  
    {0x38,0x60,0xC0,0xF8,0xC0,0x60,0x38,0x00},  
    {0x78,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x00},  
    {0x00,0x7E,0x00,0x7E,0x00,0x7E,0x00,0x00},  
    {0x18,0x18,0x7E,0x18,0x18,0x00,0x7E,0x00},  
    {0x60,0x30,0x18,0x30,0x60,0x00,0xFC,0x00},  
    {0x18,0x30,0x60,0x30,0x18,0x00,0xFC,0x00},  
    {0x0E,0x1B,0x1B,0x18,0x18,0x18,0x18,0x18},  
    {0x18,0x18,0x18,0x18,0x18,0xD8,0xD8,0x70},  
    {0x18,0x18,0x00,0x7E,0x00,0x18,0x18,0x00},  
    {0x00,0x76,0xDC,0x00,0x76,0xDC,0x00,0x00},  
    {0x38,0x6C,0x6C,0x38,0x00,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00},  
    {0x0F,0x0C,0x0C,0x0C,0xEC,0x6C,0x3C,0x1C},  
    {0x58,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00},  
    {0x70,0x98,0x30,0x60,0xF8,0x00,0x00,0x00},  
    {0x00,0x00,0x3C,0x3C,0x3C,0x3C,0x00,0x00},  
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}   
};

static unsigned	char FontData16[256][16] = {
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7E,0x81,0xA5,0x81,0x81,0xBD,0x99,0x81,0x81,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7E,0xFF,0xDB,0xFF,0xFF,0xC3,0xE7,0xFF,0xFF,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x6C,0xFE,0xFE,0xFE,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x18,0x3C,0x3C,0xE7,0xE7,0xE7,0x99,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x18,0x3C,0x7E,0xFF,0xFF,0x7E,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xE7,0xC3,0xC3,0xE7,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}, 
    {0x00,0x00,0x00,0x00,0x00,0x3C,0x66,0x42,0x42,0x66,0x3C,0x00,0x00,0x00,0x00,0x00}, 
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xC3,0x99,0xBD,0xBD,0x99,0xC3,0xFF,0xFF,0xFF,0xFF,0xFF}, 
    {0x00,0x00,0x1E,0x0E,0x1A,0x32,0x78,0xCC,0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x66,0x66,0x66,0x66,0x3C,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3F,0x33,0x3F,0x30,0x30,0x30,0x30,0x70,0xF0,0xE0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7F,0x63,0x7F,0x63,0x63,0x63,0x63,0x67,0xE7,0xE6,0xC0,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x18,0x18,0xDB,0x3C,0xE7,0x3C,0xDB,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x80,0xC0,0xE0,0xF0,0xF8,0xFE,0xF8,0xF0,0xE0,0xC0,0x80,0x00,0x00,0x00,0x00}, 
    {0x00,0x02,0x06,0x0E,0x1E,0x3E,0xFE,0x3E,0x1E,0x0E,0x06,0x02,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7F,0xDB,0xDB,0xDB,0x7B,0x1B,0x1B,0x1B,0x1B,0x1B,0x00,0x00,0x00,0x00}, 
    {0x00,0x7C,0xC6,0x60,0x38,0x6C,0xC6,0xC6,0x6C,0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xFE,0xFE,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x7E,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x3C,0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x3C,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x18,0x0C,0xFE,0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x30,0x60,0xFE,0x60,0x30,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xC0,0xC0,0xC0,0xC0,0xFE,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x28,0x6C,0xFE,0x6C,0x28,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7C,0x7C,0xFE,0xFE,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0xFE,0xFE,0x7C,0x7C,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x3C,0x3C,0x3C,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x66,0x66,0x66,0x24,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x6C,0x6C,0xFE,0x6C,0x6C,0x6C,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00}, 
    {0x18,0x18,0x7C,0xC6,0xC2,0xC0,0x7C,0x06,0x86,0xC6,0x7C,0x18,0x18,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0xC2,0xC6,0x0C,0x18,0x30,0x60,0xC6,0x86,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x6C,0x6C,0x38,0x76,0xDC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x0C,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x30,0x18,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x18,0x30,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x66,0x3C,0xFF,0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x02,0x06,0x0C,0x18,0x30,0x60,0xC0,0x80,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0xCE,0xD6,0xD6,0xE6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x38,0x78,0x18,0x18,0x18,0x18,0x18,0x18,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0x06,0x0C,0x18,0x30,0x60,0xC0,0xC6,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0x06,0x06,0x3C,0x06,0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x0C,0x1C,0x3C,0x6C,0xCC,0xFE,0x0C,0x0C,0x0C,0x1E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xFC,0x0E,0x06,0x06,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x60,0xC0,0xC0,0xFC,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFE,0xC6,0x06,0x06,0x0C,0x18,0x30,0x30,0x30,0x30,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7C,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0xC6,0x7E,0x06,0x06,0x06,0x0C,0x78,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x06,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x06,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x60,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x60,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0x0C,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x7C,0xC6,0xC6,0xDE,0xDE,0xDE,0xDC,0xC0,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x66,0x66,0x66,0x66,0xFC,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,0xC0,0xC2,0x66,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xF8,0x6C,0x66,0x66,0x66,0x66,0x66,0x66,0x6C,0xF8,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFE,0x66,0x62,0x68,0x78,0x68,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xDE,0xC6,0xC6,0x66,0x3A,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x1E,0x0C,0x0C,0x0C,0x0C,0x0C,0xCC,0xCC,0xCC,0x78,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xE6,0x66,0x6C,0x6C,0x78,0x78,0x6C,0x66,0x66,0xE6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xF0,0x60,0x60,0x60,0x60,0x60,0x60,0x62,0x66,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xEE,0xFE,0xFE,0xD6,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x60,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6,0xDE,0x7C,0x0C,0x0E,0x00,0x00}, 
    {0x00,0x00,0xFC,0x66,0x66,0x66,0x7C,0x6C,0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7C,0xC6,0xC6,0x60,0x38,0x0C,0x06,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x7E,0x7E,0x5A,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x10,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xD6,0xD6,0xFE,0x6C,0x6C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0x6C,0x6C,0x38,0x38,0x6C,0x6C,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x66,0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xFE,0xC6,0x86,0x0C,0x18,0x30,0x60,0xC2,0xC6,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x80,0xC0,0xE0,0x70,0x38,0x1C,0x0E,0x06,0x02,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x0C,0x3C,0x00,0x00,0x00,0x00}, 
    {0x10,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00}, 
    {0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xE0,0x60,0x60,0x78,0x6C,0x66,0x66,0x66,0x66,0xDC,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC0,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x1C,0x0C,0x0C,0x3C,0x6C,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x6C,0x64,0x60,0xF0,0x60,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0xCC,0x78,0x00}, 
    {0x00,0x00,0xE0,0x60,0x60,0x6C,0x76,0x66,0x66,0x66,0x66,0xE6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x06,0x06,0x00,0x0E,0x06,0x06,0x06,0x06,0x06,0x06,0x66,0x66,0x3C,0x00}, 
    {0x00,0x00,0xE0,0x60,0x60,0x66,0x6C,0x78,0x78,0x6C,0x66,0xE6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xEC,0xFE,0xD6,0xD6,0xD6,0xD6,0xD6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0xF0,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x76,0xCC,0xCC,0xCC,0xCC,0xCC,0x7C,0x0C,0x0C,0x1E,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xDC,0x76,0x62,0x60,0x60,0x60,0xF0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7C,0xC6,0x60,0x38,0x0C,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x10,0x30,0x30,0xFC,0x30,0x30,0x30,0x30,0x36,0x1C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xD6,0xD6,0xFE,0x6C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xC6,0x6C,0x38,0x38,0x38,0x6C,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0xF8,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xFE,0xCC,0x18,0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x0E,0x18,0x18,0x18,0x70,0x18,0x18,0x18,0x18,0x0E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x70,0x18,0x18,0x18,0x0E,0x18,0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x10,0x38,0x6C,0xC6,0xC6,0xC6,0xFE,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3C,0x66,0xC2,0xC0,0xC0,0xC0,0xC2,0x66,0x3C,0x0C,0x06,0x7C,0x00,0x00}, 
    {0x00,0x00,0xCC,0xCC,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x0C,0x18,0x30,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x10,0x38,0x6C,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xCC,0xCC,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x60,0x30,0x18,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x38,0x6C,0x38,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x3C,0x66,0x60,0x60,0x66,0x3C,0x0C,0x06,0x3C,0x00,0x00,0x00}, 
    {0x00,0x10,0x38,0x6C,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x60,0x30,0x18,0x00,0x7C,0xC6,0xFE,0xC0,0xC0,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x66,0x66,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x18,0x3C,0x66,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x60,0x30,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0xC6,0xC6,0x10,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x38,0x6C,0x38,0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x18,0x30,0x60,0x00,0xFE,0x66,0x60,0x7C,0x60,0x60,0x66,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xCC,0x76,0x36,0x7E,0xD8,0xD8,0x6E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x3E,0x6C,0xCC,0xCC,0xFE,0xCC,0xCC,0xCC,0xCC,0xCE,0x00,0x00,0x00,0x00}, 
    {0x00,0x10,0x38,0x6C,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x60,0x30,0x18,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x30,0x78,0xCC,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x60,0x30,0x18,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0xC6,0xC6,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7E,0x06,0x0C,0x78,0x00}, 
    {0x00,0xC6,0xC6,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00}, 
    {0x00,0xC6,0xC6,0x00,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x18,0x18,0x3C,0x66,0x60,0x60,0x60,0x66,0x3C,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x38,0x6C,0x64,0x60,0xF0,0x60,0x60,0x60,0x60,0xE6,0xFC,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x66,0x66,0x3C,0x18,0x7E,0x18,0x7E,0x18,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0xF8,0xCC,0xCC,0xF8,0xC4,0xCC,0xDE,0xCC,0xCC,0xCC,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x0E,0x1B,0x18,0x18,0x18,0x7E,0x18,0x18,0x18,0x18,0x18,0xD8,0x70,0x00,0x00}, 
    {0x00,0x18,0x30,0x60,0x00,0x78,0x0C,0x7C,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x0C,0x18,0x30,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x18,0x30,0x60,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x18,0x30,0x60,0x00,0xCC,0xCC,0xCC,0xCC,0xCC,0xCC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x76,0xDC,0x00,0xDC,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00}, 
    {0x76,0xDC,0x00,0xC6,0xE6,0xF6,0xFE,0xDE,0xCE,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x3C,0x6C,0x6C,0x3E,0x00,0x7E,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x38,0x6C,0x6C,0x38,0x00,0x7C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x60,0xC0,0xC6,0xC6,0x7C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0xC0,0xC0,0xC2,0xC6,0xCC,0x18,0x30,0x60,0xCE,0x93,0x06,0x0C,0x1F,0x00,0x00}, 
    {0x00,0xC0,0xC0,0xC2,0xC6,0xCC,0x18,0x30,0x66,0xCE,0x9A,0x3F,0x06,0x0F,0x00,0x00}, 
    {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x18,0x3C,0x3C,0x3C,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x33,0x66,0xCC,0x66,0x33,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xCC,0x66,0x33,0x66,0xCC,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44}, 
    {0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA}, 
    {0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77,0xDD,0x77}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0xF6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0xF6,0x06,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x18,0x18,0x18,0x18,0x18,0xF8,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x3F,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xF7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x36,0x36,0x36,0x36,0x36,0xF7,0x00,0xF7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x18,0x18,0x18,0x18,0x18,0xFF,0x00,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xFF,0x00,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x18,0x18,0x18,0x18,0x18,0x1F,0x18,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3F,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xFF,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36}, 
    {0x18,0x18,0x18,0x18,0x18,0xFF,0x18,0xFF,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1F,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}, 
    {0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0}, 
    {0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F}, 
    {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0xD8,0xD8,0xD8,0xDC,0x76,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0xFC,0xC6,0xFC,0xC6,0xC6,0xFC,0xC0,0xC0,0xC0,0x00,0x00}, 
    {0x00,0x00,0xFE,0xC6,0xC6,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x80,0xFE,0x6C,0x6C,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0xFE,0xC6,0x60,0x30,0x18,0x30,0x60,0xC6,0xFE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7E,0xD8,0xD8,0xD8,0xD8,0xD8,0x70,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7C,0x60,0x60,0xC0,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x76,0xDC,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x7E,0x18,0x3C,0x66,0x66,0x66,0x3C,0x18,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x38,0x6C,0xC6,0xC6,0xFE,0xC6,0xC6,0x6C,0x38,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x6C,0x6C,0x6C,0xEE,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x1E,0x30,0x18,0x0C,0x3E,0x66,0x66,0x66,0x66,0x3C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x7E,0xDB,0xDB,0xDB,0x7E,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x03,0x06,0x7E,0xCF,0xDB,0xF3,0x7E,0x60,0xC0,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x1C,0x30,0x60,0x60,0x7C,0x60,0x60,0x60,0x30,0x1C,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x7C,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0xC6,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0xFE,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00,0xFF,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00,0x7E,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x0E,0x1B,0x1B,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18}, 
    {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xD8,0xD8,0xD8,0x70,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7E,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x76,0xDC,0x00,0x76,0xDC,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x38,0x6C,0x6C,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x0F,0x0C,0x0C,0x0C,0x0C,0x0C,0xEC,0x6C,0x6C,0x3C,0x1C,0x00,0x00,0x00,0x00}, 
    {0x00,0xD8,0x6C,0x6C,0x6C,0x6C,0x6C,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x70,0x98,0x30,0x60,0xC8,0xF8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x7C,0x00,0x00,0x00,0x00,0x00}, 
    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}  
};


   



 



 
static unsigned int shift_pointer(int ptr, int align)
{
    unsigned int pos;
    int remain;
    pos = ptr;

    if( (ptr%align)!=0) {
        remain = ptr % align;
        ptr = ptr + (align - remain);
        return ptr;
    } else
        return pos;
}

static unsigned long make_color(int color)
{
    UINT32 r, g, b;

    if (GFX_BPP==8) {
        r = (color & 0x00e00000) >> 16; 
        g = (color & 0x0000e000) >> 11; 
        b = (color & 0x000000c0) >> 6;  
        return (r | g | b);
    } else if (GFX_BPP==16) {
        r = (color & 0x00f80000) >> 8; 
        g = (color & 0x0000fc00) >> 5; 
        b = (color & 0x000000f8) >> 3; 
        return (r | g | b);
    } else return (UINT32)color;
}






 
void ge2dClearScreen(int color)
{
    UINT32 cmd32;
    UINT32 color32, dest_pitch, dest_dimension;

    color32 = make_color(color);

    cmd32 = 0xcc430040;
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x24))) = color32; 

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    *((volatile unsigned int *)((0xB000B000+0x40))) = 0; 

    dest_dimension = GFX_HEIGHT << 16 | GFX_WIDTH;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}





 
void ge2dSetWriteMask(int mask)
{
    *((volatile unsigned int *)((0xB000B000+0x58))) = make_color(mask);
}





 
void ge2dSetSourceOriginStarting(void *ptr)
{
    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)ptr;
}





 
void ge2dSetDestinationOriginStarting(void *ptr)
{
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)ptr;
}








 
void ge2dInit(int bpp, int width, int height, void *destination)
{
    UINT32 data32;

    GFX_BPP = bpp;
    GFX_WIDTH = width;
    GFX_HEIGHT = height;
    GFX_PITCH = (GFX_WIDTH*(GFX_BPP/8));
    GFX_SIZE = (GFX_HEIGHT*GFX_PITCH);

    if(destination == 0)
        return;

    Orig_GFX_START_ADDR = GFX_START_ADDR = (void *)destination;
    if(GFX_Mem == 0)
    {
         
        Orig_GFX_PAT_ADDR = GFX_PAT_ADDR = (void *)malloc((8*8*(GFX_BPP/8))*2);
        GFX_PAT_ADDR = (void *)shift_pointer((int)GFX_PAT_ADDR, (8*8*(GFX_BPP/8))*2);  


        Orig_MONO_SOURCE_ADDR = MONO_SOURCE_ADDR = (void *)malloc(GFX_SIZE+32);
        MONO_SOURCE_ADDR = (void *)shift_pointer((int)MONO_SOURCE_ADDR, 32);
        Orig_COLOR_SOURCE_ADDR = COLOR_SOURCE_ADDR = (void *)malloc(GFX_SIZE+32);
        COLOR_SOURCE_ADDR = (void *)shift_pointer((int)COLOR_SOURCE_ADDR, 32);
        Orig_CMODEL_START_ADDR = CMODEL_START_ADDR = (void *)malloc(GFX_SIZE+32);
        CMODEL_START_ADDR = (void *)shift_pointer((int)CMODEL_START_ADDR, 32);
        Orig_GFX_OFFSCREEN_ADDR = GFX_OFFSCREEN_ADDR = (void *)malloc(GFX_SIZE+32);
        GFX_OFFSCREEN_ADDR = (void *)shift_pointer((int)GFX_OFFSCREEN_ADDR, 32);
        GFX_Mem = 1;
    }
#line 754 "..\\..\\..\\Driver\\Source\\2d.c"

    *((volatile unsigned int *)((0xB0000200+0x10))) = (*((volatile unsigned int *)((0xB0000200+0x10)))) | (1<<28);

    *((volatile unsigned int *)((0xB000B000+0x10))) = 0; 
    *((volatile unsigned int *)((0xB000B000+0x14))) = (unsigned int)GFX_PAT_ADDR;
    *((volatile unsigned int *)((0xB000B000+0x20))) = 0; 
    *((volatile unsigned int *)((0xB000B000+0x34))) = (unsigned int)GFX_START_ADDR;
    *((volatile unsigned int *)((0xB000B000+0x04))) = (unsigned int)GFX_START_ADDR;

    *((volatile unsigned int *)((0xB000B000+0x58))) = 0x00ffffff; 

    data32 = 0x00000000; 

    if (GFX_BPP==16) {
        data32 |= 0x00000010;
    } else if (GFX_BPP==32) {
        data32 |= 0x00000020;
    }

    *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
}





 
void ge2dReset(void)
{
    *((volatile unsigned int *)((0xB000B000+0x5C))) = 0x40; 
    *((volatile unsigned int *)((0xB000B000+0x5C))) = 0x00;

    *((volatile unsigned int *)((0xB000B000+0x5C))) = 0x80; 
    *((volatile unsigned int *)((0xB000B000+0x5C))) = 0x00;

}





 
void ge2dResetFIFO(void)
{
    UINT32 temp32;

    temp32 = (*((volatile unsigned int *)((0xB000B000+0x5C))));
    temp32 |= 0x00000040;
    *((volatile unsigned int *)((0xB000B000+0x5C))) = temp32;
    temp32 &= 0xffffffbf;
    *((volatile unsigned int *)((0xB000B000+0x5C))) = temp32;
}







 
void ge2dBitblt_SetDrawMode(int opt, int ckey, int mask)
{
    if (opt==1) {
        _DrawMode = 1;

        _ColorKey = make_color(ckey);
        _ColorKeyMask = make_color(mask);

        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else if (opt==2) {
        _DrawMode = 2;

        _ColorKey = make_color(ckey);
        _ColorKeyMask = make_color(mask);

        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else {
        _DrawMode = 0; 
    }
}







 
int ge2dBitblt_SetAlphaMode(int opt, int ks, int kd)
{
    if (ks + kd > 255)
        return -1;

    if (opt==1) {
        _EnableAlpha = (1);
        _AlphaKs = ks;
        _AlphaKd = kd;
    } else {
        _EnableAlpha = (0);
    }

    return 0;
}










 
void ge2dBitblt_ScreenToScreen(int srcx, int srcy, int destx, int desty, int width, int height)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;







    cmd32 = 0xcc430000;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    if (srcx > destx) { 
        if (srcy > desty) { 
        } else { 
            cmd32 |= 0x08;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    } else { 
        if (srcy > desty) { 
            cmd32 |= 0x04; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
        } else { 
            cmd32 |= 0xc; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    }






    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | GFX_WIDTH;
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = srcy << 16 | srcx;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    
    
    
    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)GFX_START_ADDR;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;  

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    if (_DrawMode==1) {
        cmd32 |= 0x00008000; 
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else if (_DrawMode==2) {
        cmd32 |= 0x00009000;   
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    }

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}











 
void ge2dBitblt_ScreenToScreenRop(int srcx, int srcy, int destx, int desty, int width, int height, int rop)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;

#line 993 "..\\..\\..\\Driver\\Source\\2d.c"

    cmd32 = 0x00430000 | (rop << 24);

    if (_PatternType==0) {
        cmd32 |= 0x00000010; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    if (srcx > destx) { 
        if (srcy > desty) { 
        } else { 
            cmd32 |= 0x08;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    } else { 
        if (srcy > desty) { 
            cmd32 |= 0x04; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
        } else { 
            cmd32 |= 0xc; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    }






    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | GFX_WIDTH; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = srcy << 16 | srcx;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    
    
    
    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)GFX_START_ADDR;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;  

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    if (_DrawMode==1) {
        cmd32 |= 0x00008000; 
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else if (_DrawMode==2) {
        cmd32 |= 0x00009000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    }

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    if ((rop==0x00) || (rop==0xff)) {
        cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}













 
void ge2dBitblt_SourceToDestination(int srcx, int srcy, int destx, int desty, int width, int height, int srcpitch, int destpitch)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;







    cmd32 = 0xcc430000;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    if (srcx > destx) { 
        if (srcy > desty) { 
        } else { 
            cmd32 |= 0x08;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    } else { 
        if (srcy > desty) { 
            cmd32 |= 0x04; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
        } else { 
            cmd32 |= 0xc; 
            srcx = srcx + width - 1;
            destx = destx + width - 1;
            srcy = srcy + height - 1;
            desty = desty + height - 1;
        }
    }






    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = destpitch << 16 | srcpitch; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = srcy << 16 | srcx;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;


    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    if (_DrawMode==1) {
        cmd32 |= 0x00008000; 
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else if (_DrawMode==2) {
        cmd32 |= 0x00009000;   
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    }

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}








 
void ge2dClip_SetClip(int x1, int y1, int x2, int y2)
{





    if ((x1>=0) && (y1>=0) && (x2>=0) && (y2>=0)) {
        if ((x2 > x1) && (y2 > y1)) {
            _ClipEnable = (1);
             
            x2++;
            y2++;
            _ClipTL = (UINT32)((y1 << 16) | x1);
            _ClipBR = (UINT32)((y2 << 16) | x2);
        } else {
            _ClipEnable = (0);
        }
    } else {
        _ClipEnable = (0);
    }
}







 
void ge2dClip_SetClipMode(int opt)
{
    _OutsideClip = (opt==0) ? (0) : (1);

    if (_OutsideClip) {



    } else {



    }
}












 
void ge2dDrawFrame(int x1, int y1, int x2, int y2, int color, int opt)
{
    UINT32 dest_pitch, dest_start, dest_dimension;
    UINT32 color32;







    

 

    if (opt==0) {
        *((volatile unsigned int *)((0xB000B000+0x20))) = 0xcccb0000; 
    } else {
        *((volatile unsigned int *)((0xB000B000+0x20))) = 0xcccf0000; 
    }





    color32 = make_color(color);
    *((volatile unsigned int *)((0xB000B000+0x28))) = color32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = y1 << 16 | x1;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = (y2-y1) << 16 | (x2-x1);
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x5C))) = (*((volatile unsigned int *)((0xB000B000+0x5C)))); 

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dLine_DrawSolidLine(int x1, int y1, int x2, int y2, int color)
{
    int abs_X, abs_Y, min, max;
    UINT32 step_constant, initial_error, direction_code;
    UINT32 cmd32, dest_pitch, dest_start;







    abs_X = (((x2-x1)>0)?(x2-x1):-(x2-x1));   
    abs_Y = (((y2-y1)>0)?(y2-y1):-(y2-y1));   
    if (abs_X > abs_Y) {  
        max = abs_X;
        min = abs_Y;

        step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
        initial_error = (((UINT32)(2*(min)-max)) << 16) | (UINT32)(max);

        if (x2 > x1) { 
            if (y2 > y1) 
                direction_code = (0<<1);
            else 
                direction_code = (2<<1);
        } else { 
            if (y2 > y1) 
                direction_code = (4<<1);
            else 
                direction_code = (6<<1);
        }
    } else { 
        max = abs_Y;
        min = abs_X;

        step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
        initial_error = (((UINT32)(2*(min)-max)) << 16) | (UINT32)(max);

        if (x2 > x1) { 
            if (y2 > y1) 
                direction_code = (1<<1);
            else 
                direction_code = (3<<1);
        } else { 
            if (y2 > y1) 
                direction_code = (5<<1);
            else 
                direction_code = (7<<1);
        }
    }

    *((volatile unsigned int *)((0xB000B000+0x18))) = step_constant;
    *((volatile unsigned int *)((0xB000B000+0x1C))) = initial_error;

    cmd32 = 0x008b0000 | direction_code;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x24))) = make_color(color);
    *((volatile unsigned int *)((0xB000B000+0x28))) = make_color(color);

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;

    dest_start = y1 << 16 | x1;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}












 
void ge2dLine_DrawStyledLine(int x1, int y1, int x2, int y2, int style, int fgcolor, int bkcolor, int draw_mode)
{
    int abs_X, abs_Y, min, max;
    UINT32 step_constant, initial_error, direction_code;
    UINT32 cmd32, dest_pitch, dest_start;
    UINT32 temp32, line_control_code;

    abs_X = (((x2-x1)>0)?(x2-x1):-(x2-x1));
    abs_Y = (((y2-y1)>0)?(y2-y1):-(y2-y1));
    if (abs_X > abs_Y) { 
        max = abs_X;
        min = abs_Y;

        step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
        initial_error = (((UINT32)(2*min-max)) << 16) | (UINT32)(max);

        if (x2 > x1) { 
            if (y2 > y1) 
                direction_code = (0<<1);
            else 
                direction_code = (2<<1);
        } else { 
            if (y2 > y1) 
                direction_code = (4<<1);
            else 
                direction_code = (6<<1);
        }
    } else { 
        max = abs_Y;
        min = abs_X;

        step_constant = (((UINT32)(2*(min-max))) << 16) | (UINT32)(2*min);
        initial_error = (((UINT32)(2*min-max)) << 16) | (UINT32)(max);

        if (x2 > x1) { 
            if (y2 > y1) 
                direction_code = (1<<1);
            else 
                direction_code = (3<<1);
        } else { 
            if (y2 > y1) 
                direction_code = (5<<1);
            else 
                direction_code = (7<<1);
        }
    }

    *((volatile unsigned int *)((0xB000B000+0x18))) = step_constant;
    *((volatile unsigned int *)((0xB000B000+0x1C))) = initial_error;

    cmd32 = 0x009b0000 | direction_code; 
    if (draw_mode==1) {
        cmd32 |= 0x00008000; 
    }
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x24))) = make_color(bkcolor);
    *((volatile unsigned int *)((0xB000B000+0x28))) = make_color(fgcolor);

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;

    dest_start = y1 << 16 | x1;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    line_control_code = style;
    temp32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
    temp32 = (line_control_code << 16) | temp32;

    *((volatile unsigned int *)((0xB000B000+0x5C))) = temp32; 

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_Solid(int dx, int dy, int width, int height, int color)
{
    UINT32 cmd32, color32;
    UINT32 dest_start, dest_pitch, dest_dimension;







    color32 = make_color(color);
    cmd32 = 0xcc430060;
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x28))) = color32; 

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = dy << 16 | dx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_Solid_RGB565(int dx, int dy, int width, int height, int color)
{
    UINT32 cmd32;
    UINT32 dest_start, dest_pitch, dest_dimension;







    cmd32 = 0xcc430060;
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x28))) = color; 

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = dy << 16 | dx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_SolidBackground(int dx, int dy, int width, int height, int color)
{
    UINT32 cmd32, color32;
    UINT32 dest_start, dest_pitch, dest_dimension;







    color32 = make_color(color);

    cmd32 = 0xcc430040;
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x24))) = color32; 

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = dy << 16 | dx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_ColorPattern(int dx, int dy, int width, int height)
{
    UINT32 cmd32;
    UINT32 dest_start, dest_pitch, dest_dimension;







    cmd32 = 0xf0430000;
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = dy << 16 | dx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_MonoPattern(int dx, int dy, int width, int height, int opt)
{
    UINT32 cmd32;
    UINT32 dest_start, dest_pitch, dest_dimension;






    cmd32 = 0xf0430010;
    if (opt==1) {
        cmd32 |= 0x00006000;
    }
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = dy << 16 | dx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dFill_ColorPatternROP(int sx, int sy, int width, int height, int rop)
{
    UINT32 cmd32;
    UINT32 dest_start, dest_pitch, dest_dimension;







    cmd32 = 0x00430000 | (rop<<24);
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = sy << 16 | sx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}










 
void ge2dFill_MonoPatternROP(int sx, int sy, int width, int height, int rop, int opt)
{
    UINT32 cmd32;
    UINT32 dest_start, dest_pitch, dest_dimension;






    cmd32 = 0x00430010 | (rop<<24);
    if (opt==1) {
        cmd32 |= 0x00006000;
    }
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = sy << 16 | sx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}












 
void ge2dFill_TileBlt(int srcx, int srcy, int destx, int desty, int width, int height, int x_count, int y_count)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 tile_ctl;

#line 1888 "..\\..\\..\\Driver\\Source\\2d.c"

    if (x_count > 0) x_count--;
    if (y_count > 0) y_count--;

    cmd32 = 0xcc430400; 

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | GFX_WIDTH; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = srcy << 16 | srcx;           
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;  

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    tile_ctl = (y_count << 8) | (x_count);
    *((volatile unsigned int *)((0xB000B000+0x08))) = tile_ctl;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dHostBlt_Write(int x, int y, int width, int height, void *buf)
{
    UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
    int transfer_count, i, j;
    UINT32 *ptr32, data32;







    cmd32 = 0xcc430020;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    ptr32 = (UINT32 *)buf;
    for (i=0; i<height; i++) { 
        transfer_count = (width * (GFX_BPP/8) + 3) / 4; 

        while (transfer_count >= 8) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<8; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
            transfer_count -= 8;
        }

        if (transfer_count > 0) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<transfer_count; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
        }
    }

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dHostBlt_Read(int x, int y, int width, int height, void *buf)
{
    UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
    int transfer_count, i, j;
    UINT32 *ptr32;







    cmd32 = 0xcc430001;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    ptr32 = (UINT32 *)buf;
    for (i=0; i<height; i++) {
        transfer_count = (width * (GFX_BPP/8) + 3) / 4; 

        while (transfer_count >= 8) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000400)==0);
            for (j=0; j<8; j++) {
                *ptr32++ = (*((volatile unsigned int *)((0xB000B000+0x60))));
            }
            transfer_count -= 8;
        }

        if (transfer_count > 0) {
            while ((((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000f000)>>12) != transfer_count);
            for (j=0; j<transfer_count; j++) {
                *ptr32++ = (*((volatile unsigned int *)((0xB000B000+0x60))));
            }
        }
    }

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}









 
void ge2dHostBlt_Sprite(int x, int y, int width, int height, void *buf)
{
    UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
    int transfer_count, i, j;
    UINT32 *ptr32, data32, alpha;






    cmd32 = 0xcc430020;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    if (_DrawMode==1) {
        cmd32 |= 0x00008000; 
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    } else if (_DrawMode==2) {
        cmd32 |= 0x00009000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x2C))) = _ColorKey;
        *((volatile unsigned int *)((0xB000B000+0x30))) = _ColorKeyMask;
    }

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    ptr32 = (UINT32 *)buf;
    for (i=0; i<height; i++) {
        transfer_count = width * (GFX_BPP/8) / 4; 

        while (transfer_count > 8) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<8; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
            transfer_count -= 8;
        }

        if (transfer_count > 0) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<transfer_count; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
        }
    }

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}











 
void ge2dRotation(int srcx, int srcy, int destx, int desty, int width, int height, int ctl)
{
    UINT32 cmd32, dest_start, src_start, dimension, pitch;
    void *tmpscreen,*orig_dest_start00;

    tmpscreen = (void *)malloc(width*height*GFX_BPP/8);







    memset(tmpscreen,0,width*height*GFX_BPP/8);

    orig_dest_start00 = (void *)(*((volatile unsigned int *)((0xB000B000+0x34))));
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)tmpscreen;   
    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)GFX_START_ADDR;

    ge2dBitblt_SourceToDestination(srcx,srcy,0,0,width,height,GFX_WIDTH,width);

    src_start = dest_start = dimension = cmd32 = pitch = 0;

    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)orig_dest_start00;
    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)tmpscreen;

    pitch = GFX_WIDTH << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = 0 << 16 | 0;  
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    cmd32 = 0xcc030000 | (ctl << 1);

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

     
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 

    free(tmpscreen);
}









 
void ge2dSpriteBlt_Screen(int destx, int desty, int sprite_width, int sprite_height, void *buf)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;






    cmd32 = 0xcc430000;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | sprite_width; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = 0; 
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = desty << 16 | destx;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = sprite_height << 16 | sprite_width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (UINT32)buf;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    
    
    

    cmd32 |= 0x00008000; 
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x2C))) = make_color(0xFF000000);
    *((volatile unsigned int *)((0xB000B000+0x30))) = 0xffffff;

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}














 
void ge2dSpriteBltx_Screen(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;







    cmd32 = 0xcc430000;

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | sprite_width; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (UINT32)buf;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;

    src_start = sprite_sy << 16 | sprite_sx;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    
    
    
    cmd32 |= 0x00008000; 
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x2C))) = make_color(0xFF000000);
    *((volatile unsigned int *)((0xB000B000+0x30))) = 0xffffff;

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}











 
void ge2dSpriteBlt_ScreenRop(int x, int y, int sprite_width, int sprite_height, void *buf, int rop)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;







    cmd32 = 0x00430000 | (rop << 24);

    if (_PatternType==0) {
        cmd32 |= 0x00000010; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | sprite_width; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = 0; 
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = sprite_height << 16 | sprite_width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (UINT32)buf;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int) GFX_START_ADDR;  

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    
    
    
    cmd32 |= 0x00008000; 
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x2C))) = make_color(0xFF000000);
    *((volatile unsigned int *)((0xB000B000+0x30))) = 0xffffff;

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    if ((rop==0x00) || (rop==0xff)) {
        cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}















 
void ge2dSpriteBltx_ScreenRop(int x, int y, int sprite_sx, int sprite_sy, int width, int height, int sprite_width, int sprite_height, void *buf, int rop)
{
    UINT32 cmd32, pitch, dest_start, src_start, dimension;
    UINT32 data32, alpha;







    cmd32 = 0x00430000 | (rop << 24);

    if (_PatternType==0) {
        cmd32 |= 0x00000010; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    pitch = GFX_WIDTH << 16 | sprite_width; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    src_start = sprite_sy << 16 | sprite_sx;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = src_start;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dimension;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (UINT32)buf;
    *((volatile unsigned int *)((0xB000B000+0x34))) = (int)GFX_START_ADDR;  

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    
    
    
    cmd32 |= 0x00008000; 
    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    *((volatile unsigned int *)((0xB000B000+0x2C))) = make_color(0xFF000000);
    *((volatile unsigned int *)((0xB000B000+0x30))) = 0xffffff;

    if (_EnableAlpha) {
        cmd32 |= 0x00200000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

        data32 = (*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x0000ffff;
        alpha = (UINT32)((_AlphaKs << 8) | _AlphaKd);
        data32 |= (alpha << 16);

        *((volatile unsigned int *)((0xB000B000+0x5C))) = data32;
    }

    if ((rop==0x00) || (rop==0xff)) {
        cmd32 = (cmd32 & 0xffff0fff) | 0x00009000;
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}













 
void ge2dColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf)
{
    UINT32 cmd32, dest_pitch, src_pitch, pitch, dest_start, dest_dimension;
    UINT32 fore_color32, back_color32;

    fore_color32 = make_color(fore_color);
    back_color32 = make_color(back_color);

    cmd32 = 0xcc430080;
    if (opt==1) {
        cmd32 |= 0x00004000; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x28))) = fore_color32;
    *((volatile unsigned int *)((0xB000B000+0x24))) = back_color32;

    dest_pitch = GFX_WIDTH; 
    src_pitch = width; 

    pitch = (dest_pitch << 16) | src_pitch;
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)buf;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = 0; 

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    if (_ClipEnable) {
        cmd32 |= 0x00000200;
        if (_OutsideClip) {
            cmd32 |= 0x00000100;
        }
        *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;
        *((volatile unsigned int *)((0xB000B000+0x48))) = _ClipTL;
        *((volatile unsigned int *)((0xB000B000+0x4C))) = _ClipBR;
    }

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}












 
void ge2dHostColorExpansionBlt(int x, int y, int width, int height, int fore_color, int back_color, int opt, void *buf)
{
    UINT32 cmd32, dest_pitch, dest_start, dest_dimension;
    UINT32 fore_color32, back_color32;
    UINT32 *ptr32, data32;
    int transfer_count, i, j;

    fore_color32 = make_color(fore_color);
    back_color32 = make_color(back_color);

    cmd32 = 0xcc4300a0;
    if (opt==1) {
        cmd32 |= 0x00004000; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x28))) = fore_color32;
    *((volatile unsigned int *)((0xB000B000+0x24))) = back_color32;

    dest_pitch = GFX_WIDTH << 16; 
    *((volatile unsigned int *)((0xB000B000+0x38))) = dest_pitch;

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;

    ptr32 = (UINT32 *)buf;
    for (i=0; i<height; i++) {
        transfer_count = (width+31) / 32; 

        while (transfer_count > 8) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<8; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
            transfer_count -= 8;
        }

        if (transfer_count > 0) {
            while (((*((volatile unsigned int *)((0xB000B000+0x5C)))) & 0x00000800)==0); 
            for (j=0; j<transfer_count; j++) {
                data32 = *ptr32++;
                *((volatile unsigned int *)((0xB000B000+0x60))) = data32;
            }
        }
    }

    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 

    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}







 
void ge2dInitMonoPattern(int opt, int fore_color, int back_color)
{
    UINT32 color32;

    


 

    *((volatile unsigned int *)((0xB000B000+0x50))) = MonoPatternData[opt]. PatternA;
    *((volatile unsigned int *)((0xB000B000+0x54))) = MonoPatternData[opt]. PatternB;

    color32 = make_color(fore_color);
    *((volatile unsigned int *)((0xB000B000+0x28))) = color32;

    color32 = make_color(back_color);
    *((volatile unsigned int *)((0xB000B000+0x24))) = color32;

    _PatternType = 0;
}








 
void ge2dInitMonoInputPattern(UINT32 PatternA, UINT32 PatternB, int fore_color, int back_color)
{
    UINT32 color32;

    


 

    *((volatile unsigned int *)((0xB000B000+0x50))) = PatternA;
    *((volatile unsigned int *)((0xB000B000+0x54))) = PatternB;

    color32 = make_color(fore_color);
    *((volatile unsigned int *)((0xB000B000+0x28))) = color32;

    color32 = make_color(back_color);
    *((volatile unsigned int *)((0xB000B000+0x24))) = color32;

    _PatternType = 0;
}













 
void ge2dInitColorPattern(int patformat, void *patdata)
{
    UINT8 *ptr_pat;
    UINT8 *ptr8, r8, g8, b8;
    UINT16 *ptr16, r16, g16, b16, g16_1, g16_2;
    UINT32 *ptr32, r32, g32, b32, g32_1, g32_2;
    int idx;

    ptr_pat = (UINT8 *)patdata;
    if(patformat == 3) {
        if (GFX_BPP==8) {
            ptr8 = (UINT8 *)GFX_PAT_ADDR;
            for (idx=0; idx<64; idx++) {
                b8 = (UINT8)(*ptr_pat++) & 0xc0; 
                g8 = (UINT8)(*ptr_pat++) & 0xe0; 
                r8 = (UINT8)(*ptr_pat++) & 0xe0; 
                ptr_pat++;
                *ptr8++ = r8 | (g8>>3) | (b8>>6);
            }
        } else if (GFX_BPP==16) {
            ptr16 = (UINT16 *)GFX_PAT_ADDR;
            for (idx=0; idx<64; idx++) {
                b16 = (UINT16)(*ptr_pat++) & 0x000f8; 
                g16 = (UINT16)(*ptr_pat++) & 0x000fc; 
                r16 = (UINT16)(*ptr_pat++) & 0x000f8; 
                ptr_pat++;
                *ptr16++ = (r16<<8) | (g16<<3) | (b16>>3);
            }
        } else if (GFX_BPP==32) {
            ptr32 = (UINT32 *)GFX_PAT_ADDR;
            for (idx=0; idx<64; idx++) {
                b32 = (UINT32)(*ptr_pat++);
                g32 = (UINT32)(*ptr_pat++);
                r32 = (UINT32)(*ptr_pat++);
                ptr_pat++;
                *ptr32++ = (r32<<16) | (g32<<8) | b32;
            }
        }
    } else if(patformat == 2) {
        if (GFX_BPP==8) {
            ptr8 = (UINT8 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                b8 = (UINT8)(*ptr_pat++) & 0x00018; 
                g8 = (UINT8)(*ptr_pat) & 0x00007;  
                r8 = (UINT8)(*ptr_pat++) & 0x000e0;  
                *ptr8++ = r8 | (g8<<2) | (b8>>3);
            }
        } else if (GFX_BPP==16) {
            ptr16 = (UINT16 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                *ptr16++ = (*ptr_pat) | (*(ptr_pat+1)) << 8;
                ptr_pat+=2;
            }
        } else if (GFX_BPP==32) {
            ptr32 = (UINT32 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                b32 = (UINT8)(*ptr_pat) & 0x1f;      
                g32_1 = (UINT8)(*ptr_pat++) & 0xe0;  
                g32_2 = (UINT8)(*ptr_pat) & 0x07;    
                g32 = ((g32_1>>5) | (g32_2<<3))<<2;
                r32 = (UINT8)(*ptr_pat++) & 0xf8;    
                *ptr32++ = 0<<24 | (r32<<16) | (g32<<8) | (b32<<3);
            }
        }
    } else if(patformat == 1) {
        if (GFX_BPP==8) {
            ptr8 = (UINT8 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                *ptr8++ = *ptr_pat;
                ptr_pat++;
            }
        } else if (GFX_BPP==16) {
            ptr16 = (UINT16 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                r16 = (UINT8)(*ptr_pat) & 0xe0; 
                g16_1 = (UINT8)(*ptr_pat) & 0x10;
                g16_2 = (UINT8)(*ptr_pat) & 0x0c;
                g16 = (g16_1>>2) | (g16_2>>2);
                b16 = (UINT8)(*ptr_pat++) & 0x3; 
                *ptr16++ = (r16<<8) | (g16<<8) | (b16<<3);
            }
        } else if (GFX_BPP==32) {
            ptr32 = (UINT32 *)GFX_PAT_ADDR;

            for (idx=0; idx<64; idx++) {
                r32 = (UINT8)(*ptr_pat) & 0xe0;  
                g32 = (UINT8)(*ptr_pat) & 0x1c;  
                b32 = (UINT8)(*ptr_pat++) & 0x3;  
                *ptr32++ = 0<<24 | (r32<<15) | (g32<<11) | (b32<<6);
            }
        }
    }

    _PatternType = 1;
}











 
void ge2dFont_PutChar(int x, int y, char asc_code, int fore_color, int back_color, int draw_mode, int font_id)
{
    int cmd32, dest_pitch, src_pitch, pitch, dest_start, dest_dimension;
    UINT32 width, height;
    UINT32 fore_color32, back_color32;
    UINT8 *fptr;
    UINT8 *temp_buf[32*32], *ptr8;
    int idx;

    fore_color32 = make_color(fore_color);
    back_color32 = make_color(back_color);

    cmd32 = 0xcc430080;

    if (draw_mode==1) {
        cmd32 |= 0x00004000; 
    }

    *((volatile unsigned int *)((0xB000B000+0x20))) = cmd32;

    *((volatile unsigned int *)((0xB000B000+0x28))) = fore_color32;
    *((volatile unsigned int *)((0xB000B000+0x24))) = back_color32;

    if (font_id==1) {
        fptr = (UINT8 *)&FontData16[asc_code][0];
        src_pitch = 32;
        width = 32;
        height = 16;

        ptr8 = (UINT8 *)&temp_buf[0];
        for (idx=0; idx<16; idx++) {
            *ptr8++ = *fptr++;
            *ptr8++ = 0;
            *ptr8++ = 0;
            *ptr8++ = 0;
        }
        fptr =  (UINT8 *)&temp_buf[0];
    } else {  
        fptr = (UINT8 *)&FontData8[asc_code][0];
        src_pitch = 32;
        width = 32;
        height = 8;
        ptr8 = (UINT8 *)&temp_buf[0];
        for (idx=0; idx<8; idx++) {
            *ptr8++ = *fptr++;
            *ptr8++ = 0;
            *ptr8++ = 0;
            *ptr8++ = 0;
        }
        fptr =  (UINT8 *)&temp_buf[0];
    }

    dest_pitch = GFX_WIDTH; 

    pitch = (dest_pitch << 16) | src_pitch;
    *((volatile unsigned int *)((0xB000B000+0x38))) = pitch;

    *((volatile unsigned int *)((0xB000B000+0x04))) = (int)fptr;
    *((volatile unsigned int *)((0xB000B000+0x3C))) = 0; 

    dest_start = y << 16 | x;
    *((volatile unsigned int *)((0xB000B000+0x40))) = dest_start;

    dest_dimension = height << 16 | width;
    *((volatile unsigned int *)((0xB000B000+0x44))) = dest_dimension;

    *((volatile unsigned int *)((0xB000B000+0x00))) = 1;
    while (((*((volatile unsigned int *)((0xB000B000+0x10))))&0x01)==0); 
    *((volatile unsigned int *)((0xB000B000+0x10))) = 1; 
}











 
void ge2dFont_PutString(int x, int y, char *str, int fore_color, int back_color, int draw_mode, int font_id)
{
    char *ptr;
    int idx, sx;

    ptr =	str;
    sx = x;
    for (idx=0; idx<strlen(str); idx++) {
        ge2dFont_PutChar(sx, y, *ptr++, fore_color, back_color, draw_mode, font_id);
        sx += 8;	
    }
}
   

   

   

 
