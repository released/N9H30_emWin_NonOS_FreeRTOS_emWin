; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fbutils.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fbutils.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\fbutils.crf ..\tslib\fbutils.c]
                          ARM

                          AREA ||i.fillrect||, CODE, READONLY, ALIGN=2

                  fillrect PROC
;;;316    
;;;317    void fillrect (int x1, int y1, int x2, int y2, unsigned colidx)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;318    {
000004  e1a06002          MOV      r6,r2
;;;319        int tmp;
;;;320        unsigned xormode;
;;;321        unsigned color, color2;
;;;322        //union multiptr loc;
;;;323    
;;;324        /* Clipping and sanity checking */
;;;325        if (x1 > x2)
000008  e1500006          CMP      r0,r6
00000c  e1a08000          MOV      r8,r0                 ;318
000010  e1a05001          MOV      r5,r1                 ;318
;;;326        {
;;;327            tmp = x1;
;;;328            x1 = x2;
000014  c1a08002          MOVGT    r8,r2
000018  e1a09003          MOV      r9,r3                 ;318
;;;329            x2 = tmp;
00001c  c1a06000          MOVGT    r6,r0
;;;330        }
;;;331        if (y1 > y2)
000020  e1550009          CMP      r5,r9
;;;332        {
;;;333            tmp = y1;
000024  c1a00005          MOVGT    r0,r5
;;;334            y1 = y2;
;;;335            y2 = tmp;
;;;336        }
;;;337        if (x1 < 0) x1 = 0;
;;;338        if (x1 >= xres) x1 = xres - 1;
000028  e59f2188          LDR      r2,|L1.440|
00002c  c1a09000          MOVGT    r9,r0                 ;335
000030  c1a05003          MOVGT    r5,r3                 ;334
000034  e5920004          LDR      r0,[r2,#4]  ; xres
000038  e3580000          CMP      r8,#0                 ;337
00003c  b3a08000          MOVLT    r8,#0                 ;337
000040  e1580000          CMP      r8,r0
000044  22408001          SUBCS    r8,r0,#1
;;;339        if (x2 < 0) x2 = 0;
000048  e3560000          CMP      r6,#0
00004c  b3a06000          MOVLT    r6,#0
;;;340        if (x2 >= xres) x2 = xres - 1;
000050  e1560000          CMP      r6,r0
000054  22406001          SUBCS    r6,r0,#1
;;;341        if (y1 < 0) y1 = 0;
;;;342        if (y1 >= yres) y1 = yres - 1;
000058  e5920008          LDR      r0,[r2,#8]  ; yres
00005c  e3550000          CMP      r5,#0                 ;341
000060  b3a05000          MOVLT    r5,#0                 ;341
000064  e1550000          CMP      r5,r0
000068  22405001          SUBCS    r5,r0,#1
;;;343        if (y2 < 0) y2 = 0;
00006c  e3590000          CMP      r9,#0
000070  b3a09000          MOVLT    r9,#0
;;;344        if (y2 >= yres) y2 = yres - 1;
000074  e1590000          CMP      r9,r0
000078  22409001          SUBCS    r9,r0,#1
;;;345    
;;;346        if ((x1 > x2) || (y1 > y2))
00007c  e1580006          CMP      r8,r6
000080  e59d1028          LDR      r1,[sp,#0x28]         ;325
000084  d1550009          CMPLE    r5,r9
;;;347            return;
;;;348    
;;;349        xormode = colidx & XORMODE;
;;;350        colidx &= ~XORMODE;
;;;351    
;;;352    #ifdef DEBUG
;;;353        if (colidx > 255)
;;;354        {
;;;355            fprintf (stderr, "WARNING: color value = %u, must be <256\n",
;;;356                     colidx);
;;;357            return;
;;;358        }
;;;359    #endif
;;;360    
;;;361        color2 = colormap [colidx];
000088  d59f412c          LDRLE    r4,|L1.444|
00008c  d201a102          ANDLE    r10,r1,#0x80000000    ;349
000090  d3c1b102          BICLE    r11,r1,#0x80000000    ;350
;;;362    
;;;363        for (; y1 <= y2; y1++)
;;;364        {
;;;365    //      loc.p8 = line_addr [y1] + x1 * bytes_per_pixel;
;;;366            //line_addr = (unsigned char *)g_VAFrameBuf+ y1*(LCD_XSIZE*bytes_per_pixel);
;;;367            //loc.p8 = line_addr + x1* bytes_per_pixel;
;;;368            for (tmp = x1; tmp <= x2; tmp++)
;;;369            {
;;;370                //__setpixel (loc, xormode, colidx);
;;;371                //loc.p8 += bytes_per_pixel;
;;;372                color = GUI_GetPixelIndex(tmp, y1);
;;;373                if ( color == colormap2[0] )
;;;374                    color = colormap[0];
;;;375                else if ( color == colormap2[1] )
;;;376                    color = colormap[1];
;;;377                else if ( color == colormap2[2] )
;;;378                    color = colormap[2];
;;;379                else if ( color == colormap2[3] )
;;;380                    color = colormap[3];
;;;381                else if ( color == colormap2[4] )
;;;382                    color = colormap[4];
;;;383                else if ( color == colormap2[5] )
;;;384                    color = colormap[5];
;;;385                else if ( color == colormap2[6] )
;;;386                    color = colormap[6];
;;;387                else if ( color == colormap2[7] )
;;;388                    color = colormap[7];
;;;389                else if ( color == colormap2[8] )
;;;390                    color = colormap[8];
;;;391                else if ( color == colormap2[9] )
;;;392                    color = colormap[9];
;;;393                else if ( color == colormap2[10] )
;;;394                    color = colormap[10];
;;;395                else if ( color == colormap2[11] )
;;;396                    color = colormap[11];
;;;397                else if ( color == colormap2[12] )
;;;398                    color = colormap[12];
;;;399                color2 = colormap [colidx];
;;;400                if (xormode)
;;;401                    color ^= color2;
;;;402                else
;;;403                    color = color2;
;;;404                GUI_SetColor(color);
;;;405                GUI_DrawPixel(tmp, y1);
;;;406            }
;;;407        }
;;;408    }
000094  c8bd9ff0          POPGT    {r4-r12,pc}
                  |L1.152|
000098  e1550009          CMP      r5,r9                 ;363
00009c  d1a07008          MOVLE    r7,r8                 ;368
0000a0  c8bd9ff0          POPGT    {r4-r12,pc}
0000a4  ea00003f          B        |L1.424|
                  |L1.168|
0000a8  e1a01005          MOV      r1,r5                 ;372
0000ac  e1a00007          MOV      r0,r7                 ;372
0000b0  ebfffffe          BL       GUI_GetPixelIndex
0000b4  e59f1104          LDR      r1,|L1.448|
0000b8  e5912000          LDR      r2,[r1,#0]            ;373  ; colormap2
0000bc  e1520000          CMP      r2,r0                 ;373
0000c0  05940000          LDREQ    r0,[r4,#0]            ;374  ; colormap
0000c4  0a00002e          BEQ      |L1.388|
0000c8  e5912004          LDR      r2,[r1,#4]            ;375  ; colormap2
0000cc  e1520000          CMP      r2,r0                 ;375
0000d0  05940004          LDREQ    r0,[r4,#4]            ;376  ; colormap
0000d4  0a00002a          BEQ      |L1.388|
0000d8  e5912008          LDR      r2,[r1,#8]            ;377  ; colormap2
0000dc  e1520000          CMP      r2,r0                 ;377
0000e0  05940008          LDREQ    r0,[r4,#8]            ;378  ; colormap
0000e4  0a000026          BEQ      |L1.388|
0000e8  e591200c          LDR      r2,[r1,#0xc]          ;379  ; colormap2
0000ec  e1520000          CMP      r2,r0                 ;379
0000f0  0594000c          LDREQ    r0,[r4,#0xc]          ;380  ; colormap
0000f4  0a000022          BEQ      |L1.388|
0000f8  e5912010          LDR      r2,[r1,#0x10]         ;381  ; colormap2
0000fc  e1520000          CMP      r2,r0                 ;381
000100  05940010          LDREQ    r0,[r4,#0x10]         ;382  ; colormap
000104  0a00001e          BEQ      |L1.388|
000108  e5912014          LDR      r2,[r1,#0x14]         ;383  ; colormap2
00010c  e1520000          CMP      r2,r0                 ;383
000110  05940014          LDREQ    r0,[r4,#0x14]         ;384  ; colormap
000114  0a00001a          BEQ      |L1.388|
000118  e5912018          LDR      r2,[r1,#0x18]         ;385  ; colormap2
00011c  e1520000          CMP      r2,r0                 ;385
000120  05940018          LDREQ    r0,[r4,#0x18]         ;386  ; colormap
000124  0a000016          BEQ      |L1.388|
000128  e591201c          LDR      r2,[r1,#0x1c]         ;387  ; colormap2
00012c  e1520000          CMP      r2,r0                 ;387
000130  0594001c          LDREQ    r0,[r4,#0x1c]         ;388  ; colormap
000134  0a000012          BEQ      |L1.388|
000138  e5912020          LDR      r2,[r1,#0x20]         ;389  ; colormap2
00013c  e1520000          CMP      r2,r0                 ;389
000140  05940020          LDREQ    r0,[r4,#0x20]         ;390  ; colormap
000144  0a00000e          BEQ      |L1.388|
000148  e5912024          LDR      r2,[r1,#0x24]         ;391  ; colormap2
00014c  e1520000          CMP      r2,r0                 ;391
000150  05940024          LDREQ    r0,[r4,#0x24]         ;392  ; colormap
000154  0a00000a          BEQ      |L1.388|
000158  e5912028          LDR      r2,[r1,#0x28]         ;393  ; colormap2
00015c  e1520000          CMP      r2,r0                 ;393
000160  05940028          LDREQ    r0,[r4,#0x28]         ;394  ; colormap
000164  0a000006          BEQ      |L1.388|
000168  e591202c          LDR      r2,[r1,#0x2c]         ;395  ; colormap2
00016c  e1520000          CMP      r2,r0                 ;395
000170  0594002c          LDREQ    r0,[r4,#0x2c]         ;396  ; colormap
000174  0a000002          BEQ      |L1.388|
000178  e5911030          LDR      r1,[r1,#0x30]         ;397  ; colormap2
00017c  e1510000          CMP      r1,r0                 ;397
000180  05940030          LDREQ    r0,[r4,#0x30]         ;398  ; colormap
                  |L1.388|
000184  e794110b          LDR      r1,[r4,r11,LSL #2]    ;399
000188  e35a0000          CMP      r10,#0                ;400
00018c  10200001          EORNE    r0,r0,r1              ;401
000190  01a00001          MOVEQ    r0,r1                 ;403
000194  ebfffffe          BL       GUI_SetColor
000198  e1a01005          MOV      r1,r5                 ;405
00019c  e1a00007          MOV      r0,r7                 ;405
0001a0  ebfffffe          BL       GUI_DrawPixel
0001a4  e2877001          ADD      r7,r7,#1              ;405
                  |L1.424|
0001a8  e1560007          CMP      r6,r7                 ;368
0001ac  b2855001          ADDLT    r5,r5,#1              ;368
0001b0  baffffb8          BLT      |L1.152|
0001b4  eaffffbb          B        |L1.168|
;;;409    #endif
                          ENDP

                  |L1.440|
                          DCD      ||.data||
                  |L1.444|
                          DCD      ||.bss||
                  |L1.448|
                          DCD      ||.bss||+0x34

                          AREA ||i.line||, CODE, READONLY, ALIGN=2

                  line PROC
;;;255    
;;;256    void line(int x1, int y1, int x2, int y2, unsigned colidx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;257    {
000004  e1a04001          MOV      r4,r1
000008  e1a05000          MOV      r5,r0
;;;258        int tmp;
;;;259        int dx = x2 - x1;
00000c  e0521005          SUBS     r1,r2,r5
000010  e1a06002          MOV      r6,r2                 ;257
;;;260        int dy = y2 - y1;
000014  e043c004          SUB      r12,r3,r4
;;;261    
;;;262        if (abs (dx) < abs (dy))
000018  51a00001          MOVPL    r0,r1
00001c  42610000          RSBMI    r0,r1,#0
000020  e25c2000          SUBS     r2,r12,#0
000024  e59d8018          LDR      r8,[sp,#0x18]         ;260
000028  b26c2000          RSBLT    r2,r12,#0
00002c  e1500002          CMP      r0,r2
000030  e1a07003          MOV      r7,r3                 ;257
000034  aa000015          BGE      |L2.144|
;;;263        {
;;;264            if (y1 > y2)
000038  e1570004          CMP      r7,r4
00003c  aa000004          BGE      |L2.84|
;;;265            {
;;;266                tmp = x1;
;;;267                x1 = x2;
;;;268                x2 = tmp;
;;;269                tmp = y1;
000040  e1a07004          MOV      r7,r4
000044  e1a05006          MOV      r5,r6                 ;267
;;;270                y1 = y2;
000048  e1a04003          MOV      r4,r3
;;;271                y2 = tmp;
;;;272                dx = -dx;
00004c  e2611000          RSB      r1,r1,#0
;;;273                dy = -dy;
000050  e26cc000          RSB      r12,r12,#0
                  |L2.84|
;;;274            }
;;;275            x1 <<= 16;
;;;276            /* dy is apriori >0 */
;;;277            dx = (dx << 16) / dy;
000054  e1a00801          LSL      r0,r1,#16
000058  e1a05805          LSL      r5,r5,#16             ;275
00005c  e1a0100c          MOV      r1,r12
000060  ebfffffe          BL       __aeabi_idivmod
000064  e1a06000          MOV      r6,r0
;;;278            while (y1 <= y2)
000068  ea000005          B        |L2.132|
                  |L2.108|
;;;279            {
;;;280                pixel (x1 >> 16, y1, colidx);
00006c  e1a00845          ASR      r0,r5,#16
000070  e1a02008          MOV      r2,r8
000074  e1a01004          MOV      r1,r4
000078  ebfffffe          BL       pixel
;;;281                x1 += dx;
00007c  e0855006          ADD      r5,r5,r6
000080  e2844001          ADD      r4,r4,#1
                  |L2.132|
000084  e1540007          CMP      r4,r7                 ;278
000088  dafffff7          BLE      |L2.108|
;;;282                y1++;
;;;283            }
;;;284        }
;;;285        else
;;;286        {
;;;287            if (x1 > x2)
;;;288            {
;;;289                tmp = x1;
;;;290                x1 = x2;
;;;291                x2 = tmp;
;;;292                tmp = y1;
;;;293                y1 = y2;
;;;294                y2 = tmp;
;;;295                dx = -dx;
;;;296                dy = -dy;
;;;297            }
;;;298            y1 <<= 16;
;;;299            dy = dx ? (dy << 16) / dx : 0;
;;;300            while (x1 <= x2)
;;;301            {
;;;302                pixel (x1, y1 >> 16, colidx);
;;;303                y1 += dy;
;;;304                x1++;
;;;305            }
;;;306        }
;;;307    }
00008c  e8bd81f0          POP      {r4-r8,pc}
                  |L2.144|
000090  e1550006          CMP      r5,r6                 ;287
000094  da000005          BLE      |L2.176|
000098  e1a00005          MOV      r0,r5                 ;289
00009c  e1a05006          MOV      r5,r6                 ;290
0000a0  e1a06000          MOV      r6,r0                 ;291
0000a4  e1a04003          MOV      r4,r3                 ;293
0000a8  e2611000          RSB      r1,r1,#0              ;295
0000ac  e26cc000          RSB      r12,r12,#0            ;296
                  |L2.176|
0000b0  e3510000          CMP      r1,#0                 ;299
0000b4  e1a04804          LSL      r4,r4,#16             ;298
0000b8  03a07000          MOVEQ    r7,#0                 ;299
0000bc  0a000009          BEQ      |L2.232|
0000c0  e1a0080c          LSL      r0,r12,#16            ;299
0000c4  ebfffffe          BL       __aeabi_idivmod
0000c8  e1a07000          MOV      r7,r0                 ;299
0000cc  ea000005          B        |L2.232|
                  |L2.208|
0000d0  e1a01844          ASR      r1,r4,#16             ;302
0000d4  e1a02008          MOV      r2,r8                 ;302
0000d8  e1a00005          MOV      r0,r5                 ;302
0000dc  ebfffffe          BL       pixel
0000e0  e0844007          ADD      r4,r4,r7              ;303
0000e4  e2855001          ADD      r5,r5,#1              ;303
                  |L2.232|
0000e8  e1550006          CMP      r5,r6                 ;300
0000ec  dafffff7          BLE      |L2.208|
0000f0  e8bd81f0          POP      {r4-r8,pc}
;;;308    #if 1
                          ENDP


                          AREA ||i.pixel||, CODE, READONLY, ALIGN=2

                  pixel PROC
;;;191    #endif
;;;192    void pixel (int x, int y, unsigned colidx)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;193    {
;;;194        unsigned xormode;
;;;195        unsigned color, color2;
;;;196        //union multiptr loc;
;;;197    
;;;198        if ((x < 0) || (x >= __DEMO_TS_WIDTH__) ||
000004  e3500e32          CMP      r0,#0x320
000008  e1a04001          MOV      r4,r1                 ;193
00000c  e1a06000          MOV      r6,r0                 ;193
;;;199                (y < 0) || (y >= __DEMO_TS_HEIGHT__))
;;;200            return;
;;;201    
;;;202        xormode = colidx & XORMODE;
;;;203        colidx &= ~XORMODE;
;;;204    
;;;205    #ifdef DEBUG
;;;206        if (colidx > 255)
;;;207        {
;;;208            fprintf (stderr, "WARNING: color value = %u, must be <256\n",
;;;209                     colidx);
;;;210            return;
;;;211        }
;;;212    #endif
;;;213    
;;;214    //  loc.p8 = line_addr [y] + x * bytes_per_pixel;
;;;215    //  line_addr = (unsigned char *)g_VAFrameBuf+ y*(LCD_XSIZE*bytes_per_pixel);
;;;216        color = GUI_GetPixelIndex(x, y);
;;;217        if ( color == colormap2[0] )
;;;218            color = colormap[0];
;;;219        else if ( color == colormap2[1] )
;;;220            color = colormap[1];
;;;221        else if ( color == colormap2[2] )
;;;222            color = colormap[2];
;;;223        else if ( color == colormap2[3] )
;;;224            color = colormap[3];
;;;225        else if ( color == colormap2[4] )
;;;226            color = colormap[4];
;;;227        else if ( color == colormap2[5] )
;;;228            color = colormap[5];
;;;229        else if ( color == colormap2[6] )
;;;230            color = colormap[6];
;;;231        else if ( color == colormap2[7] )
;;;232            color = colormap[7];
;;;233        else if ( color == colormap2[8] )
;;;234            color = colormap[8];
;;;235        else if ( color == colormap2[9] )
;;;236            color = colormap[9];
;;;237        else if ( color == colormap2[10] )
;;;238            color = colormap[10];
;;;239        else if ( color == colormap2[11] )
;;;240            color = colormap[11];
;;;241        else if ( color == colormap2[12] )
;;;242            color = colormap[12];
;;;243        color2 = colormap [colidx];
;;;244        if (xormode)
;;;245            color ^= color2;
;;;246        else
;;;247            color = color2;
;;;248        GUI_SetColor(color);
;;;249        GUI_DrawPixel(x, y);
;;;250    
;;;251    
;;;252        //loc.p8 = line_addr + x*bytes_per_pixel;
;;;253        //__setpixel(loc, xormode, colormap [colidx]);
;;;254    }
000010  28bd81f0          POPCS    {r4-r8,pc}
000014  e3540000          CMP      r4,#0                 ;199
000018  b8bd81f0          POPLT    {r4-r8,pc}
00001c  e3540e1e          CMP      r4,#0x1e0             ;199
000020  a8bd81f0          POPGE    {r4-r8,pc}
000024  e2025102          AND      r5,r2,#0x80000000     ;202
000028  e3c27102          BIC      r7,r2,#0x80000000     ;203
00002c  ebfffffe          BL       GUI_GetPixelIndex
000030  e59f10f0          LDR      r1,|L3.296|
000034  e5913000          LDR      r3,[r1,#0]            ;218  ; colormap2
000038  e2412034          SUB      r2,r1,#0x34           ;218
00003c  e1530000          CMP      r3,r0                 ;217
000040  05920000          LDREQ    r0,[r2,#0]            ;218  ; colormap
000044  0a00002e          BEQ      |L3.260|
000048  e5913004          LDR      r3,[r1,#4]            ;219  ; colormap2
00004c  e1530000          CMP      r3,r0                 ;219
000050  05920004          LDREQ    r0,[r2,#4]            ;220  ; colormap
000054  0a00002a          BEQ      |L3.260|
000058  e5913008          LDR      r3,[r1,#8]            ;221  ; colormap2
00005c  e1530000          CMP      r3,r0                 ;221
000060  05920008          LDREQ    r0,[r2,#8]            ;222  ; colormap
000064  0a000026          BEQ      |L3.260|
000068  e591300c          LDR      r3,[r1,#0xc]          ;223  ; colormap2
00006c  e1530000          CMP      r3,r0                 ;223
000070  0592000c          LDREQ    r0,[r2,#0xc]          ;224  ; colormap
000074  0a000022          BEQ      |L3.260|
000078  e5913010          LDR      r3,[r1,#0x10]         ;225  ; colormap2
00007c  e1530000          CMP      r3,r0                 ;225
000080  05920010          LDREQ    r0,[r2,#0x10]         ;226  ; colormap
000084  0a00001e          BEQ      |L3.260|
000088  e5913014          LDR      r3,[r1,#0x14]         ;227  ; colormap2
00008c  e1530000          CMP      r3,r0                 ;227
000090  05920014          LDREQ    r0,[r2,#0x14]         ;228  ; colormap
000094  0a00001a          BEQ      |L3.260|
000098  e5913018          LDR      r3,[r1,#0x18]         ;229  ; colormap2
00009c  e1530000          CMP      r3,r0                 ;229
0000a0  05920018          LDREQ    r0,[r2,#0x18]         ;230  ; colormap
0000a4  0a000016          BEQ      |L3.260|
0000a8  e591301c          LDR      r3,[r1,#0x1c]         ;231  ; colormap2
0000ac  e1530000          CMP      r3,r0                 ;231
0000b0  0592001c          LDREQ    r0,[r2,#0x1c]         ;232  ; colormap
0000b4  0a000012          BEQ      |L3.260|
0000b8  e5913020          LDR      r3,[r1,#0x20]         ;233  ; colormap2
0000bc  e1530000          CMP      r3,r0                 ;233
0000c0  05920020          LDREQ    r0,[r2,#0x20]         ;234  ; colormap
0000c4  0a00000e          BEQ      |L3.260|
0000c8  e5913024          LDR      r3,[r1,#0x24]         ;235  ; colormap2
0000cc  e1530000          CMP      r3,r0                 ;235
0000d0  05920024          LDREQ    r0,[r2,#0x24]         ;236  ; colormap
0000d4  0a00000a          BEQ      |L3.260|
0000d8  e5913028          LDR      r3,[r1,#0x28]         ;237  ; colormap2
0000dc  e1530000          CMP      r3,r0                 ;237
0000e0  05920028          LDREQ    r0,[r2,#0x28]         ;238  ; colormap
0000e4  0a000006          BEQ      |L3.260|
0000e8  e591302c          LDR      r3,[r1,#0x2c]         ;239  ; colormap2
0000ec  e1530000          CMP      r3,r0                 ;239
0000f0  0592002c          LDREQ    r0,[r2,#0x2c]         ;240  ; colormap
0000f4  0a000002          BEQ      |L3.260|
0000f8  e5911030          LDR      r1,[r1,#0x30]         ;241  ; colormap2
0000fc  e1510000          CMP      r1,r0                 ;241
000100  05920030          LDREQ    r0,[r2,#0x30]         ;242  ; colormap
                  |L3.260|
000104  e7922107          LDR      r2,[r2,r7,LSL #2]     ;243
000108  e3550000          CMP      r5,#0                 ;244
00010c  10200002          EORNE    r0,r0,r2              ;245
000110  01a00002          MOVEQ    r0,r2                 ;247
000114  ebfffffe          BL       GUI_SetColor
000118  e1a01004          MOV      r1,r4                 ;249
00011c  e1a00006          MOV      r0,r6                 ;249
000120  e8bd41f0          POP      {r4-r8,lr}            ;249
000124  eafffffe          B        GUI_DrawPixel
;;;255    
                          ENDP

                  |L3.296|
                          DCD      ||.bss||+0x34

                          AREA ||i.put_cross||, CODE, READONLY, ALIGN=2

                  put_cross PROC
;;;61     
;;;62     void put_cross(int x, int y, unsigned colidx)
000000  e92d40f8          PUSH     {r3-r7,lr}
;;;63     {
000004  e1a06002          MOV      r6,r2
;;;64         line (x - 10, y, x - 2, y, colidx);
000008  e58d2000          STR      r2,[sp,#0]
00000c  e1a05000          MOV      r5,r0                 ;63
000010  e2402002          SUB      r2,r0,#2
000014  e1a04001          MOV      r4,r1                 ;63
000018  e1a03001          MOV      r3,r1
00001c  e240000a          SUB      r0,r0,#0xa
000020  ebfffffe          BL       line
;;;65         line (x + 2, y, x + 10, y, colidx);
000024  e1a03004          MOV      r3,r4
000028  e285200a          ADD      r2,r5,#0xa
00002c  e1a01003          MOV      r1,r3
000030  e2850002          ADD      r0,r5,#2
000034  e58d6000          STR      r6,[sp,#0]
000038  ebfffffe          BL       line
;;;66         line (x, y - 10, x, y - 2, colidx);
00003c  e1a02005          MOV      r2,r5
000040  e2443002          SUB      r3,r4,#2
000044  e244100a          SUB      r1,r4,#0xa
000048  e1a00002          MOV      r0,r2
00004c  e58d6000          STR      r6,[sp,#0]
000050  ebfffffe          BL       line
;;;67         line (x, y + 2, x, y + 10, colidx);
000054  e1a02005          MOV      r2,r5
000058  e284300a          ADD      r3,r4,#0xa
00005c  e2841002          ADD      r1,r4,#2
000060  e1a00002          MOV      r0,r2
000064  e58d6000          STR      r6,[sp,#0]
000068  ebfffffe          BL       line
00006c  e2866001          ADD      r6,r6,#1
;;;68     
;;;69     #if 1
;;;70         line (x - 6, y - 9, x - 9, y - 9, colidx + 1);
000070  e2443009          SUB      r3,r4,#9
000074  e2452009          SUB      r2,r5,#9
000078  e1a01003          MOV      r1,r3
00007c  e2450006          SUB      r0,r5,#6
000080  e58d6000          STR      r6,[sp,#0]
000084  ebfffffe          BL       line
;;;71         line (x - 9, y - 8, x - 9, y - 6, colidx + 1);
000088  e2452009          SUB      r2,r5,#9
00008c  e2443006          SUB      r3,r4,#6
000090  e2441008          SUB      r1,r4,#8
000094  e1a00002          MOV      r0,r2
000098  e58d6000          STR      r6,[sp,#0]
00009c  ebfffffe          BL       line
;;;72         line (x - 9, y + 6, x - 9, y + 9, colidx + 1);
0000a0  e2452009          SUB      r2,r5,#9
0000a4  e2843009          ADD      r3,r4,#9
0000a8  e2841006          ADD      r1,r4,#6
0000ac  e1a00002          MOV      r0,r2
0000b0  e58d6000          STR      r6,[sp,#0]
0000b4  ebfffffe          BL       line
;;;73         line (x - 8, y + 9, x - 6, y + 9, colidx + 1);
0000b8  e2843009          ADD      r3,r4,#9
0000bc  e2452006          SUB      r2,r5,#6
0000c0  e1a01003          MOV      r1,r3
0000c4  e2450008          SUB      r0,r5,#8
0000c8  e58d6000          STR      r6,[sp,#0]
0000cc  ebfffffe          BL       line
;;;74         line (x + 6, y + 9, x + 9, y + 9, colidx + 1);
0000d0  e2843009          ADD      r3,r4,#9
0000d4  e2852009          ADD      r2,r5,#9
0000d8  e1a01003          MOV      r1,r3
0000dc  e2850006          ADD      r0,r5,#6
0000e0  e58d6000          STR      r6,[sp,#0]
0000e4  ebfffffe          BL       line
;;;75         line (x + 9, y + 8, x + 9, y + 6, colidx + 1);
0000e8  e2852009          ADD      r2,r5,#9
0000ec  e2843006          ADD      r3,r4,#6
0000f0  e2841008          ADD      r1,r4,#8
0000f4  e1a00002          MOV      r0,r2
0000f8  e58d6000          STR      r6,[sp,#0]
0000fc  ebfffffe          BL       line
;;;76         line (x + 9, y - 6, x + 9, y - 9, colidx + 1);
000100  e2852009          ADD      r2,r5,#9
000104  e2443009          SUB      r3,r4,#9
000108  e2441006          SUB      r1,r4,#6
00010c  e1a00002          MOV      r0,r2
000110  e58d6000          STR      r6,[sp,#0]
000114  ebfffffe          BL       line
;;;77         line (x + 8, y - 9, x + 6, y - 9, colidx + 1);
000118  e2443009          SUB      r3,r4,#9
00011c  e2852006          ADD      r2,r5,#6
000120  e1a01003          MOV      r1,r3
000124  e2850008          ADD      r0,r5,#8
000128  e58d6000          STR      r6,[sp,#0]
00012c  ebfffffe          BL       line
;;;78     #else
;;;79         line (x - 7, y - 7, x - 4, y - 4, colidx + 1);
;;;80         line (x - 7, y + 7, x - 4, y + 4, colidx + 1);
;;;81         line (x + 4, y - 4, x + 7, y - 7, colidx + 1);
;;;82         line (x + 4, y + 4, x + 7, y + 7, colidx + 1);
;;;83     #endif
;;;84     }
000130  e8bd80f8          POP      {r3-r7,pc}
;;;85     #if 0
                          ENDP


                          AREA ||i.rect||, CODE, READONLY, ALIGN=2

                  rect PROC
;;;308    #if 1
;;;309    void rect (int x1, int y1, int x2, int y2, unsigned colidx)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;310    {
;;;311        line (x1, y1, x2, y1, colidx);
000004  e59d4020          LDR      r4,[sp,#0x20]
000008  e1a07003          MOV      r7,r3                 ;310
00000c  e1a08002          MOV      r8,r2                 ;310
000010  e1a06001          MOV      r6,r1                 ;310
000014  e1a05000          MOV      r5,r0                 ;310
000018  e1a03001          MOV      r3,r1
00001c  e58d4000          STR      r4,[sp,#0]
000020  ebfffffe          BL       line
;;;312        line (x2, y1, x2, y2, colidx);
000024  e1a02008          MOV      r2,r8
000028  e1a03007          MOV      r3,r7
00002c  e1a01006          MOV      r1,r6
000030  e1a00002          MOV      r0,r2
000034  e58d4000          STR      r4,[sp,#0]
000038  ebfffffe          BL       line
;;;313        line (x2, y2, x1, y2, colidx);
00003c  e1a03007          MOV      r3,r7
000040  e1a02005          MOV      r2,r5
000044  e1a01003          MOV      r1,r3
000048  e1a00008          MOV      r0,r8
00004c  e58d4000          STR      r4,[sp,#0]
000050  ebfffffe          BL       line
;;;314        line (x1, y2, x1, y1, colidx);
000054  e1a02005          MOV      r2,r5
000058  e1a03006          MOV      r3,r6
00005c  e1a01007          MOV      r1,r7
000060  e1a00002          MOV      r0,r2
000064  e58d4000          STR      r4,[sp,#0]
000068  ebfffffe          BL       line
;;;315    }
00006c  e8bd83f8          POP      {r3-r9,pc}
;;;316    
                          ENDP


                          AREA ||i.setcolor||, CODE, READONLY, ALIGN=2

                  setcolor PROC
;;;112    #endif
;;;113    void setcolor(unsigned colidx, unsigned value)
000000  e92d4010          PUSH     {r4,lr}
;;;114    {
000004  e1a04000          MOV      r4,r0
;;;115        unsigned res;
;;;116        //unsigned short red, green, blue;
;;;117    //  struct fb_cmap cmap;
;;;118    
;;;119    #ifdef DEBUG
;;;120        if (colidx > 255)
;;;121        {
;;;122            fprintf (stderr, "WARNING: color index = %u, must be <256\n",
;;;123                     colidx);
;;;124            return;
;;;125        }
;;;126    #endif
;;;127    
;;;128        switch (bytes_per_pixel)
;;;129        {
;;;130        default:
;;;131        case 1:
;;;132    #if 0
;;;133            res = colidx;
;;;134            red = (value >> 8) & 0xff00;
;;;135            green = value & 0xff00;
;;;136            blue = (value << 8) & 0xff00;
;;;137            cmap.start = colidx;
;;;138            cmap.len = 1;
;;;139            cmap.red = &red;
;;;140            cmap.green = &green;
;;;141            cmap.blue = &blue;
;;;142            cmap.transp = NULL;
;;;143    #endif
;;;144            break;
;;;145        case 2:
;;;146    #if 0
;;;147            red = (value >> 16) & 0xff;
;;;148            green = (value >> 8) & 0xff;
;;;149            blue = value & 0xff;
;;;150            res = ((red >> (8 - red_length)) << red_offset) |
;;;151                  ((green >> (8 - green_length)) << green_offset) |
;;;152                  ((blue >> (8 - blue_length)) << blue_offset);
;;;153    #endif
;;;154        case 4:
;;;155            res = value;
;;;156        }
;;;157        colormap [colidx] = value;
000008  e59f0040          LDR      r0,|L6.80|
00000c  e7801104          STR      r1,[r0,r4,LSL #2]
;;;158        GUI_SetColor(value);
000010  e1a00001          MOV      r0,r1
000014  ebfffffe          BL       GUI_SetColor
;;;159        GUI_DrawPixel(0, 0);
000018  e3a01000          MOV      r1,#0
00001c  e1a00001          MOV      r0,r1
000020  ebfffffe          BL       GUI_DrawPixel
;;;160        res = GUI_GetPixelIndex(0, 0);
000024  e3a01000          MOV      r1,#0
000028  e1a00001          MOV      r0,r1
00002c  ebfffffe          BL       GUI_GetPixelIndex
;;;161        colormap2[colidx] = res;
000030  e59f101c          LDR      r1,|L6.84|
000034  e7810104          STR      r0,[r1,r4,LSL #2]
;;;162        GUI_SetColor(0x00);
000038  e3a00000          MOV      r0,#0
00003c  ebfffffe          BL       GUI_SetColor
;;;163        GUI_DrawPixel(0, 0);
000040  e8bd4010          POP      {r4,lr}
000044  e3a01000          MOV      r1,#0
000048  e1a00001          MOV      r0,r1
00004c  eafffffe          B        GUI_DrawPixel
;;;164    }
;;;165    #if 0
                          ENDP

                  |L6.80|
                          DCD      ||.bss||
                  |L6.84|
                          DCD      ||.bss||+0x34

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  colormap
                          %        52
                  colormap2
                          %        52

                          AREA ||.data||, DATA, ALIGN=2

                  bytes_per_pixel
                          DCD      0x00000002
                  xres
                          DCD      0x00000320
                  yres
                          DCD      0x000001e0

                          AREA ||area_number.11||, DATA, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.data||
                  red_length
                          DCD      0x00000005

                          AREA ||area_number.12||, DATA, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.data||
                  green_length
                          DCD      0x00000006

                          AREA ||area_number.13||, DATA, ALIGN=2

                          EXPORTAS ||area_number.13||, ||.data||
                  blue_length
                          DCD      0x00000005

                          AREA ||area_number.14||, DATA, ALIGN=2

                          EXPORTAS ||area_number.14||, ||.data||
                  red_offset
                          DCD      0x0000000b

                          AREA ||area_number.15||, DATA, ALIGN=2

                          EXPORTAS ||area_number.15||, ||.data||
                  green_offset
                          DCD      0x00000005

                          AREA ||area_number.16||, DATA, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.data||
                  blue_offset
                          DCD      0x00000000
