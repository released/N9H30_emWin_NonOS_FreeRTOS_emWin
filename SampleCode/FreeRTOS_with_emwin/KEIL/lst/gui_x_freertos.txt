; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\gui_x_freertos.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\gui_x_freertos.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\gui_x_freertos.crf ..\Application\GUI_X_FreeRTOS.c]
                          ARM

                          AREA ||i.GUI_X_Delay||, CODE, READONLY, ALIGN=2

                  GUI_X_Delay PROC
;;;79     
;;;80     void GUI_X_Delay(int Period) {
000000  eafffffe          B        vTaskDelay
;;;81       vTaskDelay(Period / portTICK_PERIOD_MS);
;;;82     }
;;;83     
                          ENDP


                          AREA ||i.GUI_X_ErrorOut||, CODE, READONLY, ALIGN=2

                  GUI_X_ErrorOut PROC
;;;130    void GUI_X_Warn    (const char *s) { /*printf(s);*/ }
;;;131    void GUI_X_ErrorOut(const char *s) { /*printf(s);*/ }
000000  e12fff1e          BX       lr
;;;132    
                          ENDP


                          AREA ||i.GUI_X_ExecIdle||, CODE, READONLY, ALIGN=2

                  GUI_X_ExecIdle PROC
;;;88     */
;;;89     void GUI_X_ExecIdle(void) {
000000  e3a00001          MOV      r0,#1
;;;90       vTaskDelay(1 / portTICK_PERIOD_MS);
000004  eafffffe          B        vTaskDelay
;;;91     }
;;;92     
                          ENDP


                          AREA ||i.GUI_X_GetTaskId||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTaskId PROC
;;;112    void GUI_X_Lock(void)      { xSemaphoreTake(_Semaphore, portMAX_DELAY);  }
;;;113    U32  GUI_X_GetTaskId(void) { return (U32)xTaskGetCurrentTaskHandle(); }
000000  eafffffe          B        xTaskGetCurrentTaskHandle
;;;114    
                          ENDP


                          AREA ||i.GUI_X_GetTime||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTime PROC
;;;75     
;;;76     int GUI_X_GetTime(void) {
000000  eafffffe          B        xTaskGetTickCount
;;;77       return xTaskGetTickCount() * portTICK_PERIOD_MS;
;;;78     }
;;;79     
                          ENDP


                          AREA ||i.GUI_X_Init||, CODE, READONLY, ALIGN=2

                  GUI_X_Init PROC
;;;142    
;;;143    void GUI_X_Init(void) {
000000  e12fff1e          BX       lr
;;;144    }
;;;145    
                          ENDP


                          AREA ||i.GUI_X_InitOS||, CODE, READONLY, ALIGN=2

                  GUI_X_InitOS PROC
;;;109    */
;;;110    void GUI_X_InitOS(void)    { _Semaphore = xSemaphoreCreateMutex(); }
000000  e92d4010          PUSH     {r4,lr}
000004  e3a00001          MOV      r0,#1
000008  ebfffffe          BL       xQueueCreateMutex
00000c  e59f1004          LDR      r1,|L7.24|
000010  e5810000          STR      r0,[r1,#0]  ; _Semaphore
000014  e8bd8010          POP      {r4,pc}
;;;111    void GUI_X_Unlock(void)    { xSemaphoreGive(_Semaphore); }
                          ENDP

                  |L7.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Lock||, CODE, READONLY, ALIGN=2

                  GUI_X_Lock PROC
;;;111    void GUI_X_Unlock(void)    { xSemaphoreGive(_Semaphore); }
;;;112    void GUI_X_Lock(void)      { xSemaphoreTake(_Semaphore, portMAX_DELAY);  }
000000  e59f0010          LDR      r0,|L8.24|
000004  e3a03000          MOV      r3,#0
000008  e5900000          LDR      r0,[r0,#0]  ; _Semaphore
00000c  e3e02000          MVN      r2,#0
000010  e1a01003          MOV      r1,r3
000014  eafffffe          B        xQueueGenericReceive
;;;113    U32  GUI_X_GetTaskId(void) { return (U32)xTaskGetCurrentTaskHandle(); }
                          ENDP

                  |L8.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Log||, CODE, READONLY, ALIGN=2

                  GUI_X_Log PROC
;;;128    #define OS_SendString(s) GUI_USE_PARA(s)
;;;129    void GUI_X_Log     (const char *s) { /*printf(s);*/ }
000000  e12fff1e          BX       lr
;;;130    void GUI_X_Warn    (const char *s) { /*printf(s);*/ }
                          ENDP


                          AREA ||i.GUI_X_Unlock||, CODE, READONLY, ALIGN=2

                  GUI_X_Unlock PROC
;;;110    void GUI_X_InitOS(void)    { _Semaphore = xSemaphoreCreateMutex(); }
;;;111    void GUI_X_Unlock(void)    { xSemaphoreGive(_Semaphore); }
000000  e59f0010          LDR      r0,|L10.24|
000004  e3a03000          MOV      r3,#0
000008  e5900000          LDR      r0,[r0,#0]  ; _Semaphore
00000c  e1a02003          MOV      r2,r3
000010  e1a01003          MOV      r1,r3
000014  eafffffe          B        xQueueGenericSend
;;;112    void GUI_X_Lock(void)      { xSemaphoreTake(_Semaphore, portMAX_DELAY);  }
                          ENDP

                  |L10.24|
                          DCD      ||.data||

                          AREA ||i.GUI_X_Warn||, CODE, READONLY, ALIGN=2

                  GUI_X_Warn PROC
;;;129    void GUI_X_Log     (const char *s) { /*printf(s);*/ }
;;;130    void GUI_X_Warn    (const char *s) { /*printf(s);*/ }
000000  e12fff1e          BX       lr
;;;131    void GUI_X_ErrorOut(const char *s) { /*printf(s);*/ }
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  _Semaphore
                          DCD      0x00000000
