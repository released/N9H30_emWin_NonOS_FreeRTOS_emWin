; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\queue.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\queue.d --cpu=ARM926EJ-S --apcs=interwork --diag_suppress=9931 -I..\..\..\Driver\Source -I..\..\..\Driver\Include -I..\..\..\ThirdParty\FATFS\src -I..\..\..\ThirdParty\emWin\Config -I..\..\..\ThirdParty\emWin\Include -I..\..\FreeRTOS_with_emwin -I..\tslib -I..\Application -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\portable\RVDS\ARM9_N9H30 -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\include -I..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Demo\Common\include -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Toshiba -D__UVISION_VERSION=526 -D_PANEL_E50A2V1_16BPP_ --omf_browse=.\obj\queue.crf ..\..\..\ThirdParty\FreeRTOSV9.0.0\FreeRTOS\Source\queue.c]
                          ARM

                          AREA ||i.prvCopyDataFromQueue||, CODE, READONLY, ALIGN=2

                  prvCopyDataFromQueue PROC
;;;1775   
;;;1776   static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
000000  e5902040          LDR      r2,[r0,#0x40]
;;;1777   {
000004  e1a03001          MOV      r3,r1
;;;1778   	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
000008  e3520000          CMP      r2,#0
;;;1779   	{
;;;1780   		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
;;;1781   		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
;;;1782   		{
;;;1783   			pxQueue->u.pcReadFrom = pxQueue->pcHead;
;;;1784   		}
;;;1785   		else
;;;1786   		{
;;;1787   			mtCOVERAGE_TEST_MARKER();
;;;1788   		}
;;;1789   		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
;;;1790   	}
;;;1791   }
00000c  012fff1e          BXEQ     lr
000010  e590100c          LDR      r1,[r0,#0xc]          ;1780
000014  e0811002          ADD      r1,r1,r2              ;1780
000018  e580100c          STR      r1,[r0,#0xc]          ;1781
00001c  e590c004          LDR      r12,[r0,#4]           ;1781
000020  e151000c          CMP      r1,r12                ;1781
000024  25901000          LDRCS    r1,[r0,#0]            ;1783
000028  2580100c          STRCS    r1,[r0,#0xc]          ;1783
00002c  e1a00003          MOV      r0,r3                 ;1789
000030  eafffffe          B        __aeabi_memcpy
;;;1792   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCopyDataToQueue||, CODE, READONLY, ALIGN=2

                  prvCopyDataToQueue PROC
;;;1696   
;;;1697   static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1698   {
;;;1699   BaseType_t xReturn = pdFALSE;
;;;1700   UBaseType_t uxMessagesWaiting;
;;;1701   
;;;1702   	/* This function is called from a critical section. */
;;;1703   
;;;1704   	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000004  e5905038          LDR      r5,[r0,#0x38]
000008  e1a07002          MOV      r7,r2                 ;1698
00000c  e1a04000          MOV      r4,r0                 ;1698
000010  e3a06000          MOV      r6,#0                 ;1699
;;;1705   
;;;1706   	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
000014  e5902040          LDR      r2,[r0,#0x40]
000018  e3520000          CMP      r2,#0
00001c  0a00000f          BEQ      |L2.96|
;;;1707   	{
;;;1708   		#if ( configUSE_MUTEXES == 1 )
;;;1709   		{
;;;1710   			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1711   			{
;;;1712   				/* The mutex is no longer being held. */
;;;1713   				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
;;;1714   				pxQueue->pxMutexHolder = NULL;
;;;1715   			}
;;;1716   			else
;;;1717   			{
;;;1718   				mtCOVERAGE_TEST_MARKER();
;;;1719   			}
;;;1720   		}
;;;1721   		#endif /* configUSE_MUTEXES */
;;;1722   	}
;;;1723   	else if( xPosition == queueSEND_TO_BACK )
000020  e3570000          CMP      r7,#0
000024  0a000016          BEQ      |L2.132|
;;;1724   	{
;;;1725   		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
;;;1726   		pxQueue->pcWriteTo += pxQueue->uxItemSize;
;;;1727   		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
;;;1728   		{
;;;1729   			pxQueue->pcWriteTo = pxQueue->pcHead;
;;;1730   		}
;;;1731   		else
;;;1732   		{
;;;1733   			mtCOVERAGE_TEST_MARKER();
;;;1734   		}
;;;1735   	}
;;;1736   	else
;;;1737   	{
;;;1738   		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000028  e594000c          LDR      r0,[r4,#0xc]
00002c  ebfffffe          BL       __aeabi_memcpy
;;;1739   		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
000030  e594000c          LDR      r0,[r4,#0xc]
000034  e5941040          LDR      r1,[r4,#0x40]
000038  e0400001          SUB      r0,r0,r1
;;;1740   		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
00003c  e584000c          STR      r0,[r4,#0xc]
000040  e5942000          LDR      r2,[r4,#0]
000044  e1500002          CMP      r0,r2
;;;1741   		{
;;;1742   			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
000048  35940004          LDRCC    r0,[r4,#4]
00004c  30400001          SUBCC    r0,r0,r1
000050  3584000c          STRCC    r0,[r4,#0xc]
;;;1743   		}
;;;1744   		else
;;;1745   		{
;;;1746   			mtCOVERAGE_TEST_MARKER();
;;;1747   		}
;;;1748   
;;;1749   		if( xPosition == queueOVERWRITE )
000054  e3570002          CMP      r7,#2
000058  1a000016          BNE      |L2.184|
00005c  ea000013          B        |L2.176|
                  |L2.96|
000060  e5940000          LDR      r0,[r4,#0]            ;1710
000064  e3500000          CMP      r0,#0                 ;1710
000068  1a000012          BNE      |L2.184|
00006c  e5940004          LDR      r0,[r4,#4]            ;1713
000070  ebfffffe          BL       xTaskPriorityDisinherit
000074  e1a06000          MOV      r6,r0                 ;1713
000078  e3a00000          MOV      r0,#0                 ;1714
00007c  e5840004          STR      r0,[r4,#4]            ;1714
000080  ea00000c          B        |L2.184|
                  |L2.132|
000084  e5940008          LDR      r0,[r4,#8]            ;1725
000088  ebfffffe          BL       __aeabi_memcpy
00008c  e5940008          LDR      r0,[r4,#8]            ;1726
000090  e5941040          LDR      r1,[r4,#0x40]         ;1726
000094  e0800001          ADD      r0,r0,r1              ;1726
000098  e5840008          STR      r0,[r4,#8]            ;1727
00009c  e5941004          LDR      r1,[r4,#4]            ;1727
0000a0  e1500001          CMP      r0,r1                 ;1727
0000a4  25940000          LDRCS    r0,[r4,#0]            ;1729
0000a8  25840008          STRCS    r0,[r4,#8]            ;1729
0000ac  ea000001          B        |L2.184|
                  |L2.176|
;;;1750   		{
;;;1751   			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
0000b0  e3550000          CMP      r5,#0
0000b4  12455001          SUBNE    r5,r5,#1
                  |L2.184|
;;;1752   			{
;;;1753   				/* An item is not being added but overwritten, so subtract
;;;1754   				one from the recorded number of items in the queue so when
;;;1755   				one is added again below the number of recorded items remains
;;;1756   				correct. */
;;;1757   				--uxMessagesWaiting;
;;;1758   			}
;;;1759   			else
;;;1760   			{
;;;1761   				mtCOVERAGE_TEST_MARKER();
;;;1762   			}
;;;1763   		}
;;;1764   		else
;;;1765   		{
;;;1766   			mtCOVERAGE_TEST_MARKER();
;;;1767   		}
;;;1768   	}
;;;1769   
;;;1770   	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
0000b8  e2850001          ADD      r0,r5,#1
0000bc  e5840038          STR      r0,[r4,#0x38]
;;;1771   
;;;1772   	return xReturn;
0000c0  e1a00006          MOV      r0,r6
;;;1773   }
0000c4  e8bd81f0          POP      {r4-r8,pc}
;;;1774   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvIsQueueEmpty||, CODE, READONLY, ALIGN=2

                  prvIsQueueEmpty PROC
;;;1913   
;;;1914   static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
000000  e92d4010          PUSH     {r4,lr}
;;;1915   {
000004  e1a04000          MOV      r4,r0
;;;1916   BaseType_t xReturn;
;;;1917   
;;;1918   	taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1919   	{
;;;1920   		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
00000c  e5940038          LDR      r0,[r4,#0x38]
000010  e3500000          CMP      r0,#0
;;;1921   		{
;;;1922   			xReturn = pdTRUE;
000014  03a04001          MOVEQ    r4,#1
;;;1923   		}
;;;1924   		else
;;;1925   		{
;;;1926   			xReturn = pdFALSE;
000018  13a04000          MOVNE    r4,#0
;;;1927   		}
;;;1928   	}
;;;1929   	taskEXIT_CRITICAL();
00001c  ebfffffe          BL       vPortExitCritical
;;;1930   
;;;1931   	return xReturn;
000020  e1a00004          MOV      r0,r4
;;;1932   }
000024  e8bd8010          POP      {r4,pc}
;;;1933   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvUnlockQueue||, CODE, READONLY, ALIGN=2

                  prvUnlockQueue PROC
;;;1793   
;;;1794   static void prvUnlockQueue( Queue_t * const pxQueue )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1795   {
000004  e1a04000          MOV      r4,r0
;;;1796   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
;;;1797   
;;;1798   	/* The lock counts contains the number of extra data items placed or
;;;1799   	removed from the queue while the queue was locked.  When a queue is
;;;1800   	locked items can be added or removed, but the event lists cannot be
;;;1801   	updated. */
;;;1802   	taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1803   	{
;;;1804   		int8_t cTxLock = pxQueue->cTxLock;
00000c  e1d454d5          LDRSB    r5,[r4,#0x45]
;;;1805   
;;;1806   		/* See if data was added to the queue while it was locked. */
;;;1807   		while( cTxLock > queueLOCKED_UNMODIFIED )
000010  ea000009          B        |L4.60|
                  |L4.20|
;;;1808   		{
;;;1809   			/* Data was posted while the queue was locked.  Are any tasks
;;;1810   			blocked waiting for data to become available? */
;;;1811   			#if ( configUSE_QUEUE_SETS == 1 )
;;;1812   			{
;;;1813   				if( pxQueue->pxQueueSetContainer != NULL )
;;;1814   				{
;;;1815   					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
;;;1816   					{
;;;1817   						/* The queue is a member of a queue set, and posting to
;;;1818   						the queue set caused a higher priority task to unblock.
;;;1819   						A context switch is required. */
;;;1820   						vTaskMissedYield();
;;;1821   					}
;;;1822   					else
;;;1823   					{
;;;1824   						mtCOVERAGE_TEST_MARKER();
;;;1825   					}
;;;1826   				}
;;;1827   				else
;;;1828   				{
;;;1829   					/* Tasks that are removed from the event list will get
;;;1830   					added to the pending ready list as the scheduler is still
;;;1831   					suspended. */
;;;1832   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1833   					{
;;;1834   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1835   						{
;;;1836   							/* The task waiting has a higher priority so record that a
;;;1837   							context	switch is required. */
;;;1838   							vTaskMissedYield();
;;;1839   						}
;;;1840   						else
;;;1841   						{
;;;1842   							mtCOVERAGE_TEST_MARKER();
;;;1843   						}
;;;1844   					}
;;;1845   					else
;;;1846   					{
;;;1847   						break;
;;;1848   					}
;;;1849   				}
;;;1850   			}
;;;1851   			#else /* configUSE_QUEUE_SETS */
;;;1852   			{
;;;1853   				/* Tasks that are removed from the event list will get added to
;;;1854   				the pending ready list as the scheduler is still suspended. */
;;;1855   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
000014  e5940024          LDR      r0,[r4,#0x24]
000018  e3500000          CMP      r0,#0
00001c  0a000008          BEQ      |L4.68|
;;;1856   				{
;;;1857   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
000020  e2840024          ADD      r0,r4,#0x24
000024  ebfffffe          BL       xTaskRemoveFromEventList
000028  e3500000          CMP      r0,#0
;;;1858   					{
;;;1859   						/* The task waiting has a higher priority so record that
;;;1860   						a context switch is required. */
;;;1861   						vTaskMissedYield();
00002c  1bfffffe          BLNE     vTaskMissedYield
;;;1862   					}
;;;1863   					else
;;;1864   					{
;;;1865   						mtCOVERAGE_TEST_MARKER();
;;;1866   					}
;;;1867   				}
;;;1868   				else
;;;1869   				{
;;;1870   					break;
;;;1871   				}
;;;1872   			}
;;;1873   			#endif /* configUSE_QUEUE_SETS */
;;;1874   
;;;1875   			--cTxLock;
000030  e2450001          SUB      r0,r5,#1
000034  e1a05c00          LSL      r5,r0,#24
000038  e1a05c45          ASR      r5,r5,#24
                  |L4.60|
00003c  e3550000          CMP      r5,#0                 ;1807
000040  cafffff3          BGT      |L4.20|
                  |L4.68|
;;;1876   		}
;;;1877   
;;;1878   		pxQueue->cTxLock = queueUNLOCKED;
000044  e3e06000          MVN      r6,#0
000048  e5c46045          STRB     r6,[r4,#0x45]
;;;1879   	}
;;;1880   	taskEXIT_CRITICAL();
00004c  ebfffffe          BL       vPortExitCritical
;;;1881   
;;;1882   	/* Do the same for the Rx lock. */
;;;1883   	taskENTER_CRITICAL();
000050  ebfffffe          BL       vPortEnterCritical
;;;1884   	{
;;;1885   		int8_t cRxLock = pxQueue->cRxLock;
000054  e1d454d4          LDRSB    r5,[r4,#0x44]
;;;1886   
;;;1887   		while( cRxLock > queueLOCKED_UNMODIFIED )
000058  ea000009          B        |L4.132|
                  |L4.92|
;;;1888   		{
;;;1889   			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
00005c  e5940010          LDR      r0,[r4,#0x10]
000060  e3500000          CMP      r0,#0
000064  0a000008          BEQ      |L4.140|
;;;1890   			{
;;;1891   				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
000068  e2840010          ADD      r0,r4,#0x10
00006c  ebfffffe          BL       xTaskRemoveFromEventList
000070  e3500000          CMP      r0,#0
;;;1892   				{
;;;1893   					vTaskMissedYield();
000074  1bfffffe          BLNE     vTaskMissedYield
;;;1894   				}
;;;1895   				else
;;;1896   				{
;;;1897   					mtCOVERAGE_TEST_MARKER();
;;;1898   				}
;;;1899   
;;;1900   				--cRxLock;
000078  e2450001          SUB      r0,r5,#1
00007c  e1a05c00          LSL      r5,r0,#24
000080  e1a05c45          ASR      r5,r5,#24
                  |L4.132|
000084  e3550000          CMP      r5,#0                 ;1887
000088  cafffff3          BGT      |L4.92|
                  |L4.140|
;;;1901   			}
;;;1902   			else
;;;1903   			{
;;;1904   				break;
;;;1905   			}
;;;1906   		}
;;;1907   
;;;1908   		pxQueue->cRxLock = queueUNLOCKED;
00008c  e5c46044          STRB     r6,[r4,#0x44]
;;;1909   	}
;;;1910   	taskEXIT_CRITICAL();
000090  e8bd4070          POP      {r4-r6,lr}
000094  eafffffe          B        vPortExitCritical
;;;1911   }
;;;1912   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.ucQueueGetQueueType||, CODE, READONLY, ALIGN=2

                  ucQueueGetQueueType PROC
;;;1688   
;;;1689   	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
000000  e5d0004c          LDRB     r0,[r0,#0x4c]
;;;1690   	{
;;;1691   		return ( ( Queue_t * ) xQueue )->ucQueueType;
;;;1692   	}
000004  e12fff1e          BX       lr
;;;1693   
                          ENDP


                          AREA ||i.uxQueueGetQueueNumber||, CODE, READONLY, ALIGN=2

                  uxQueueGetQueueNumber PROC
;;;1668   
;;;1669   	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
000000  e5900048          LDR      r0,[r0,#0x48]
;;;1670   	{
;;;1671   		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
;;;1672   	}
000004  e12fff1e          BX       lr
;;;1673   
                          ENDP


                          AREA ||i.uxQueueMessagesWaiting||, CODE, READONLY, ALIGN=2

                  uxQueueMessagesWaiting PROC
;;;1578   
;;;1579   UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
000000  e92d4010          PUSH     {r4,lr}
;;;1580   {
000004  e1a04000          MOV      r4,r0
;;;1581   UBaseType_t uxReturn;
;;;1582   
;;;1583   	configASSERT( xQueue );
;;;1584   
;;;1585   	taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1586   	{
;;;1587   		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
00000c  e5944038          LDR      r4,[r4,#0x38]
;;;1588   	}
;;;1589   	taskEXIT_CRITICAL();
000010  ebfffffe          BL       vPortExitCritical
;;;1590   
;;;1591   	return uxReturn;
000014  e1a00004          MOV      r0,r4
;;;1592   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000018  e8bd8010          POP      {r4,pc}
;;;1593   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueMessagesWaitingFromISR||, CODE, READONLY, ALIGN=2

                  uxQueueMessagesWaitingFromISR PROC
;;;1612   
;;;1613   UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
000000  e5900038          LDR      r0,[r0,#0x38]
;;;1614   {
;;;1615   UBaseType_t uxReturn;
;;;1616   
;;;1617   	configASSERT( xQueue );
;;;1618   
;;;1619   	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
;;;1620   
;;;1621   	return uxReturn;
;;;1622   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000004  e12fff1e          BX       lr
;;;1623   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.uxQueueSpacesAvailable||, CODE, READONLY, ALIGN=2

                  uxQueueSpacesAvailable PROC
;;;1594   
;;;1595   UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
000000  e92d4010          PUSH     {r4,lr}
;;;1596   {
000004  e1a04000          MOV      r4,r0
;;;1597   UBaseType_t uxReturn;
;;;1598   Queue_t *pxQueue;
;;;1599   
;;;1600   	pxQueue = ( Queue_t * ) xQueue;
;;;1601   	configASSERT( pxQueue );
;;;1602   
;;;1603   	taskENTER_CRITICAL();
000008  ebfffffe          BL       vPortEnterCritical
;;;1604   	{
;;;1605   		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
00000c  e5b41038          LDR      r1,[r4,#0x38]!
000010  e5940004          LDR      r0,[r4,#4]
000014  e0404001          SUB      r4,r0,r1
;;;1606   	}
;;;1607   	taskEXIT_CRITICAL();
000018  ebfffffe          BL       vPortExitCritical
;;;1608   
;;;1609   	return uxReturn;
00001c  e1a00004          MOV      r0,r4
;;;1610   } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
000020  e8bd8010          POP      {r4,pc}
;;;1611   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueDelete||, CODE, READONLY, ALIGN=2

                  vQueueDelete PROC
;;;1624   
;;;1625   void vQueueDelete( QueueHandle_t xQueue )
000000  eafffffe          B        vPortFree
;;;1626   {
;;;1627   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1628   
;;;1629   	configASSERT( pxQueue );
;;;1630   	traceQUEUE_DELETE( pxQueue );
;;;1631   
;;;1632   	#if ( configQUEUE_REGISTRY_SIZE > 0 )
;;;1633   	{
;;;1634   		vQueueUnregisterQueue( pxQueue );
;;;1635   	}
;;;1636   	#endif
;;;1637   
;;;1638   	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
;;;1639   	{
;;;1640   		/* The queue can only have been allocated dynamically - free it
;;;1641   		again. */
;;;1642   		vPortFree( pxQueue );
;;;1643   	}
;;;1644   	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
;;;1645   	{
;;;1646   		/* The queue could have been allocated statically or dynamically, so
;;;1647   		check before attempting to free the memory. */
;;;1648   		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
;;;1649   		{
;;;1650   			vPortFree( pxQueue );
;;;1651   		}
;;;1652   		else
;;;1653   		{
;;;1654   			mtCOVERAGE_TEST_MARKER();
;;;1655   		}
;;;1656   	}
;;;1657   	#else
;;;1658   	{
;;;1659   		/* The queue must have been statically allocated, so is not going to be
;;;1660   		deleted.  Avoid compiler warnings about the unused parameter. */
;;;1661   		( void ) pxQueue;
;;;1662   	}
;;;1663   	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
;;;1664   }
;;;1665   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.vQueueSetQueueNumber||, CODE, READONLY, ALIGN=2

                  vQueueSetQueueNumber PROC
;;;1678   
;;;1679   	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
000000  e5801048          STR      r1,[r0,#0x48]
;;;1680   	{
;;;1681   		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
;;;1682   	}
000004  e12fff1e          BX       lr
;;;1683   
                          ENDP


                          AREA ||i.xQueueCreateCountingSemaphore||, CODE, READONLY, ALIGN=2

                  xQueueCreateCountingSemaphore PROC
;;;696    
;;;697    	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
000000  e92d4010          PUSH     {r4,lr}
;;;698    	{
000004  e1a04001          MOV      r4,r1
;;;699    	QueueHandle_t xHandle;
;;;700    
;;;701    		configASSERT( uxMaxCount != 0 );
;;;702    		configASSERT( uxInitialCount <= uxMaxCount );
;;;703    
;;;704    		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
000008  e3a02002          MOV      r2,#2
00000c  e3a01000          MOV      r1,#0
000010  ebfffffe          BL       xQueueGenericCreate
;;;705    
;;;706    		if( xHandle != NULL )
000014  e3500000          CMP      r0,#0
;;;707    		{
;;;708    			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
000018  15804038          STRNE    r4,[r0,#0x38]
;;;709    
;;;710    			traceCREATE_COUNTING_SEMAPHORE();
;;;711    		}
;;;712    		else
;;;713    		{
;;;714    			traceCREATE_COUNTING_SEMAPHORE_FAILED();
;;;715    		}
;;;716    
;;;717    		return xHandle;
;;;718    	}
00001c  e8bd8010          POP      {r4,pc}
;;;719    
                          ENDP


                          AREA ||i.xQueueCreateMutex||, CODE, READONLY, ALIGN=2

                  xQueueCreateMutex PROC
;;;505    
;;;506    	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
000000  e1a02000          MOV      r2,r0
;;;507    	{
000004  e92d4010          PUSH     {r4,lr}
;;;508    	Queue_t *pxNewQueue;
;;;509    	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
;;;510    
;;;511    		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
000008  e3a01000          MOV      r1,#0
00000c  e3a00001          MOV      r0,#1
000010  ebfffffe          BL       xQueueGenericCreate
000014  e2504000          SUBS     r4,r0,#0
000018  0a000006          BEQ      |L13.56|
00001c  e3a01000          MOV      r1,#0
000020  e5801004          STR      r1,[r0,#4]
000024  e5801000          STR      r1,[r0,#0]
000028  e1a03001          MOV      r3,r1
00002c  e1a02001          MOV      r2,r1
000030  e580100c          STR      r1,[r0,#0xc]
000034  ebfffffe          BL       xQueueGenericSend
                  |L13.56|
;;;512    		prvInitialiseMutex( pxNewQueue );
;;;513    
;;;514    		return pxNewQueue;
000038  e1a00004          MOV      r0,r4
;;;515    	}
00003c  e8bd8010          POP      {r4,pc}
;;;516    
                          ENDP


                          AREA ||i.xQueueGenericCreate||, CODE, READONLY, ALIGN=2

                  xQueueGenericCreate PROC
;;;385    
;;;386    	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;387    	{
000004  e1b05001          MOVS     r5,r1
000008  e1a06000          MOV      r6,r0
;;;388    	Queue_t *pxNewQueue;
;;;389    	size_t xQueueSizeInBytes;
;;;390    	uint8_t *pucQueueStorage;
;;;391    
;;;392    		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
;;;393    
;;;394    		if( uxItemSize == ( UBaseType_t ) 0 )
;;;395    		{
;;;396    			/* There is not going to be a queue storage area. */
;;;397    			xQueueSizeInBytes = ( size_t ) 0;
;;;398    		}
;;;399    		else
;;;400    		{
;;;401    			/* Allocate enough space to hold the maximum number of items that
;;;402    			can be in the queue at any time. */
;;;403    			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
00000c  10000596          MULNE    r0,r6,r5
000010  03a00000          MOVEQ    r0,#0                 ;397
000014  e1a07002          MOV      r7,r2                 ;387
000018  e2800050          ADD      r0,r0,#0x50
;;;404    		}
;;;405    
;;;406    		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
00001c  ebfffffe          BL       pvPortMalloc
000020  e1b04000          MOVS     r4,r0
;;;407    
;;;408    		if( pxNewQueue != NULL )
;;;409    		{
;;;410    			/* Jump past the queue structure to find the location of the queue
;;;411    			storage area. */
;;;412    			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
;;;413    
;;;414    			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
;;;415    			{
;;;416    				/* Queues can be created either statically or dynamically, so
;;;417    				note this task was created dynamically in case it is later
;;;418    				deleted. */
;;;419    				pxNewQueue->ucStaticallyAllocated = pdFALSE;
;;;420    			}
;;;421    			#endif /* configSUPPORT_STATIC_ALLOCATION */
;;;422    
;;;423    			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
;;;424    		}
;;;425    
;;;426    		return pxNewQueue;
;;;427    	}
000024  08bd81f0          POPEQ    {r4-r8,pc}
000028  e3550000          CMP      r5,#0
00002c  e2840050          ADD      r0,r4,#0x50           ;412
000030  05844000          STREQ    r4,[r4,#0]            ;412
000034  15840000          STRNE    r0,[r4,#0]            ;412
000038  e5845040          STR      r5,[r4,#0x40]         ;412
00003c  e1a00004          MOV      r0,r4                 ;412
000040  e3a01001          MOV      r1,#1                 ;412
000044  e584603c          STR      r6,[r4,#0x3c]         ;412
000048  ebfffffe          BL       xQueueGenericReset
00004c  e1a00004          MOV      r0,r4                 ;412
000050  e5c4704c          STRB     r7,[r4,#0x4c]         ;412
000054  e8bd81f0          POP      {r4-r8,pc}
;;;428    
                          ENDP


                          AREA ||i.xQueueGenericReceive||, CODE, READONLY, ALIGN=2

                  xQueueGenericReceive PROC
;;;1236   
;;;1237   BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;1238   {
;;;1239   BaseType_t xEntryTimeSet = pdFALSE;
000004  e3a05000          MOV      r5,#0
000008  e24dd00c          SUB      sp,sp,#0xc            ;1238
00000c  e1a08003          MOV      r8,r3                 ;1238
000010  e1a09001          MOV      r9,r1                 ;1238
000014  e1a04000          MOV      r4,r0                 ;1238
000018  e1a07005          MOV      r7,r5
                  |L15.28|
;;;1240   TimeOut_t xTimeOut;
;;;1241   int8_t *pcOriginalReadPosition;
;;;1242   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1243   
;;;1244   	configASSERT( pxQueue );
;;;1245   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1246   	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;1247   	{
;;;1248   		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;1249   	}
;;;1250   	#endif
;;;1251   
;;;1252   	/* This function relaxes the coding standard somewhat to allow return
;;;1253   	statements within the function itself.  This is done in the interest
;;;1254   	of execution time efficiency. */
;;;1255   
;;;1256   	for( ;; )
;;;1257   	{
;;;1258   		taskENTER_CRITICAL();
00001c  ebfffffe          BL       vPortEnterCritical
;;;1259   		{
;;;1260   			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000020  e5946038          LDR      r6,[r4,#0x38]
;;;1261   
;;;1262   			/* Is there data in the queue now?  To be running the calling task
;;;1263   			must be the highest priority task wanting to access the queue. */
;;;1264   			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
000024  e3560000          CMP      r6,#0
000028  0a00001d          BEQ      |L15.164|
;;;1265   			{
;;;1266   				/* Remember the read position in case the queue is only being
;;;1267   				peeked. */
;;;1268   				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1269   
;;;1270   				prvCopyDataFromQueue( pxQueue, pvBuffer );
00002c  e594500c          LDR      r5,[r4,#0xc]
000030  e1a01009          MOV      r1,r9
000034  e1a00004          MOV      r0,r4
000038  ebfffffe          BL       prvCopyDataFromQueue
;;;1271   
;;;1272   				if( xJustPeeking == pdFALSE )
00003c  e3580000          CMP      r8,#0
000040  0a00000b          BEQ      |L15.116|
;;;1273   				{
;;;1274   					traceQUEUE_RECEIVE( pxQueue );
;;;1275   
;;;1276   					/* Actually removing data, not just peeking. */
;;;1277   					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
;;;1278   
;;;1279   					#if ( configUSE_MUTEXES == 1 )
;;;1280   					{
;;;1281   						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1282   						{
;;;1283   							/* Record the information required to implement
;;;1284   							priority inheritance should it become necessary. */
;;;1285   							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
;;;1286   						}
;;;1287   						else
;;;1288   						{
;;;1289   							mtCOVERAGE_TEST_MARKER();
;;;1290   						}
;;;1291   					}
;;;1292   					#endif /* configUSE_MUTEXES */
;;;1293   
;;;1294   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1295   					{
;;;1296   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
;;;1297   						{
;;;1298   							queueYIELD_IF_USING_PREEMPTION();
;;;1299   						}
;;;1300   						else
;;;1301   						{
;;;1302   							mtCOVERAGE_TEST_MARKER();
;;;1303   						}
;;;1304   					}
;;;1305   					else
;;;1306   					{
;;;1307   						mtCOVERAGE_TEST_MARKER();
;;;1308   					}
;;;1309   				}
;;;1310   				else
;;;1311   				{
;;;1312   					traceQUEUE_PEEK( pxQueue );
;;;1313   
;;;1314   					/* The data is not being removed, so reset the read
;;;1315   					pointer. */
;;;1316   					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1317   
;;;1318   					/* The data is being left in the queue, so see if there are
;;;1319   					any other tasks waiting for the data. */
;;;1320   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
000044  e584500c          STR      r5,[r4,#0xc]
000048  e5940024          LDR      r0,[r4,#0x24]
00004c  e3500000          CMP      r0,#0
;;;1321   					{
;;;1322   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
000050  12840024          ADDNE    r0,r4,#0x24
000054  0a000002          BEQ      |L15.100|
                  |L15.88|
000058  ebfffffe          BL       xTaskRemoveFromEventList
00005c  e3500000          CMP      r0,#0
;;;1323   						{
;;;1324   							/* The task waiting has a higher priority than this task. */
;;;1325   							queueYIELD_IF_USING_PREEMPTION();
000060  1bfffffe          BLNE     vPortYield
                  |L15.100|
;;;1326   						}
;;;1327   						else
;;;1328   						{
;;;1329   							mtCOVERAGE_TEST_MARKER();
;;;1330   						}
;;;1331   					}
;;;1332   					else
;;;1333   					{
;;;1334   						mtCOVERAGE_TEST_MARKER();
;;;1335   					}
;;;1336   				}
;;;1337   
;;;1338   				taskEXIT_CRITICAL();
000064  ebfffffe          BL       vPortExitCritical
;;;1339   				return pdPASS;
000068  e3a00001          MOV      r0,#1
                  |L15.108|
00006c  e28dd01c          ADD      sp,sp,#0x1c
;;;1340   			}
;;;1341   			else
;;;1342   			{
;;;1343   				if( xTicksToWait == ( TickType_t ) 0 )
;;;1344   				{
;;;1345   					/* The queue was empty and no block time is specified (or
;;;1346   					the block time has expired) so leave now. */
;;;1347   					taskEXIT_CRITICAL();
;;;1348   					traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1349   					return errQUEUE_EMPTY;
;;;1350   				}
;;;1351   				else if( xEntryTimeSet == pdFALSE )
;;;1352   				{
;;;1353   					/* The queue was empty and a block time was specified so
;;;1354   					configure the timeout structure. */
;;;1355   					vTaskSetTimeOutState( &xTimeOut );
;;;1356   					xEntryTimeSet = pdTRUE;
;;;1357   				}
;;;1358   				else
;;;1359   				{
;;;1360   					/* Entry time was already set. */
;;;1361   					mtCOVERAGE_TEST_MARKER();
;;;1362   				}
;;;1363   			}
;;;1364   		}
;;;1365   		taskEXIT_CRITICAL();
;;;1366   
;;;1367   		/* Interrupts and other tasks can send to and receive from the queue
;;;1368   		now the critical section has been exited. */
;;;1369   
;;;1370   		vTaskSuspendAll();
;;;1371   		prvLockQueue( pxQueue );
;;;1372   
;;;1373   		/* Update the timeout state to see if it has expired yet. */
;;;1374   		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;1375   		{
;;;1376   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1377   			{
;;;1378   				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
;;;1379   
;;;1380   				#if ( configUSE_MUTEXES == 1 )
;;;1381   				{
;;;1382   					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
;;;1383   					{
;;;1384   						taskENTER_CRITICAL();
;;;1385   						{
;;;1386   							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
;;;1387   						}
;;;1388   						taskEXIT_CRITICAL();
;;;1389   					}
;;;1390   					else
;;;1391   					{
;;;1392   						mtCOVERAGE_TEST_MARKER();
;;;1393   					}
;;;1394   				}
;;;1395   				#endif
;;;1396   
;;;1397   				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
;;;1398   				prvUnlockQueue( pxQueue );
;;;1399   				if( xTaskResumeAll() == pdFALSE )
;;;1400   				{
;;;1401   					portYIELD_WITHIN_API();
;;;1402   				}
;;;1403   				else
;;;1404   				{
;;;1405   					mtCOVERAGE_TEST_MARKER();
;;;1406   				}
;;;1407   			}
;;;1408   			else
;;;1409   			{
;;;1410   				/* Try again. */
;;;1411   				prvUnlockQueue( pxQueue );
;;;1412   				( void ) xTaskResumeAll();
;;;1413   			}
;;;1414   		}
;;;1415   		else
;;;1416   		{
;;;1417   			prvUnlockQueue( pxQueue );
;;;1418   			( void ) xTaskResumeAll();
;;;1419   
;;;1420   			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
;;;1421   			{
;;;1422   				traceQUEUE_RECEIVE_FAILED( pxQueue );
;;;1423   				return errQUEUE_EMPTY;
;;;1424   			}
;;;1425   			else
;;;1426   			{
;;;1427   				mtCOVERAGE_TEST_MARKER();
;;;1428   			}
;;;1429   		}
;;;1430   	}
;;;1431   }
000070  e8bd83f0          POP      {r4-r9,pc}
                  |L15.116|
000074  e2460001          SUB      r0,r6,#1              ;1277
000078  e5840038          STR      r0,[r4,#0x38]         ;1277
00007c  e5940000          LDR      r0,[r4,#0]            ;1281
000080  e3500000          CMP      r0,#0                 ;1281
000084  1a000001          BNE      |L15.144|
000088  ebfffffe          BL       pvTaskIncrementMutexHeldCount
00008c  e5840004          STR      r0,[r4,#4]            ;1285
                  |L15.144|
000090  e5940010          LDR      r0,[r4,#0x10]         ;1294
000094  e3500000          CMP      r0,#0                 ;1294
000098  12840010          ADDNE    r0,r4,#0x10           ;1296
00009c  0afffff0          BEQ      |L15.100|
0000a0  eaffffec          B        |L15.88|
                  |L15.164|
0000a4  e59d0014          LDR      r0,[sp,#0x14]         ;1343
0000a8  e3500000          CMP      r0,#0                 ;1343
0000ac  0a000002          BEQ      |L15.188|
0000b0  e3550000          CMP      r5,#0                 ;1351
0000b4  0a000002          BEQ      |L15.196|
0000b8  ea000004          B        |L15.208|
                  |L15.188|
0000bc  ebfffffe          BL       vPortExitCritical
0000c0  ea000018          B        |L15.296|
                  |L15.196|
0000c4  e1a0000d          MOV      r0,sp                 ;1355
0000c8  ebfffffe          BL       vTaskSetTimeOutState
0000cc  e3a05001          MOV      r5,#1                 ;1356
                  |L15.208|
0000d0  ebfffffe          BL       vPortExitCritical
0000d4  ebfffffe          BL       vTaskSuspendAll
0000d8  ebfffffe          BL       vPortEnterCritical
0000dc  e1d404d4          LDRSB    r0,[r4,#0x44]         ;1371
0000e0  e3700001          CMN      r0,#1                 ;1371
0000e4  05c47044          STRBEQ   r7,[r4,#0x44]         ;1371
0000e8  e1d404d5          LDRSB    r0,[r4,#0x45]         ;1371
0000ec  e3700001          CMN      r0,#1                 ;1371
0000f0  05c47045          STRBEQ   r7,[r4,#0x45]         ;1371
0000f4  ebfffffe          BL       vPortExitCritical
0000f8  e28d1014          ADD      r1,sp,#0x14           ;1374
0000fc  e1a0000d          MOV      r0,sp                 ;1374
000100  ebfffffe          BL       xTaskCheckForTimeOut
000104  e3500000          CMP      r0,#0                 ;1374
000108  e1a00004          MOV      r0,r4                 ;1417
00010c  0a000007          BEQ      |L15.304|
000110  ebfffffe          BL       prvUnlockQueue
000114  ebfffffe          BL       xTaskResumeAll
000118  e1a00004          MOV      r0,r4                 ;1420
00011c  ebfffffe          BL       prvIsQueueEmpty
000120  e3500000          CMP      r0,#0                 ;1420
000124  0affffbc          BEQ      |L15.28|
                  |L15.296|
000128  e3a00000          MOV      r0,#0                 ;1423
00012c  eaffffce          B        |L15.108|
                  |L15.304|
000130  ebfffffe          BL       prvIsQueueEmpty
000134  e3500000          CMP      r0,#0                 ;1376
000138  0a00000f          BEQ      |L15.380|
00013c  e5940000          LDR      r0,[r4,#0]            ;1382
000140  e3500000          CMP      r0,#0                 ;1382
000144  1a000003          BNE      |L15.344|
000148  ebfffffe          BL       vPortEnterCritical
00014c  e5940004          LDR      r0,[r4,#4]            ;1386
000150  ebfffffe          BL       vTaskPriorityInherit
000154  ebfffffe          BL       vPortExitCritical
                  |L15.344|
000158  e59d1014          LDR      r1,[sp,#0x14]         ;1397
00015c  e2840024          ADD      r0,r4,#0x24           ;1397
000160  ebfffffe          BL       vTaskPlaceOnEventList
000164  e1a00004          MOV      r0,r4                 ;1398
000168  ebfffffe          BL       prvUnlockQueue
00016c  ebfffffe          BL       xTaskResumeAll
000170  e3500000          CMP      r0,#0                 ;1399
000174  0bfffffe          BLEQ     vPortYield
000178  eaffffa7          B        |L15.28|
                  |L15.380|
00017c  e1a00004          MOV      r0,r4                 ;1411
000180  ebfffffe          BL       prvUnlockQueue
000184  ebfffffe          BL       xTaskResumeAll
000188  eaffffa3          B        |L15.28|
;;;1432   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericReset||, CODE, READONLY, ALIGN=2

                  xQueueGenericReset PROC
;;;278    
;;;279    BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;280    {
000004  e1a05001          MOV      r5,r1
000008  e1a04000          MOV      r4,r0
;;;281    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;282    
;;;283    	configASSERT( pxQueue );
;;;284    
;;;285    	taskENTER_CRITICAL();
00000c  ebfffffe          BL       vPortEnterCritical
;;;286    	{
;;;287    		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
000010  e5940000          LDR      r0,[r4,#0]
000014  e594103c          LDR      r1,[r4,#0x3c]
000018  e5942040          LDR      r2,[r4,#0x40]
00001c  e0200291          MLA      r0,r1,r2,r0
000020  e5840004          STR      r0,[r4,#4]
;;;288    		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
000024  e3a00000          MOV      r0,#0
000028  e5840038          STR      r0,[r4,#0x38]
;;;289    		pxQueue->pcWriteTo = pxQueue->pcHead;
00002c  e5940000          LDR      r0,[r4,#0]
000030  e2411001          SUB      r1,r1,#1
000034  e5840008          STR      r0,[r4,#8]
;;;290    		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
000038  e0200291          MLA      r0,r1,r2,r0
00003c  e584000c          STR      r0,[r4,#0xc]
;;;291    		pxQueue->cRxLock = queueUNLOCKED;
000040  e3e00000          MVN      r0,#0
000044  e5c40044          STRB     r0,[r4,#0x44]
;;;292    		pxQueue->cTxLock = queueUNLOCKED;
000048  e5c40045          STRB     r0,[r4,#0x45]
;;;293    
;;;294    		if( xNewQueue == pdFALSE )
00004c  e3550000          CMP      r5,#0
000050  0a000006          BEQ      |L16.112|
;;;295    		{
;;;296    			/* If there are tasks blocked waiting to read from the queue, then
;;;297    			the tasks will remain blocked as after this function exits the queue
;;;298    			will still be empty.  If there are tasks blocked waiting to write to
;;;299    			the queue, then one should be unblocked as after this function exits
;;;300    			it will be possible to write to it. */
;;;301    			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;302    			{
;;;303    				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
;;;304    				{
;;;305    					queueYIELD_IF_USING_PREEMPTION();
;;;306    				}
;;;307    				else
;;;308    				{
;;;309    					mtCOVERAGE_TEST_MARKER();
;;;310    				}
;;;311    			}
;;;312    			else
;;;313    			{
;;;314    				mtCOVERAGE_TEST_MARKER();
;;;315    			}
;;;316    		}
;;;317    		else
;;;318    		{
;;;319    			/* Ensure the event queues start in the correct state. */
;;;320    			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
000054  e2840010          ADD      r0,r4,#0x10
000058  ebfffffe          BL       vListInitialise
;;;321    			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
00005c  e2840024          ADD      r0,r4,#0x24
000060  ebfffffe          BL       vListInitialise
                  |L16.100|
;;;322    		}
;;;323    	}
;;;324    	taskEXIT_CRITICAL();
000064  ebfffffe          BL       vPortExitCritical
;;;325    
;;;326    	/* A value is returned for calling semantic consistency with previous
;;;327    	versions. */
;;;328    	return pdPASS;
000068  e3a00001          MOV      r0,#1
;;;329    }
00006c  e8bd8070          POP      {r4-r6,pc}
                  |L16.112|
000070  e5940010          LDR      r0,[r4,#0x10]         ;301
000074  e3500000          CMP      r0,#0                 ;301
000078  0afffff9          BEQ      |L16.100|
00007c  e2840010          ADD      r0,r4,#0x10           ;303
000080  ebfffffe          BL       xTaskRemoveFromEventList
000084  e3500000          CMP      r0,#0                 ;303
000088  1bfffffe          BLNE     vPortYield
00008c  eafffff4          B        |L16.100|
;;;330    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericSend||, CODE, READONLY, ALIGN=2

                  xQueueGenericSend PROC
;;;722    
;;;723    BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
000000  e92d43ff          PUSH     {r0-r9,lr}
;;;724    {
;;;725    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
000004  e3a06000          MOV      r6,#0
000008  e24dd00c          SUB      sp,sp,#0xc            ;724
00000c  e1a08003          MOV      r8,r3                 ;724
000010  e1a09001          MOV      r9,r1                 ;724
000014  e1a04000          MOV      r4,r0                 ;724
000018  e1a07006          MOV      r7,r6
                  |L17.28|
;;;726    TimeOut_t xTimeOut;
;;;727    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;728    
;;;729    	configASSERT( pxQueue );
;;;730    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;731    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;732    	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
;;;733    	{
;;;734    		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
;;;735    	}
;;;736    	#endif
;;;737    
;;;738    
;;;739    	/* This function relaxes the coding standard somewhat to allow return
;;;740    	statements within the function itself.  This is done in the interest
;;;741    	of execution time efficiency. */
;;;742    	for( ;; )
;;;743    	{
;;;744    		taskENTER_CRITICAL();
00001c  ebfffffe          BL       vPortEnterCritical
;;;745    		{
;;;746    			/* Is there room on the queue now?  The running task must be the
;;;747    			highest priority task wanting to access the queue.  If the head item
;;;748    			in the queue is to be overwritten then it does not matter if the
;;;749    			queue is full. */
;;;750    			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000020  e5940038          LDR      r0,[r4,#0x38]
000024  e594103c          LDR      r1,[r4,#0x3c]
000028  e1500001          CMP      r0,r1
00002c  3a000007          BCC      |L17.80|
000030  e3580002          CMP      r8,#2
000034  0a000005          BEQ      |L17.80|
;;;751    			{
;;;752    				traceQUEUE_SEND( pxQueue );
;;;753    				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;754    
;;;755    				#if ( configUSE_QUEUE_SETS == 1 )
;;;756    				{
;;;757    					if( pxQueue->pxQueueSetContainer != NULL )
;;;758    					{
;;;759    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
;;;760    						{
;;;761    							/* The queue is a member of a queue set, and posting
;;;762    							to the queue set caused a higher priority task to
;;;763    							unblock. A context switch is required. */
;;;764    							queueYIELD_IF_USING_PREEMPTION();
;;;765    						}
;;;766    						else
;;;767    						{
;;;768    							mtCOVERAGE_TEST_MARKER();
;;;769    						}
;;;770    					}
;;;771    					else
;;;772    					{
;;;773    						/* If there was a task waiting for data to arrive on the
;;;774    						queue then unblock it now. */
;;;775    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;776    						{
;;;777    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;778    							{
;;;779    								/* The unblocked task has a priority higher than
;;;780    								our own so yield immediately.  Yes it is ok to
;;;781    								do this from within the critical section - the
;;;782    								kernel takes care of that. */
;;;783    								queueYIELD_IF_USING_PREEMPTION();
;;;784    							}
;;;785    							else
;;;786    							{
;;;787    								mtCOVERAGE_TEST_MARKER();
;;;788    							}
;;;789    						}
;;;790    						else if( xYieldRequired != pdFALSE )
;;;791    						{
;;;792    							/* This path is a special case that will only get
;;;793    							executed if the task was holding multiple mutexes
;;;794    							and the mutexes were given back in an order that is
;;;795    							different to that in which they were taken. */
;;;796    							queueYIELD_IF_USING_PREEMPTION();
;;;797    						}
;;;798    						else
;;;799    						{
;;;800    							mtCOVERAGE_TEST_MARKER();
;;;801    						}
;;;802    					}
;;;803    				}
;;;804    				#else /* configUSE_QUEUE_SETS */
;;;805    				{
;;;806    					/* If there was a task waiting for data to arrive on the
;;;807    					queue then unblock it now. */
;;;808    					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;809    					{
;;;810    						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;811    						{
;;;812    							/* The unblocked task has a priority higher than
;;;813    							our own so yield immediately.  Yes it is ok to do
;;;814    							this from within the critical section - the kernel
;;;815    							takes care of that. */
;;;816    							queueYIELD_IF_USING_PREEMPTION();
;;;817    						}
;;;818    						else
;;;819    						{
;;;820    							mtCOVERAGE_TEST_MARKER();
;;;821    						}
;;;822    					}
;;;823    					else if( xYieldRequired != pdFALSE )
;;;824    					{
;;;825    						/* This path is a special case that will only get
;;;826    						executed if the task was holding multiple mutexes and
;;;827    						the mutexes were given back in an order that is
;;;828    						different to that in which they were taken. */
;;;829    						queueYIELD_IF_USING_PREEMPTION();
;;;830    					}
;;;831    					else
;;;832    					{
;;;833    						mtCOVERAGE_TEST_MARKER();
;;;834    					}
;;;835    				}
;;;836    				#endif /* configUSE_QUEUE_SETS */
;;;837    
;;;838    				taskEXIT_CRITICAL();
;;;839    				return pdPASS;
;;;840    			}
;;;841    			else
;;;842    			{
;;;843    				if( xTicksToWait == ( TickType_t ) 0 )
000038  e59d0014          LDR      r0,[sp,#0x14]
00003c  e3500000          CMP      r0,#0
000040  0a000010          BEQ      |L17.136|
;;;844    				{
;;;845    					/* The queue was full and no block time is specified (or
;;;846    					the block time has expired) so leave now. */
;;;847    					taskEXIT_CRITICAL();
;;;848    
;;;849    					/* Return to the original privilege level before exiting
;;;850    					the function. */
;;;851    					traceQUEUE_SEND_FAILED( pxQueue );
;;;852    					return errQUEUE_FULL;
;;;853    				}
;;;854    				else if( xEntryTimeSet == pdFALSE )
000044  e3560000          CMP      r6,#0
000048  0a000010          BEQ      |L17.144|
00004c  ea000012          B        |L17.156|
                  |L17.80|
000050  e1a02008          MOV      r2,r8                 ;753
000054  e1a01009          MOV      r1,r9                 ;753
000058  e1a00004          MOV      r0,r4                 ;753
00005c  ebfffffe          BL       prvCopyDataToQueue
000060  e5941024          LDR      r1,[r4,#0x24]         ;808
000064  e3510000          CMP      r1,#0                 ;808
000068  12840024          ADDNE    r0,r4,#0x24           ;810
00006c  1bfffffe          BLNE     xTaskRemoveFromEventList
000070  e3500000          CMP      r0,#0                 ;823
000074  1bfffffe          BLNE     vPortYield
000078  ebfffffe          BL       vPortExitCritical
00007c  e3a00001          MOV      r0,#1                 ;839
                  |L17.128|
000080  e28dd01c          ADD      sp,sp,#0x1c           ;839
;;;855    				{
;;;856    					/* The queue was full and a block time was specified so
;;;857    					configure the timeout structure. */
;;;858    					vTaskSetTimeOutState( &xTimeOut );
;;;859    					xEntryTimeSet = pdTRUE;
;;;860    				}
;;;861    				else
;;;862    				{
;;;863    					/* Entry time was already set. */
;;;864    					mtCOVERAGE_TEST_MARKER();
;;;865    				}
;;;866    			}
;;;867    		}
;;;868    		taskEXIT_CRITICAL();
;;;869    
;;;870    		/* Interrupts and other tasks can send to and receive from the queue
;;;871    		now the critical section has been exited. */
;;;872    
;;;873    		vTaskSuspendAll();
;;;874    		prvLockQueue( pxQueue );
;;;875    
;;;876    		/* Update the timeout state to see if it has expired yet. */
;;;877    		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
;;;878    		{
;;;879    			if( prvIsQueueFull( pxQueue ) != pdFALSE )
;;;880    			{
;;;881    				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
;;;882    				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
;;;883    
;;;884    				/* Unlocking the queue means queue events can effect the
;;;885    				event list.  It is possible	that interrupts occurring now
;;;886    				remove this task from the event	list again - but as the
;;;887    				scheduler is suspended the task will go onto the pending
;;;888    				ready last instead of the actual ready list. */
;;;889    				prvUnlockQueue( pxQueue );
;;;890    
;;;891    				/* Resuming the scheduler will move tasks from the pending
;;;892    				ready list into the ready list - so it is feasible that this
;;;893    				task is already in a ready list before it yields - in which
;;;894    				case the yield will not cause a context switch unless there
;;;895    				is also a higher priority task in the pending ready list. */
;;;896    				if( xTaskResumeAll() == pdFALSE )
;;;897    				{
;;;898    					portYIELD_WITHIN_API();
;;;899    				}
;;;900    			}
;;;901    			else
;;;902    			{
;;;903    				/* Try again. */
;;;904    				prvUnlockQueue( pxQueue );
;;;905    				( void ) xTaskResumeAll();
;;;906    			}
;;;907    		}
;;;908    		else
;;;909    		{
;;;910    			/* The timeout has expired. */
;;;911    			prvUnlockQueue( pxQueue );
;;;912    			( void ) xTaskResumeAll();
;;;913    
;;;914    			traceQUEUE_SEND_FAILED( pxQueue );
;;;915    			return errQUEUE_FULL;
;;;916    		}
;;;917    	}
;;;918    }
000084  e8bd83f0          POP      {r4-r9,pc}
                  |L17.136|
000088  ebfffffe          BL       vPortExitCritical
00008c  ea000014          B        |L17.228|
                  |L17.144|
000090  e1a0000d          MOV      r0,sp                 ;858
000094  ebfffffe          BL       vTaskSetTimeOutState
000098  e3a06001          MOV      r6,#1                 ;859
                  |L17.156|
00009c  ebfffffe          BL       vPortExitCritical
0000a0  ebfffffe          BL       vTaskSuspendAll
0000a4  ebfffffe          BL       vPortEnterCritical
0000a8  e1d404d4          LDRSB    r0,[r4,#0x44]         ;874
0000ac  e3700001          CMN      r0,#1                 ;874
0000b0  05c47044          STRBEQ   r7,[r4,#0x44]         ;874
0000b4  e1d404d5          LDRSB    r0,[r4,#0x45]         ;874
0000b8  e3700001          CMN      r0,#1                 ;874
0000bc  05c47045          STRBEQ   r7,[r4,#0x45]         ;874
0000c0  ebfffffe          BL       vPortExitCritical
0000c4  e28d1014          ADD      r1,sp,#0x14           ;877
0000c8  e1a0000d          MOV      r0,sp                 ;877
0000cc  ebfffffe          BL       xTaskCheckForTimeOut
0000d0  e3500000          CMP      r0,#0                 ;877
0000d4  0a000004          BEQ      |L17.236|
0000d8  e1a00004          MOV      r0,r4                 ;911
0000dc  ebfffffe          BL       prvUnlockQueue
0000e0  ebfffffe          BL       xTaskResumeAll
                  |L17.228|
0000e4  e3a00000          MOV      r0,#0                 ;915
0000e8  eaffffe4          B        |L17.128|
                  |L17.236|
0000ec  ebfffffe          BL       vPortEnterCritical
0000f0  e5940038          LDR      r0,[r4,#0x38]         ;915
0000f4  e594103c          LDR      r1,[r4,#0x3c]         ;915
0000f8  e1500001          CMP      r0,r1                 ;915
0000fc  13a05000          MOVNE    r5,#0                 ;915
000100  03a05001          MOVEQ    r5,#1                 ;915
000104  ebfffffe          BL       vPortExitCritical
000108  e3550000          CMP      r5,#0                 ;879
00010c  0a000008          BEQ      |L17.308|
000110  e59d1014          LDR      r1,[sp,#0x14]         ;882
000114  e2840010          ADD      r0,r4,#0x10           ;882
000118  ebfffffe          BL       vTaskPlaceOnEventList
00011c  e1a00004          MOV      r0,r4                 ;889
000120  ebfffffe          BL       prvUnlockQueue
000124  ebfffffe          BL       xTaskResumeAll
000128  e3500000          CMP      r0,#0                 ;896
00012c  0bfffffe          BLEQ     vPortYield
000130  eaffffb9          B        |L17.28|
                  |L17.308|
000134  e1a00004          MOV      r0,r4                 ;904
000138  ebfffffe          BL       prvUnlockQueue
00013c  ebfffffe          BL       xTaskResumeAll
000140  eaffffb5          B        |L17.28|
;;;919    /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGenericSendFromISR||, CODE, READONLY, ALIGN=2

                  xQueueGenericSendFromISR PROC
;;;920    
;;;921    BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;922    {
000004  e1a04000          MOV      r4,r0
;;;923    BaseType_t xReturn;
;;;924    UBaseType_t uxSavedInterruptStatus;
;;;925    Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;926    
;;;927    	configASSERT( pxQueue );
;;;928    	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;929    	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
;;;930    
;;;931    	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;932    	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;933    	above the maximum system call priority are kept permanently enabled, even
;;;934    	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;935    	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;936    	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;937    	failure if a FreeRTOS API function is called from an interrupt that has been
;;;938    	assigned a priority above the configured maximum system call priority.
;;;939    	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;940    	that have been assigned a priority at or (logically) below the maximum
;;;941    	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;942    	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;943    	More information (albeit Cortex-M specific) is provided on the following
;;;944    	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;945    	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;946    
;;;947    	/* Similar to xQueueGenericSend, except without blocking if there is no room
;;;948    	in the queue.  Also don't directly wake a task that was blocked on a queue
;;;949    	read, instead return a flag to say whether a context switch is required or
;;;950    	not (i.e. has a task with a higher priority than us been woken by this
;;;951    	post). */
;;;952    	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;953    	{
;;;954    		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
000008  e5900038          LDR      r0,[r0,#0x38]
00000c  e1a06002          MOV      r6,r2                 ;922
000010  e594203c          LDR      r2,[r4,#0x3c]
000014  e1500002          CMP      r0,r2
000018  3a000002          BCC      |L18.40|
00001c  e3530002          CMP      r3,#2
;;;955    		{
;;;956    			const int8_t cTxLock = pxQueue->cTxLock;
;;;957    
;;;958    			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;959    
;;;960    			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
;;;961    			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
;;;962    			in a task disinheriting a priority and prvCopyDataToQueue() can be
;;;963    			called here even though the disinherit function does not check if
;;;964    			the scheduler is suspended before accessing the ready lists. */
;;;965    			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
;;;966    
;;;967    			/* The event list is not altered if the queue is locked.  This will
;;;968    			be done when the queue is unlocked later. */
;;;969    			if( cTxLock == queueUNLOCKED )
;;;970    			{
;;;971    				#if ( configUSE_QUEUE_SETS == 1 )
;;;972    				{
;;;973    					if( pxQueue->pxQueueSetContainer != NULL )
;;;974    					{
;;;975    						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
;;;976    						{
;;;977    							/* The queue is a member of a queue set, and posting
;;;978    							to the queue set caused a higher priority task to
;;;979    							unblock.  A context switch is required. */
;;;980    							if( pxHigherPriorityTaskWoken != NULL )
;;;981    							{
;;;982    								*pxHigherPriorityTaskWoken = pdTRUE;
;;;983    							}
;;;984    							else
;;;985    							{
;;;986    								mtCOVERAGE_TEST_MARKER();
;;;987    							}
;;;988    						}
;;;989    						else
;;;990    						{
;;;991    							mtCOVERAGE_TEST_MARKER();
;;;992    						}
;;;993    					}
;;;994    					else
;;;995    					{
;;;996    						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;997    						{
;;;998    							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;999    							{
;;;1000   								/* The task waiting has a higher priority so
;;;1001   								record that a context switch is required. */
;;;1002   								if( pxHigherPriorityTaskWoken != NULL )
;;;1003   								{
;;;1004   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1005   								}
;;;1006   								else
;;;1007   								{
;;;1008   									mtCOVERAGE_TEST_MARKER();
;;;1009   								}
;;;1010   							}
;;;1011   							else
;;;1012   							{
;;;1013   								mtCOVERAGE_TEST_MARKER();
;;;1014   							}
;;;1015   						}
;;;1016   						else
;;;1017   						{
;;;1018   							mtCOVERAGE_TEST_MARKER();
;;;1019   						}
;;;1020   					}
;;;1021   				}
;;;1022   				#else /* configUSE_QUEUE_SETS */
;;;1023   				{
;;;1024   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1025   					{
;;;1026   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1027   						{
;;;1028   							/* The task waiting has a higher priority so record that a
;;;1029   							context	switch is required. */
;;;1030   							if( pxHigherPriorityTaskWoken != NULL )
;;;1031   							{
;;;1032   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1033   							}
;;;1034   							else
;;;1035   							{
;;;1036   								mtCOVERAGE_TEST_MARKER();
;;;1037   							}
;;;1038   						}
;;;1039   						else
;;;1040   						{
;;;1041   							mtCOVERAGE_TEST_MARKER();
;;;1042   						}
;;;1043   					}
;;;1044   					else
;;;1045   					{
;;;1046   						mtCOVERAGE_TEST_MARKER();
;;;1047   					}
;;;1048   				}
;;;1049   				#endif /* configUSE_QUEUE_SETS */
;;;1050   			}
;;;1051   			else
;;;1052   			{
;;;1053   				/* Increment the lock count so the task that unlocks the queue
;;;1054   				knows that data was posted while it was locked. */
;;;1055   				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
;;;1056   			}
;;;1057   
;;;1058   			xReturn = pdPASS;
;;;1059   		}
;;;1060   		else
;;;1061   		{
;;;1062   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1063   			xReturn = errQUEUE_FULL;
000020  13a00000          MOVNE    r0,#0
;;;1064   		}
;;;1065   	}
;;;1066   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1067   
;;;1068   	return xReturn;
;;;1069   }
000024  18bd8070          POPNE    {r4-r6,pc}
                  |L18.40|
000028  e1d454d5          LDRSB    r5,[r4,#0x45]         ;956
00002c  e1a02003          MOV      r2,r3                 ;965
000030  e1a00004          MOV      r0,r4                 ;965
000034  ebfffffe          BL       prvCopyDataToQueue
000038  e3750001          CMN      r5,#1                 ;969
00003c  12850001          ADDNE    r0,r5,#1              ;1055
000040  15c40045          STRBNE   r0,[r4,#0x45]         ;1055
000044  0a000001          BEQ      |L18.80|
                  |L18.72|
000048  e3a00001          MOV      r0,#1                 ;1058
00004c  e8bd8070          POP      {r4-r6,pc}
                  |L18.80|
000050  e5940024          LDR      r0,[r4,#0x24]         ;1024
000054  e3500000          CMP      r0,#0                 ;1024
000058  0afffffa          BEQ      |L18.72|
00005c  e2840024          ADD      r0,r4,#0x24           ;1026
000060  ebfffffe          BL       xTaskRemoveFromEventList
000064  e3500000          CMP      r0,#0                 ;1026
000068  13560000          CMPNE    r6,#0                 ;1030
00006c  13a00001          MOVNE    r0,#1                 ;1032
000070  15860000          STRNE    r0,[r6,#0]            ;1032
000074  eafffff3          B        |L18.72|
;;;1070   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueGiveFromISR||, CODE, READONLY, ALIGN=2

                  xQueueGiveFromISR PROC
;;;1071   
;;;1072   BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
000000  e92d4010          PUSH     {r4,lr}
;;;1073   {
;;;1074   BaseType_t xReturn;
;;;1075   UBaseType_t uxSavedInterruptStatus;
;;;1076   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1077   
;;;1078   	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
;;;1079   	item size is 0.  Don't directly wake a task that was blocked on a queue
;;;1080   	read, instead return a flag to say whether a context switch is required or
;;;1081   	not (i.e. has a task with a higher priority than us been woken by this
;;;1082   	post). */
;;;1083   
;;;1084   	configASSERT( pxQueue );
;;;1085   
;;;1086   	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
;;;1087   	if the item size is not 0. */
;;;1088   	configASSERT( pxQueue->uxItemSize == 0 );
;;;1089   
;;;1090   	/* Normally a mutex would not be given from an interrupt, especially if
;;;1091   	there is a mutex holder, as priority inheritance makes no sense for an
;;;1092   	interrupts, only tasks. */
;;;1093   	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
;;;1094   
;;;1095   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1096   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1097   	above the maximum system call priority are kept permanently enabled, even
;;;1098   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1099   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1100   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1101   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1102   	assigned a priority above the configured maximum system call priority.
;;;1103   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1104   	that have been assigned a priority at or (logically) below the maximum
;;;1105   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1106   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1107   	More information (albeit Cortex-M specific) is provided on the following
;;;1108   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1109   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1110   
;;;1111   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1112   	{
;;;1113   		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000004  e5902038          LDR      r2,[r0,#0x38]
000008  e1a04001          MOV      r4,r1                 ;1073
;;;1114   
;;;1115   		/* When the queue is used to implement a semaphore no data is ever
;;;1116   		moved through the queue but it is still valid to see if the queue 'has
;;;1117   		space'. */
;;;1118   		if( uxMessagesWaiting < pxQueue->uxLength )
00000c  e590103c          LDR      r1,[r0,#0x3c]
000010  e1510002          CMP      r1,r2
;;;1119   		{
;;;1120   			const int8_t cTxLock = pxQueue->cTxLock;
;;;1121   
;;;1122   			traceQUEUE_SEND_FROM_ISR( pxQueue );
;;;1123   
;;;1124   			/* A task can only have an inherited priority if it is a mutex
;;;1125   			holder - and if there is a mutex holder then the mutex cannot be
;;;1126   			given from an ISR.  As this is the ISR version of the function it
;;;1127   			can be assumed there is no mutex holder and no need to determine if
;;;1128   			priority disinheritance is needed.  Simply increase the count of
;;;1129   			messages (semaphores) available. */
;;;1130   			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
;;;1131   
;;;1132   			/* The event list is not altered if the queue is locked.  This will
;;;1133   			be done when the queue is unlocked later. */
;;;1134   			if( cTxLock == queueUNLOCKED )
;;;1135   			{
;;;1136   				#if ( configUSE_QUEUE_SETS == 1 )
;;;1137   				{
;;;1138   					if( pxQueue->pxQueueSetContainer != NULL )
;;;1139   					{
;;;1140   						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
;;;1141   						{
;;;1142   							/* The semaphore is a member of a queue set, and
;;;1143   							posting	to the queue set caused a higher priority
;;;1144   							task to	unblock.  A context switch is required. */
;;;1145   							if( pxHigherPriorityTaskWoken != NULL )
;;;1146   							{
;;;1147   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1148   							}
;;;1149   							else
;;;1150   							{
;;;1151   								mtCOVERAGE_TEST_MARKER();
;;;1152   							}
;;;1153   						}
;;;1154   						else
;;;1155   						{
;;;1156   							mtCOVERAGE_TEST_MARKER();
;;;1157   						}
;;;1158   					}
;;;1159   					else
;;;1160   					{
;;;1161   						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1162   						{
;;;1163   							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1164   							{
;;;1165   								/* The task waiting has a higher priority so
;;;1166   								record that a context switch is required. */
;;;1167   								if( pxHigherPriorityTaskWoken != NULL )
;;;1168   								{
;;;1169   									*pxHigherPriorityTaskWoken = pdTRUE;
;;;1170   								}
;;;1171   								else
;;;1172   								{
;;;1173   									mtCOVERAGE_TEST_MARKER();
;;;1174   								}
;;;1175   							}
;;;1176   							else
;;;1177   							{
;;;1178   								mtCOVERAGE_TEST_MARKER();
;;;1179   							}
;;;1180   						}
;;;1181   						else
;;;1182   						{
;;;1183   							mtCOVERAGE_TEST_MARKER();
;;;1184   						}
;;;1185   					}
;;;1186   				}
;;;1187   				#else /* configUSE_QUEUE_SETS */
;;;1188   				{
;;;1189   					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
;;;1190   					{
;;;1191   						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
;;;1192   						{
;;;1193   							/* The task waiting has a higher priority so record that a
;;;1194   							context	switch is required. */
;;;1195   							if( pxHigherPriorityTaskWoken != NULL )
;;;1196   							{
;;;1197   								*pxHigherPriorityTaskWoken = pdTRUE;
;;;1198   							}
;;;1199   							else
;;;1200   							{
;;;1201   								mtCOVERAGE_TEST_MARKER();
;;;1202   							}
;;;1203   						}
;;;1204   						else
;;;1205   						{
;;;1206   							mtCOVERAGE_TEST_MARKER();
;;;1207   						}
;;;1208   					}
;;;1209   					else
;;;1210   					{
;;;1211   						mtCOVERAGE_TEST_MARKER();
;;;1212   					}
;;;1213   				}
;;;1214   				#endif /* configUSE_QUEUE_SETS */
;;;1215   			}
;;;1216   			else
;;;1217   			{
;;;1218   				/* Increment the lock count so the task that unlocks the queue
;;;1219   				knows that data was posted while it was locked. */
;;;1220   				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
;;;1221   			}
;;;1222   
;;;1223   			xReturn = pdPASS;
;;;1224   		}
;;;1225   		else
;;;1226   		{
;;;1227   			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
;;;1228   			xReturn = errQUEUE_FULL;
000014  93a00000          MOVLS    r0,#0
;;;1229   		}
;;;1230   	}
;;;1231   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1232   
;;;1233   	return xReturn;
;;;1234   }
000018  98bd8010          POPLS    {r4,pc}
00001c  e1d034d5          LDRSB    r3,[r0,#0x45]         ;1120
000020  e2821001          ADD      r1,r2,#1              ;1130
000024  e5801038          STR      r1,[r0,#0x38]         ;1130
000028  e3730001          CMN      r3,#1                 ;1134
00002c  12831001          ADDNE    r1,r3,#1              ;1220
000030  15c01045          STRBNE   r1,[r0,#0x45]         ;1220
000034  0a000001          BEQ      |L19.64|
                  |L19.56|
000038  e3a00001          MOV      r0,#1                 ;1223
00003c  e8bd8010          POP      {r4,pc}
                  |L19.64|
000040  e5901024          LDR      r1,[r0,#0x24]         ;1189
000044  e3510000          CMP      r1,#0                 ;1189
000048  0afffffa          BEQ      |L19.56|
00004c  e2800024          ADD      r0,r0,#0x24           ;1189
000050  ebfffffe          BL       xTaskRemoveFromEventList
000054  e3500000          CMP      r0,#0                 ;1191
000058  13540000          CMPNE    r4,#0                 ;1195
00005c  13a00001          MOVNE    r0,#1                 ;1197
000060  15840000          STRNE    r0,[r4,#0]            ;1197
000064  eafffff3          B        |L19.56|
;;;1235   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueEmptyFromISR||, CODE, READONLY, ALIGN=2

                  xQueueIsQueueEmptyFromISR PROC
;;;1934   
;;;1935   BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
000000  e5900038          LDR      r0,[r0,#0x38]
;;;1936   {
;;;1937   BaseType_t xReturn;
;;;1938   
;;;1939   	configASSERT( xQueue );
;;;1940   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
000004  e3500000          CMP      r0,#0
;;;1941   	{
;;;1942   		xReturn = pdTRUE;
000008  03a00001          MOVEQ    r0,#1
;;;1943   	}
;;;1944   	else
;;;1945   	{
;;;1946   		xReturn = pdFALSE;
00000c  13a00000          MOVNE    r0,#0
;;;1947   	}
;;;1948   
;;;1949   	return xReturn;
;;;1950   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000010  e12fff1e          BX       lr
;;;1951   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueIsQueueFullFromISR||, CODE, READONLY, ALIGN=2

                  xQueueIsQueueFullFromISR PROC
;;;1973   
;;;1974   BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
000000  e5901038          LDR      r1,[r0,#0x38]
;;;1975   {
;;;1976   BaseType_t xReturn;
;;;1977   
;;;1978   	configASSERT( xQueue );
;;;1979   	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
000004  e590003c          LDR      r0,[r0,#0x3c]
000008  e1510000          CMP      r1,r0
;;;1980   	{
;;;1981   		xReturn = pdTRUE;
00000c  03a00001          MOVEQ    r0,#1
;;;1982   	}
;;;1983   	else
;;;1984   	{
;;;1985   		xReturn = pdFALSE;
000010  13a00000          MOVNE    r0,#0
;;;1986   	}
;;;1987   
;;;1988   	return xReturn;
;;;1989   } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
000014  e12fff1e          BX       lr
;;;1990   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueuePeekFromISR||, CODE, READONLY, ALIGN=2

                  xQueuePeekFromISR PROC
;;;1524   
;;;1525   BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
000000  e92d4070          PUSH     {r4-r6,lr}
;;;1526   {
000004  e1a04000          MOV      r4,r0
;;;1527   BaseType_t xReturn;
;;;1528   UBaseType_t uxSavedInterruptStatus;
;;;1529   int8_t *pcOriginalReadPosition;
;;;1530   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1531   
;;;1532   	configASSERT( pxQueue );
;;;1533   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1534   	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
;;;1535   
;;;1536   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1537   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1538   	above the maximum system call priority are kept permanently enabled, even
;;;1539   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1540   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1541   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1542   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1543   	assigned a priority above the configured maximum system call priority.
;;;1544   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1545   	that have been assigned a priority at or (logically) below the maximum
;;;1546   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1547   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1548   	More information (albeit Cortex-M specific) is provided on the following
;;;1549   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1550   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1551   
;;;1552   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1553   	{
;;;1554   		/* Cannot block in an ISR, so check there is data available. */
;;;1555   		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
000008  e5900038          LDR      r0,[r0,#0x38]
00000c  e3500000          CMP      r0,#0
;;;1556   		{
;;;1557   			traceQUEUE_PEEK_FROM_ISR( pxQueue );
;;;1558   
;;;1559   			/* Remember the read position so it can be reset as nothing is
;;;1560   			actually being removed from the queue. */
;;;1561   			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
;;;1562   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1563   			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
;;;1564   
;;;1565   			xReturn = pdPASS;
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			xReturn = pdFAIL;
;;;1570   			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
;;;1571   		}
;;;1572   	}
;;;1573   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1574   
;;;1575   	return xReturn;
;;;1576   }
000010  08bd8070          POPEQ    {r4-r6,pc}
000014  e594500c          LDR      r5,[r4,#0xc]          ;1561
000018  e1a00004          MOV      r0,r4                 ;1562
00001c  ebfffffe          BL       prvCopyDataFromQueue
000020  e3a00001          MOV      r0,#1                 ;1565
000024  e584500c          STR      r5,[r4,#0xc]          ;1565
000028  e8bd8070          POP      {r4-r6,pc}
;;;1577   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.xQueueReceiveFromISR||, CODE, READONLY, ALIGN=2

                  xQueueReceiveFromISR PROC
;;;1433   
;;;1434   BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1435   {
;;;1436   BaseType_t xReturn;
;;;1437   UBaseType_t uxSavedInterruptStatus;
;;;1438   Queue_t * const pxQueue = ( Queue_t * ) xQueue;
;;;1439   
;;;1440   	configASSERT( pxQueue );
;;;1441   	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
;;;1442   
;;;1443   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1444   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1445   	above the maximum system call priority are kept permanently enabled, even
;;;1446   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1447   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1448   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1449   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1450   	assigned a priority above the configured maximum system call priority.
;;;1451   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1452   	that have been assigned a priority at or (logically) below the maximum
;;;1453   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1454   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1455   	More information (albeit Cortex-M specific) is provided on the following
;;;1456   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1457   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1458   
;;;1459   	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
;;;1460   	{
;;;1461   		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
000004  e5906038          LDR      r6,[r0,#0x38]
000008  e1a07002          MOV      r7,r2                 ;1435
00000c  e1a04000          MOV      r4,r0                 ;1435
;;;1462   
;;;1463   		/* Cannot block in an ISR, so check there is data available. */
;;;1464   		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
000010  e3560000          CMP      r6,#0
;;;1465   		{
;;;1466   			const int8_t cRxLock = pxQueue->cRxLock;
;;;1467   
;;;1468   			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
;;;1469   
;;;1470   			prvCopyDataFromQueue( pxQueue, pvBuffer );
;;;1471   			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
;;;1472   
;;;1473   			/* If the queue is locked the event list will not be modified.
;;;1474   			Instead update the lock count so the task that unlocks the queue
;;;1475   			will know that an ISR has removed data while the queue was
;;;1476   			locked. */
;;;1477   			if( cRxLock == queueUNLOCKED )
;;;1478   			{
;;;1479   				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
;;;1480   				{
;;;1481   					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
;;;1482   					{
;;;1483   						/* The task waiting has a higher priority than us so
;;;1484   						force a context switch. */
;;;1485   						if( pxHigherPriorityTaskWoken != NULL )
;;;1486   						{
;;;1487   							*pxHigherPriorityTaskWoken = pdTRUE;
;;;1488   						}
;;;1489   						else
;;;1490   						{
;;;1491   							mtCOVERAGE_TEST_MARKER();
;;;1492   						}
;;;1493   					}
;;;1494   					else
;;;1495   					{
;;;1496   						mtCOVERAGE_TEST_MARKER();
;;;1497   					}
;;;1498   				}
;;;1499   				else
;;;1500   				{
;;;1501   					mtCOVERAGE_TEST_MARKER();
;;;1502   				}
;;;1503   			}
;;;1504   			else
;;;1505   			{
;;;1506   				/* Increment the lock count so the task that unlocks the queue
;;;1507   				knows that data was removed while it was locked. */
;;;1508   				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
;;;1509   			}
;;;1510   
;;;1511   			xReturn = pdPASS;
;;;1512   		}
;;;1513   		else
;;;1514   		{
;;;1515   			xReturn = pdFAIL;
000014  03a00000          MOVEQ    r0,#0
;;;1516   			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
;;;1517   		}
;;;1518   	}
;;;1519   	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1520   
;;;1521   	return xReturn;
;;;1522   }
000018  08bd81f0          POPEQ    {r4-r8,pc}
00001c  e1d454d4          LDRSB    r5,[r4,#0x44]         ;1466
000020  ebfffffe          BL       prvCopyDataFromQueue
000024  e2460001          SUB      r0,r6,#1              ;1471
000028  e5840038          STR      r0,[r4,#0x38]         ;1471
00002c  e3750001          CMN      r5,#1                 ;1477
000030  12850001          ADDNE    r0,r5,#1              ;1508
000034  15c40044          STRBNE   r0,[r4,#0x44]         ;1508
000038  0a000001          BEQ      |L23.68|
                  |L23.60|
00003c  e3a00001          MOV      r0,#1                 ;1511
000040  e8bd81f0          POP      {r4-r8,pc}
                  |L23.68|
000044  e5940010          LDR      r0,[r4,#0x10]         ;1479
000048  e3500000          CMP      r0,#0                 ;1479
00004c  0afffffa          BEQ      |L23.60|
000050  e2840010          ADD      r0,r4,#0x10           ;1481
000054  ebfffffe          BL       xTaskRemoveFromEventList
000058  e3500000          CMP      r0,#0                 ;1481
00005c  13570000          CMPNE    r7,#0                 ;1485
000060  13a00001          MOVNE    r0,#1                 ;1487
000064  15870000          STRNE    r0,[r7,#0]            ;1487
000068  eafffff3          B        |L23.60|
;;;1523   /*-----------------------------------------------------------*/
                          ENDP

